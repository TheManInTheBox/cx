/* Cx library for character handling functions
 *
 * file     : cxctype
 * author   : <aaron.hebert@gmail.com>
 * desc     : Character handling functions
 * 
 * This header declares a set of functions to classify and transform 
 * individual characters. */

/* isdigit - Check if character is decimal digit
 * Checks whether c is a decimal digit character.
 * Decimal digits are any of: 0 1 2 3 4 5 6 7 8 9 
 *
 * @param c : char to test if digit.
 * @return true if digit, false if anything else. */

bool isdigit(char c){
    return ((c >= '0') && (c <= '9'));
}

/* isxdigit - Check if character is hexadecimal digit
 * Checks whether c is a hexdecimal digit character.
 * Hexadecimal digits are any of: 
 * 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F
 *
 * @param c : char to test if hex digit.
 * @return true if hex digit, false if not hex digit. */

bool isxdigit(char c){
    return  ((c == 'a') || (c == 'A') ||
            (c == 'b') || (c == 'B') ||
            (c == 'c') || (c == 'C') ||
            (c == 'd') || (c == 'D') ||
            (c == 'e') || (c == 'E') ||
            (c == 'f') || (c == 'F') ||
            (isdigit(c)));
}

/* islower - Check if character is lowercase letter
 * Checks whether c is a lowercase letter.
 * A lowercase letter is any of: 
 * a b c d e f g h i j k l m n o p q r s t u v w x y z
 *
 * @param c : char to test if lowercase.
 * @return true if lowercase, false if anything else (including digits). */

bool islower(char c){
    return ((c >= 'a') && (c <= 'z'));
}

/* isupper - Check if character is uppercase letter
 * Checks whether c is a uppercase letter.
 * A uppercase letter is any of: 
 * A B C D E G F H I J K L M N O P Q R S T U V W X Y Z
 *
 * @param c : char to test if uppercase.
 * @return true if uppercase, false if anything else (including digits). */

bool isupper(char c){
    return ((c >= 'A') && (c <= 'Z'));
}

/* isalpha - Check if character is alphabetic
 * Checks whether c is an alphabetic letter.
 * A letter is any of: 
 * a b c d e f g h i j k l m n o p q r s t u v w x y z
 * A B C D E G F H I J K L M N O P Q R S T U V W X Y Z
 *
 * @param c : char to test if alphabetic.
 * @return true if alphabetic, false if anything else. */

bool isalpha(char c){
    return (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')));
}

/* isalnum - Check if character is alphanumeric
 * Checks whether c is either a decimal digit or an 
 * uppercase or lowercase letter.
 * The result is true if either isalpha or isdigit 
 * would also return true.
 *
 * @param c : char to test if alphanumeric.
 * @return true if alphanumeric, false if anything else. */

bool isalnum(char c){
    return (isdigit(c) || isalpha(c));
}

/* isspace - Check if character is a white-space
 * Checks whether c is a white-space character.
 *
 * For the "C" locale, white-space characters are any of:
 * ' '	(0x20)	space (SPC)
 * '\t'	(0x09)	horizontal tab (TAB)
 * '\n'	(0x0a)	newline (LF)
 * '\v'	(0x0b)	vertical tab (VT)
 * '\f'	(0x0c)	feed (FF)
 * '\r'	(0x0d)	carriage return (CR)
 *
 * @param c : char to test if whitespace.
 * @return true if whitespace, false if anything else. */

bool isspace(char c){
    return ((c == ' ') || (c == '\t') ||
            (c == '\n')|| (c == '\v') ||
            (c == '\f')|| (c == '\r'));
}

/* isblank - Check if character is blank
 * Checks whether c is a blank character.
 * A blank character is a space character used to separate 
 * words within a line of text.
 *
 * The standard "C" locale considers blank characters the 
 * tab character ('\t') and the space character (' ').
 *
 * @param c : char to test if blank.
 * @return true if blank, false if anything else. */

bool isblank(char c){
    return ((c == ' ') || (c == '\t'));
}

/* toupper - Convert lowercase letter to uppercase
 * Converts c to its uppercase equivalent if c is a lowercase 
 * letter and has an uppercase equivalent. If no such conversion 
 * is possible, the value returned is c unchanged.
 *
 * @param c : char to uppercase.
 * @return uppercase if possible, c unchanged if anything else. */

char toupper(char c){
    if(islower(c)) return (c - 32);

    return c;
}

/* tolower - Convert uppercase letter to lowercase
 * Converts c to its lowercase equivalent if c is an uppercase 
 * letter and has a lowercase equivalent. If no such conversion 
 * is possible, the value returned is c unchanged.
 *
 * @param c : char to lowercase.
 * @return lowercase if possible, c unchanged if anything else. */

char tolower(char c){
    if(isupper(c)) return (c + 32);

    return c;
}

/* iscntrl - Check if character is a control character
 * Checks whether c is a control character.
 *
 * A control character is a character that does not occupy a printing position 
 * on a display (this is the opposite of a printable character, checked with 
 * isprint).
 * 
 * For the standard ASCII character set (used by the "C" locale), control 
 * characters are those between ASCII codes 0x00 (NUL) and 0x1f (US), 
 * plus 0x7f (DEL).
 *
 * @param : character to be checked.
 * @return true if control character, false if not. */

bool iscntrl(char c){
	// need c == '\r' in windows
    return ((((c >= 0) && (c <= 31)) || (c == 127)) || (c == '\r'));
}

/* isprint - Check if character is printable
 * Checks whether c is a printable character.
 * 
 * A printable character is a character that occupies a printing position on a 
 * display (this is the opposite of a control character, checked with iscntrl).
 * 
 * For the standard ASCII character set (used by the "C" locale), printing 
 * characters are all with an ASCII code greater than 0x1f (US), except 
 * 0x7f (DEL).
 *
 * @param : character to be checked.
 * @return true if printable character, false if not. */

bool isprint(char c){
    return (!iscntrl(c));
}

/* isgraph - Check if character has graphical representation
 * Checks whether c is a character with graphical representation.
 *  
 * The characters with graphical representation are all those characters that 
 * can be printed (as determined by isprint) except the space character (' ').
 *
 * @param : character to be checked.
 * @return true if graphical character, false if not. */

bool isgraph(char c){
    return ((isprint(c)) && (!isspace(c)));
}

/* ispunct - Check if character is a punctuation character
 * Checks whether c is a punctuation character.
 * 
 * The standard "C" locale considers punctuation characters all graphic 
 * characters (as in isgraph) that are not alphanumeric (as in isalnum).
 *
 * @param : character to be checked.
 * @return true if punctuation character, false if not. */

bool ispunct(char c){
    return ((isgraph(c)) && (!isalnum(c)));
}
