/* Cx library to perform Input/Output operations
 *
 * file     : stdio
 * author   : <aaron.hebert@gmail.com>
 * desc     : Input/Output operations
 *
 * This library uses what are called streams to operate with physical devices
 * such as keyboards, printers, terminals or with any other type of files
 * supported by the system. Streams are an abstraction to interact with these
 * in an uniform way; All streams have similar properties independently of the
 * individual characteristics of the physical media they are associated with.
 *
 * Streams are handled in the (C++) cstdio library as pointers to FILE objects.
 * A pointer to a FILE object uniquely identifies a stream, and is used as a
 * parameter in the operations involving that stream.
 *
 * There also exist three standard streams: stdin, stdout and
 * stderr, which are automatically created and opened for all programs
 * using the library.
 */

/* TODO: 
 * need #define directive to omit including headers twice
 */

/* 
 * Defined externally in stdio.cpp:
 * perror - displays a character string corresponding of the current error to stderr (function)
 * remove - erases a file (function)   
 * rename - renames a file (function)  
 * tmpnam - returns a unique filename (function)

 * stdin - expression of type FILE* associated with the input stream
 * stdout - expression of type FILE* associated with the output stream
 * stderr - expression of type FILE* associated with the error output stream
 
 * EOF - integer constant expression of type int and negative value (macro constant)  
 * FOPEN_MAX - number of files that can be open simultaneously (macro constant)  
 * FILENAME_MAX - size needed for an array of char to hold the longest supported file name (macro constant)  
 * SEEK_SET - argument to std::fseek indicating seeking from beginning of the file (macro constant)
 * SEEK_CUR - argument to std::fseek indicating seeking from the current file position (macro constant)
 * SEEK_END - argument to std::fseek indicating seeking from end of the file (macro constant)
 * TMP_MAX - maximum number of unique filenames that can be generated by std::tmpnam (macro constant)
 * L_tmpnam - size needed for an array of char to hold the result of std::tmpnam (macro constant) 
 */

#import stdio

/* putchar - Write character to stdout
 * Writes a character to the standard output (stdout).
 *
 * It is equivalent to calling putc with stdout as second argument.
 *
 * @param c : character to write to stdout.
 * @return ASCII code of character written. */
char putchar(char c){
    return stdout.putc(c);
}

/* puts - Write string to stdout
 * Writes the copied Cx string 'str' to the standard output (stdout)
 *
 * null-character is not copied to the stream.
 *
 * @param str : copied char array to write to stdout.
 * @return the string length of str. */
bool puts(char *str){
    return stdout.puts(str + '\n');
}

/* putws - Write wide string to stdout
 * Writes the copied Cx wide string 'str' to the standard output (stdout)
 *
 * null-character is not copied to the stream.
 *
 * @param str : copied wchar array to write to stdout.
 * @return the string length of str. */
int putws(wchar *str){
    return stdout.putws(str + '\n');
}

/* getchar - Get character from stdin
 * Returns the next character from the standard input (stdin) and echo's the
 * character to the screen.
 *
 * It is equivalent to calling getc, but getc will not echo the character.
 *
 * @return character read from stdin. */
char getchar(){
    return stdin.getc;
}

/* gets - Get string from stdin
 * Reads characters from the standard input (stdin) and stores them as a Cx
 * string into str until a newline character or the end-of-file is reached.
 *
 * The newline character, if found, is not copied into str.
 *
 * A terminating null character is automatically appended after the characters
 * copied to str.
 *
 * @return string of characters read from stdin. */
char *gets(){
    char *str;
    char c;
    bool condition = false;

    do{
        c = getchar();
	condition = ((c != '\n') && (c != '\r'));
        if(condition)str += c;
    }while(condition);

    return str;
}

/* getwchar - Get wide character from stdin
 * Returns the next wide character from the standard input (stdin) and echo's the
 * character to the screen.
 *
 * It is equivalent to calling stdin.getwc.
 *
 * @return wide character read from stdin. */
wchar getwchar(){
    return stdin.getwc;
}

/* putchar - Write wide character to stdout
 * Writes a wide character to the standard output (stdout).
 *
 * It is equivalent to calling stdout.putwc.
 *
 * @param c : wide character to write to stdout.
 * @return wide character written. */
wchar putwchar(wchar c){
    return stdout.putwc(c);
}

/* getws - Get wide string from stdin
 * Reads characters from the standard input (stdin) and stores them as a Cx
 * wide string into str until a newline character or the end-of-file is reached.
 *
 * The newline character, if found, is not copied into str.
 *
 * A terminating null character is automatically appended after the characters
 * copied to str.
 *
 * @return wide string of characters read from stdin. */
wchar *getws(){
    wchar *str;
    wchar c;
    bool condition = false;

    do{
        c = getwchar();
	condition = ((c != '\n') && (c != '\r'));
        if(condition)str += c;
    }while(condition);

    return str;
}