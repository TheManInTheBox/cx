/* Cx library to perform Input/Output operations
 *
 * file     : cxstdio
 * author   : <aaron.hebert@gmail.com>
 * desc     : Input/Output operations
 *
 * This library uses what are called streams to operate with physical devices
 * such as keyboards, printers, terminals or with any other type of files
 * supported by the system. Streams are an abstraction to interact with these
 * in an uniform way; All streams have similar properties independently of the
 * individual characteristics of the physical media they are associated with.
 *
 * Streams are handled in the (C++) cstdio library as pointers to FILE objects.
 * A pointer to a FILE object uniquely identifies a stream, and is used as a
 * parameter in the operations involving that stream.
 *
 * There also exist three standard streams: stdin, stdout and
 * stderr, which are automatically created and opened for all programs
 * using the library.
 */

// TODO: need #define directive to omit including headers twice

/* putchar - Write character to stdout
 * Writes a character to the standard output (stdout).
 *
 * It is equivalent to calling putc with stdout as second argument.
 *
 * @param c : character to write to stdout.
 * @return ASCII code of character written. */

char putchar(char c){
    return stdout.putc(c);
}

/* puts - Write string to stdout
 * Writes the copied Cx string 'str' to the standard output (stdout)
 *
 * The function calls 'putchar' from the address specified (str[]) until it reaches
 * the terminating null character ('\0'). This terminating null-character is not
 * copied to the stream.
 *
 * @param str : copied char array to write to stdout.
 * @return the string length of str. */

int puts(char *str){
    return stdout.puts(str + '\n');
}

/* getc - Get character from stdin
 * Returns the character read from stdin. The character is returned regardless
 * of '\n' or enter key being pressed.
 *
 * @return character read from stdin. */

int getc(){
    return stdin.getc;
}

/* getchar - Get character from stdin
 * Returns the next character from the standard input (stdin) and echo's the
 * character to the screen.
 *
 * It is equivalent to calling getc, but getc will not echo the character.
 *
 * @return character read from stdin. */

char getchar(){
    return getc();
}

/* gets - Get string from stdin
 * Reads characters from the standard input (stdin) and stores them as a Cx
 * string into str until a newline character or the end-of-file is reached.
 *
 * The newline character, if found, is not copied into str.
 *
 * A terminating null character is automatically appended after the characters
 * copied to str.
 *
 * @return string of characters read from stdin. */

char *gets(){
    char *str;
    char c;
	bool condition = false;

    do{
        c = getchar();
		condition = ((c != '\n') && (c != '\r'));

        if(condition)str += c;
        
    }while(condition);

    return str;
}