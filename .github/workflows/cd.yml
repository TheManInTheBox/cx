name: CD - Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Update version in project files
      run: |
        VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
        find . -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>$VERSION_NUMBER<\/Version>/g" {} \;
        find . -name "*.csproj" -exec sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION_NUMBER<\/AssemblyVersion>/g" {} \;
        find . -name "*.csproj" -exec sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION_NUMBER<\/FileVersion>/g" {} \;
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }}
    
    - name: Configure secrets for production build
      run: |
        # Update appsettings.json with production secrets
        sed -i 's/"ApiKey": "YOUR_API_KEY_HERE"/"ApiKey": "${{ secrets.AZURE_OPENAI_API_KEY }}"/g' src/CxLanguage.CLI/appsettings.json
        sed -i 's/"ConnectionString": "YOUR_CONNECTION_STRING_HERE"/"ConnectionString": "${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}"/g' src/CxLanguage.CLI/appsettings.json
        echo "âœ… Production secrets configured"
    
    - name: Run tests
      run: dotnet test --no-build --configuration ${{ env.CONFIGURATION }} --verbosity normal
    
    - name: Pack NuGet packages
      run: |
        dotnet pack --no-build --configuration ${{ env.CONFIGURATION }} --output ./packages
    
    - name: Publish CLI tool
      run: |
        # Publish for multiple platforms
        dotnet publish src/CxLanguage.CLI/CxLanguage.CLI.csproj -c ${{ env.CONFIGURATION }} -r win-x64 --self-contained -o ./publish/win-x64
        dotnet publish src/CxLanguage.CLI/CxLanguage.CLI.csproj -c ${{ env.CONFIGURATION }} -r linux-x64 --self-contained -o ./publish/linux-x64
        dotnet publish src/CxLanguage.CLI/CxLanguage.CLI.csproj -c ${{ env.CONFIGURATION }} -r osx-x64 --self-contained -o ./publish/osx-x64
        dotnet publish src/CxLanguage.CLI/CxLanguage.CLI.csproj -c ${{ env.CONFIGURATION }} -r osx-arm64 --self-contained -o ./publish/osx-arm64
    
    - name: Create release archives
      run: |
        cd publish
        tar -czf ../cx-${{ steps.version.outputs.version }}-win-x64.tar.gz -C win-x64 .
        tar -czf ../cx-${{ steps.version.outputs.version }}-linux-x64.tar.gz -C linux-x64 .
        tar -czf ../cx-${{ steps.version.outputs.version }}-osx-x64.tar.gz -C osx-x64 .
        tar -czf ../cx-${{ steps.version.outputs.version }}-osx-arm64.tar.gz -C osx-arm64 .
        cd ..
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag before this one
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "First release - including all commits"
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          echo "Changes since $PREVIOUS_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..HEAD)
        fi
        
        # Create changelog file
        echo "# CX Language ${{ steps.version.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## What's New" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ðŸš€ Phase 4 Complete: AI Integration with Revolutionary Runtime Function Injection" >> CHANGELOG.md
        echo "- **BREAKTHROUGH**: World's first runtime function injection - AI generates, compiles, and executes functions at runtime" >> CHANGELOG.md
        echo "- Full Azure OpenAI service integration with all 7 AI functions (\`task\`, \`reason\`, \`synthesize\`, \`process\`, \`generate\`, \`embed\`, \`adapt\`)" >> CHANGELOG.md
        echo "- Runtime function injection with mathematical proof: add(7,3)=10, square(6)=36" >> CHANGELOG.md
        echo "- Persistent function registry - generated functions remain available throughout execution" >> CHANGELOG.md
        echo "- Dynamic code adaptation - programs can modify themselves at runtime" >> CHANGELOG.md
        echo "- Enterprise-grade monitoring with Application Insights integration" >> CHANGELOG.md
        echo "- Comprehensive error handling and recovery mechanisms" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ðŸ”§ Language Features" >> CHANGELOG.md
        echo "- Phase 1-2: Variables, functions, control flow âœ…" >> CHANGELOG.md
        echo "- Phase 3: Advanced features (exception handling, object literals) âœ…" >> CHANGELOG.md
        echo "- Phase 4: AI integration with Azure OpenAI âœ…" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ðŸ“‹ Technical Improvements" >> CHANGELOG.md
        echo "- Two-pass compilation system" >> CHANGELOG.md
        echo "- IL code generation with runtime null checks" >> CHANGELOG.md
        echo "- Service architecture with dependency injection" >> CHANGELOG.md
        echo "- Comprehensive test suite" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Changes" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Downloads" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### CLI Tool" >> CHANGELOG.md
        echo "- Windows x64: \`cx-${{ steps.version.outputs.version }}-win-x64.tar.gz\`" >> CHANGELOG.md
        echo "- Linux x64: \`cx-${{ steps.version.outputs.version }}-linux-x64.tar.gz\`" >> CHANGELOG.md
        echo "- macOS x64: \`cx-${{ steps.version.outputs.version }}-osx-x64.tar.gz\`" >> CHANGELOG.md
        echo "- macOS ARM64: \`cx-${{ steps.version.outputs.version }}-osx-arm64.tar.gz\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### NuGet Packages" >> CHANGELOG.md
        echo "- CxLanguage.Core" >> CHANGELOG.md
        echo "- CxLanguage.Compiler" >> CHANGELOG.md
        echo "- CxLanguage.Parser" >> CHANGELOG.md
        echo "- CxLanguage.Azure" >> CHANGELOG.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: CX Language ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          cx-${{ steps.version.outputs.version }}-win-x64.tar.gz
          cx-${{ steps.version.outputs.version }}-linux-x64.tar.gz
          cx-${{ steps.version.outputs.version }}-osx-x64.tar.gz
          cx-${{ steps.version.outputs.version }}-osx-arm64.tar.gz
          packages/*.nupkg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to NuGet
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        dotnet nuget push packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    - name: Update documentation
      run: |
        echo "ðŸ“š Release ${{ steps.version.outputs.version }} completed successfully!"
        echo "ðŸŽ‰ CX Language Phase 4 AI Integration is now available"
        echo "ðŸš€ Ready for Phase 5 autonomous agentic features"
