std::pair<const char *, TTokenCode> map_data[] = {
    std::make_pair("if", tcIf),
    std::make_pair("return", tcReturn),
    std::make_pair("continue", tcContinue),
    std::make_pair("friend", tcFriend),
    std::make_pair("true", tcTrue),
    std::make_pair("goto", tcGoto),
    std::make_pair("try", tcTry),
    std::make_pair("delete", tcDelete),
    std::make_pair("short", tcShort),
    std::make_pair("typeid", tcTypeId),
    std::make_pair("bool", tcBool),
    std::make_pair("do", tcDo),
    std::make_pair("int", tcInt),
    std::make_pair("signed", tcSigned),
    std::make_pair("typename", tcTypeName),
    std::make_pair("break", tcBreak),
    std::make_pair("double", tcDouble),
    std::make_pair("long", tcLong),
    std::make_pair("sizeof", tcSizeOf),
    std::make_pair("union", tcUnion),
    std::make_pair("case", tcCase),
    std::make_pair("static", tcStatic),
    std::make_pair("unsigned", tcUnsigned),
    std::make_pair("catch", tcCatch),
    std::make_pair("else", tcElse),
    std::make_pair("namespace", tcNameSpace),
    std::make_pair("using", tcUsing),
    std::make_pair("char", tcChar),
    std::make_pair("enum", tcEnum),
    std::make_pair("new", tcNew),
    std::make_pair("virtual", tcVirtual),
    std::make_pair("char16_t", tcChar16_t),
    std::make_pair("explicit", tcExplicit),
    std::make_pair("noexcept", tcNoExcept),
    std::make_pair("char32_t", tcChar32_t),
    std::make_pair("export", tcExport),
    std::make_pair("nullptr", tcNullptr),
    std::make_pair("switch", tcSwitch),
    std::make_pair("struct", tcStruct),
    std::make_pair("void", tcVoid),
    std::make_pair("class", tcClass),
    std::make_pair("extern", tcExtern),
    std::make_pair("operator", tcOperator),
    std::make_pair("template", tcTemplate),
    std::make_pair("const", tcConst),
    std::make_pair("false", tcFalse),
    std::make_pair("private", tcPrivate),
    std::make_pair("this", tcThis),
    std::make_pair("while", tcWhile),
    std::make_pair("float", tcFloat),
    std::make_pair("protected", tcProtected),
    std::make_pair("thread_local", tcThreadLocal),
    std::make_pair("for", tcFor),
    std::make_pair("public", tcPublic),
    std::make_pair("throw", tcThrow),
    std::make_pair("default", tcDefault),
    std::make_pair("typedef", tcTypeDef),
    std::make_pair("mutable", tcMutable),
};


#include <iostream>
#include "error.h"
#include "buffer.h"
#include "parser.h"

//--------------------------------------------------------------
//  main
//--------------------------------------------------------------

int main(int argc, char *argv[])
{
    //--Check the command line arguments.
    if (argc != 2) {
	cerr << "Usage: token <source file>" << endl;
	AbortTranslation(abortInvalidCommandLineArgs);
    }

    listFlag = false;
    errorArrowFlag = false;

    //--Create the parser for the source file,
    //--and then parse the file.
    TParser parser(new TSourceBuffer(argv[1]));
    parser.Parse();

    return 0;
}
//endfig

