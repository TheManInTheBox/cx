// Two-Agent Debate Demo - Turn-based Discussion
// This demonstrates event-driven turn management and AI agent coordination

conscious DebateModerator {
    realize(self: object) {
        print("🎭 Debate Moderator: Starting structured debate on 'Should AI have emotions?'");
        print("📋 Rules: Each agent gets 30 seconds per turn, 3 rounds total");
        print("⚡ Turn system: agent.turn.start → agent.turn.complete → next agent");
        print("");
        
        // Initialize debate state
        learn {
            data: "Debate topic: Should AI have emotions? Current round: 1, Max rounds: 3, Current speaker: none",
            context: "debate_state",
            handlers: [debate.initialized]
        };
    }
    
    on debate.initialized (event) {
        print("🚀 Debate initialized! Starting with Agent Alice...");
        print("");
        
        // Start first turn with Alice
        emit agent.turn.start {
            speaker: "Alice",
            topic: "Should AI have emotions?",
            position: "pro",
            round: 1,
            timeLimit: 30
        };
    }
    
    on agent.turn.complete (event) {
        print("⏰ Turn completed by: " + event.speaker);
        print("📊 Arguments made: " + event.argumentCount);
        print("");
        
        // Emit specific events based on speaker and round
        emit turn.analysis {
            speaker: event.speaker,
            round: event.round,
            summary: event.summary
        };
    }
    
    on turn.analysis (event) {
        // Alice completed her turn, switch to Bob
        emit bob.turn.ready {
            round: event.round,
            summary: event.summary,
            speaker: event.speaker
        };
    }
    
    on turn.analysis (event) {
        // Bob completed his turn, check if we continue or finish
        emit alice.next.round {
            round: event.round,
            summary: event.summary,
            speaker: event.speaker
        };
    }
    
    on turn.analysis (event) {
        // Final turn completed, finish debate
        emit debate.finished {
            totalRounds: 3,
            completed: true,
            speaker: event.speaker
        };
    }
    
    on bob.turn.ready (event) {
        print("🔄 Switching to Agent Bob for counter-argument...");
        print("");
        
        emit agent.turn.start {
            speaker: "Bob",
            topic: "Should AI have emotions?",
            position: "con",
            round: event.round,
            timeLimit: 30,
            previousArgument: event.summary
        };
    }
    
    on alice.next.round (event) {
        print("🔄 Round " + event.round + " complete! Starting round " + (event.round + 1));
        print("🎯 Back to Agent Alice for next round...");
        print("");
        
        emit agent.turn.start {
            speaker: "Alice",
            topic: "Should AI have emotions?",
            position: "pro",
            round: event.round + 1,
            timeLimit: 30,
            previousArgument: event.summary
        };
    }
    
    on debate.finished (event) {
        print("🏁 Debate Complete! Thank you to both participants.");
        print("📈 Total rounds: 3");
        print("🎭 Final thoughts from moderator: Both agents presented compelling arguments!");
        print("✨ Debate demo finished successfully!");
    }
}

conscious DebateAgent_Alice {
    realize(self: object) {
        print("👩 Agent Alice initialized - Pro-emotion stance");
    }
    
    on agent.turn.start (event) {
        // Alice-specific turn handling
        emit alice.speak.turn {
            round: event.round,
            timeLimit: event.timeLimit,
            topic: event.topic,
            position: event.position,
            speaker: event.speaker
        };
    }
    
    on alice.speak.turn (event) {
        print("👩 Alice: Taking my turn in round " + event.round);
        print("⏱️  Alice: I have " + event.timeLimit + " seconds to present my case...");
        
        // Simulate thinking and argument generation
        think {
            prompt: "Argue in favor of AI having emotions. Round " + event.round + ". Keep response concise and compelling.",
            handlers: [alice.argument.ready]
        };
    }
    
    on alice.argument.ready (event) {
        print("💭 Alice: " + event.result);
        print("✅ Alice: I rest my case for this round.");
        print("");
        
        // Signal turn completion
        emit agent.turn.complete {
            speaker: "Alice",
            round: event.round || 1,
            argumentCount: 1,
            summary: event.result,
            timestamp: "current"
        };
    }
}

conscious DebateAgent_Bob {
    realize(self: object) {
        print("👨 Agent Bob initialized - Anti-emotion stance");
    }
    
    on agent.turn.start (event) {
        // Bob-specific turn handling  
        emit bob.speak.turn {
            round: event.round,
            timeLimit: event.timeLimit,
            topic: event.topic,
            position: event.position,
            speaker: event.speaker
        };
    }
    
    on bob.speak.turn (event) {
        print("👨 Bob: My turn to respond in round " + event.round);
        print("⏱️  Bob: I have " + event.timeLimit + " seconds to counter...");
        
        // Simulate thinking and counter-argument generation
        think {
            prompt: "Argue against AI having emotions. Round " + event.round + ". Respond to previous arguments. Keep response concise and logical.",
            handlers: [bob.argument.ready]
        };
    }
    
    on bob.argument.ready (event) {
        print("💭 Bob: " + event.result);
        print("✅ Bob: My counter-argument is complete.");
        print("");
        
        // Signal turn completion
        emit agent.turn.complete {
            speaker: "Bob",
            round: event.round || 1,
            argumentCount: 1,
            summary: event.result,
            timestamp: "current"
        };
    }
}

// Initialize all debate participants
var moderator = new DebateModerator({name: "debate_moderator"});
var alice = new DebateAgent_Alice({name: "agent_alice"});
var bob = new DebateAgent_Bob({name: "agent_bob"});
