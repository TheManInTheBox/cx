// ========================================================================
// Cx - Scripting Language for Agentic AI Runtime
// Advanced AI Features Demo: Intelligent, Autonomous, Quality-First Workflows
// ========================================================================

print("=== Cx Advanced Agentic AI Demo ===")
print("Quality-first multi-modal processing & intelligent code synthesis")

// Example 1: Intelligent Real-time Code Adaptation with Quality Metrics
print("--- Intelligent Code Adaptation with Quality Assurance ---")

function fibonacci(n) {
    if (n <= 1) {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

// Measure performance
var startTime = now()
var result = fibonacci(35)
var duration = now() - startTime

print("Original fibonacci(35) = " + result + " (took " + duration + "ms)")

// AI adapts the code path for better performance
adapt("fibonacci", {
    performance_data: { duration: duration, input_size: 35 },
    optimization_target: "speed",
    constraints: ["memory_efficient", "recursive_to_iterative"]
})

// Test adapted version
startTime = now()
result = fibonacci(35)
var newDuration = now() - startTime

print("Adapted fibonacci(35) = " + result + " (took " + newDuration + "ms)")
print("Performance improvement: " + ((duration - newDuration) / duration * 100) + "%")

// Example 2: Dynamic API Generation
print("--- Dynamic API Generation ---")

// AI generates API endpoints based on requirements
var apiSpec = synthesize(
    "Create a REST API for user management with CRUD operations",
    language: "cx",
    framework: "web",
    features: ["authentication", "validation", "logging"]
)

if (apiSpec.isSuccess) {
    print("✓ Generated API with " + apiSpec.endpoints.length + " endpoints:")
    for (var endpoint in apiSpec.endpoints) {
        print("  " + endpoint.method + " " + endpoint.path + " - " + endpoint.description)
    }
}

// Example 3: Intelligent Data Processing Pipeline
print("--- Intelligent Data Processing ---")

var dataProcessor = task(
    "Create a data processing pipeline for customer analytics",
    requirements: {
        input_format: "csv",
        transformations: ["clean", "normalize", "aggregate"],
        output_format: "json",
        performance: "real_time"
    }
)

if (dataProcessor.isSuccess) {
    print("✓ Data processing pipeline created")
    print("Pipeline steps:")
    for (var step in dataProcessor.plan.steps) {
        print("  " + step.order + ". " + step.description)
    }
    
    // Execute the pipeline
    var sampleData = loadSampleData()
    var processedData = dataProcessor.execute(sampleData)
    print("Processed " + processedData.recordCount + " records")
}

// Example 4: AI-Powered Testing
print("--- AI-Powered Testing ---")

function calculateTax(income, deductions) {
    var taxableIncome = income - deductions
    if (taxableIncome <= 0) {
        return 0
    }
    
    var tax = 0
    if (taxableIncome > 50000) {
        tax += (taxableIncome - 50000) * 0.25
        taxableIncome = 50000
    }
    if (taxableIncome > 20000) {
        tax += (taxableIncome - 20000) * 0.15
        taxableIncome = 20000
    }
    tax += taxableIncome * 0.10
    
    return tax
}

// AI generates comprehensive test cases
var testSuite = synthesize(
    "Generate comprehensive test cases for the calculateTax function",
    target_function: "calculateTax",
    test_types: ["boundary", "edge_cases", "negative", "stress"],
    coverage_target: 100
)

if (testSuite.isSuccess) {
    print("✓ Generated " + testSuite.testCases.length + " test cases")
    
    var passedTests = 0
    var failedTests = 0
    
    for (var testCase in testSuite.testCases) {
        var actualResult = calculateTax(testCase.income, testCase.deductions)
        var expectedResult = testCase.expectedResult
        
        if (actualResult == expectedResult) {
            passedTests++
        } else {
            failedTests++
            print("✗ Test failed: income=" + testCase.income + 
                  ", deductions=" + testCase.deductions + 
                  ", expected=" + expectedResult + 
                  ", actual=" + actualResult)
        }
    }
    
    print("Test results: " + passedTests + " passed, " + failedTests + " failed")
}

// Example 5: Natural Language to Code
print("--- Natural Language to Code ---")

var nlToCode = synthesize(
    "Write a function that finds the most frequent word in a text, ignoring case and punctuation",
    style: "functional",
    optimization: "readability"
)

if (nlToCode.isSuccess) {
    print("✓ Generated function from natural language:")
    print(nlToCode.code)
    
    // Test the generated function
    var testText = "The quick brown fox jumps over the lazy dog. The dog was lazy."
    var mostFrequent = nlToCode.invoke([testText])
    print("Most frequent word in test text: '" + mostFrequent + "'")
}

// Example 6: Intelligent Error Handling
print("--- Intelligent Error Handling ---")

function riskyOperation(data) {
    // Simulate an operation that might fail
    if (data == null || data.length == 0) {
        throw new Error("Invalid data provided")
    }
    
    // AI can predict potential failure points and add resilience
    adapt("riskyOperation", {
        error_history: ["NullReferenceException", "ArgumentException"],
        resilience_strategy: "retry_with_backoff",
        fallback_behavior: "return_default_value"
    })
    
    return data.toUpperCase()
}

// Test with various inputs
var testInputs = ["hello", "", null, "world"]

for (var input in testInputs) {
    try {
        var result = riskyOperation(input)
        print("✓ riskyOperation('" + input + "') = '" + result + "'")
    } catch (error) {
        print("✗ riskyOperation('" + input + "') failed: " + error.message)
    }
}

print("=== Advanced AI Features Demo Complete ===")

// Helper functions
function now() {
    // Returns current timestamp in milliseconds
    return Date.now()
}

function loadSampleData() {
    return {
        customers: [
            { id: 1, name: "Alice", purchases: [100, 250, 80] },
            { id: 2, name: "Bob", purchases: [150, 300] },
            { id: 3, name: "Charlie", purchases: [200, 100, 350, 120] }
        ]
    }
}
