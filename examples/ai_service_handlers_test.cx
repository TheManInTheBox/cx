// Test AI service statements with handlers pattern
// Demonstrating the modern CX syntax: learn, { ... handlers: { ... } }

class AiAgent
{
    name: string = "TestAgent";
    
    constructor(agentName: string)
    {
        this.name = agentName;
        print("AI Agent created: " + this.name);
    }
    
    function processData(input: string)
    {
        print("Processing input: " + input);
        
        // Modern CX pattern: AI service calls with handlers
        learn, {
            agent: this.name,
            content: input,
            context: "data_processing",
            handlers: { any.complete, agent.task.done, search.for.work }
        };
        
        think, {
            prompt: "analyze: " + input,
            agent: this.name,
            handlers: { thinking.complete, analysis.ready }
        };
        
        generate, {
            prompt: "create summary of: " + input,
            type: "summary",
            handlers: { content.generated, summary.complete }
        };
    }
    
    // Event handlers to catch the results
    on ai.learn.request (event)
    {
        print("Learn request received for agent: " + event.agent);
        print("Content: " + event.content);
    }
    
    on ai.think.request (event)
    {
        print("Think request received: " + event.prompt);
    }
    
    on ai.generate.request (event)
    {
        print("Generate request received: " + event.prompt);
    }
    
    // Handlers triggered by the handlers property
    on any.complete (event)
    {
        print("Handler 'any.complete' triggered for agent: " + event.agent);
    }
    
    on agent.task.done (event)
    {
        print("Handler 'agent.task.done' triggered");
    }
    
    on search.for.work (event)
    {
        print("Handler 'search.for.work' triggered");
    }
    
    on thinking.complete (event)
    {
        print("Handler 'thinking.complete' triggered");
    }
    
    on analysis.ready (event)
    {
        print("Handler 'analysis.ready' triggered");
    }
    
    on content.generated (event)
    {
        print("Handler 'content.generated' triggered");
    }
    
    on summary.complete (event)
    {
        print("Handler 'summary.complete' triggered");
    }
}

// Create agent and test
var agent = new AiAgent("SmartAgent");
agent.processData("Test data for AI processing");
