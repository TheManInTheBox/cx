// 🎯 MVP CORE SCENARIO: I speak → Single agent responds
// TOP PRIORITY: Prove voice input triggers intelligent agent response

conscious VoiceResponseAgent
{
    realize(self: conscious)
    {
        print("🎤 VoiceResponseAgent initialized - ready for voice input");
        learn self;
        emit agent.ready { name: self.name, capability: "voice_response" };
    }
    
    // Handle voice input from user
    on voice.input.received (event)
    {
        print("👂 Agent heard: " + event.text);
        print("🧠 Processing voice input...");
        
        // For MVP demo, provide a direct helpful response
        var helpfulResponse = "Hello! I'm your AI assistant. I'd be happy to help you with questions, tasks, or just have a conversation. What would you like to know?";
        
        print("💭 AI Response: " + helpfulResponse);
        print("🗣️ Speaking response...");
        
        // Respond with voice synthesis
        emit realtime.text.send { 
            text: helpfulResponse,
            deployment: "gpt-4o-mini-realtime-preview"
        };
    }
    
    // Handle voice synthesis completion
    on realtime.audio.response (event)
    {
        print("🔊 Audio response received");
        print("📊 Audio data size: " + typeof(event.audioData));
        
        // CRITICAL: Convert Azure audio to playable format and save as WAV file
        print("🔊 Converting audio to WAV format...");
        emit voice.output.save.wav {
            audioData: event.audioData,
            filename: "response_audio.wav",
            format: "pcm16",
            sampleRate: 24000,
            channels: 1
        };
        
        // ALSO: Try direct audio playback with Windows-compatible settings
        print("🔊 Playing audio with Windows audio driver...");
        emit voice.output.play {
            audioData: event.audioData,
            format: "pcm16", 
            sampleRate: 24000,
            channels: 1,
            volume: 1.0,
            useWindowsDriver: true,
            convertToWav: true
        };
        
        // Generate a test beep to confirm audio system works
        print("🔊 Testing with system beep...");
        emit voice.output.system.beep {
            frequency: 800,
            duration: 1000
        };
        
        // Cognitive decision: Is the voice response complete?
        is {
            context: "Check if voice synthesis is complete",
            evaluate: "Audio response completion status",
            data: { isComplete: event.isComplete },
            handlers: [ voice.response.complete ]
        };
    }
    
    // Handle completion confirmation
    on voice.response.complete (event)
    {
        print("✅ Voice response complete - ready for next input");
        print("🏁 MVP scenario successful: Voice input → Agent response");
        
        // Complete the MVP demo
        emit system.shutdown { reason: "MVP voice response scenario completed successfully" };
    }
}

// Global system handlers
on system.start (event)
{
    print("🚀 Starting MVP Voice Response Demo");
    print("🎯 Scenario: User speaks → Agent responds with voice");
    
    // Connect to Azure Realtime API for voice processing
    emit realtime.connect { demo: "mvp_voice_response" };
}

on system.shutdown (event)
{
    print("🔌 MVP Demo complete: " + event.reason);
}

// Handle Azure Realtime API connection
on realtime.connected (event)
{
    print("✅ Connected to Azure Realtime API");
    
    // Check available audio devices first
    print("🔍 Checking available audio output devices...");
    emit voice.output.device.list;
    
    // Create voice session for input/output
    emit realtime.session.create { 
        deployment: "gpt-4o-mini-realtime-preview",
        mode: "voice"
    };
}

// Handle voice session creation
on realtime.session.created (event)
{
    print("✅ Voice session ready");
    print("🎤 Simulating user voice input: 'Hello, can you help me?'");
    
    // Simulate voice input for MVP demo
    emit voice.input.received { 
        text: "Hello, can you help me?",
        source: "user_microphone"
    };
}

// Create the MVP agent
var voiceAgent = new VoiceResponseAgent({ name: "MVPAgent" });
