// Debug Wildcard Matching Test
// Test if any.critical pattern matches system.critical and alerts.critical

print("🔍 DEBUG: Testing Wildcard Event Matching");
print("==========================================");

class TestMonitor
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
    }
    
    // This should match ALL .critical events from any namespace
    on any.critical (payload)
    {
        print("🚨 " + this.name + " received wildcard critical event!");
        print("   Event should be from ANY namespace (.critical pattern)");
        print("   Payload: " + payload);
    }
    
    // Specific system events for comparison
    on system.critical (payload)
    {
        print("🖥️ " + this.name + " received system.critical specifically");
    }
}

try
{
    var monitor = new TestMonitor("WildcardTester");
    
    print("✅ TestMonitor created with handlers:");
    print("   - any.critical (should match all *.critical events)");
    print("   - system.critical (specific handler)");
    print("");
    
    // Test different namespace critical events
    print("📡 Emitting system.critical...");
    emit system.critical, { source: "system", severity: 9, message: "CPU overload" };
    
    print("📡 Emitting alerts.critical...");
    emit alerts.critical, { source: "alerts", severity: 10, message: "Disk full" };
    
    print("📡 Emitting dev.critical...");
    emit dev.critical, { source: "dev", severity: 8, message: "Build failed" };
    
    print("");
    print("🎯 EXPECTED BEHAVIOR:");
    print("=====================");
    print("✅ monitor.any.critical should receive ALL three events");
    print("✅ monitor.system.critical should receive only system.critical");
    print("✅ Wildcard pattern 'any.critical' should match:");
    print("   - system.critical ✓");
    print("   - alerts.critical ✓"); 
    print("   - dev.critical ✓");
}
catch (error)
{
    print("❌ ERROR: " + error);
}
