// Test AI functions returning native CX objects from JSON responses
// This demonstrates how AI functions can return structured data

var message = "Hello, CX AI with JSON objects!";
print(message);

// Test task function with JSON response
print("=== Testing AI Functions with JSON Object Returns ===");

// AI functions can now return native CX objects when the response contains JSON
var aiResult = task("Generate a JSON response with user information: {\"name\": \"Alice\", \"age\": 30, \"skills\": [\"JavaScript\", \"Python\", \"CX\"]}");
print("AI Result Type: " + typeof(aiResult));
print("AI Result: " + aiResult);

// If the result is a CX object, we can access its properties
if (typeof(aiResult) == "object") 
{
    print("Result is a native CX object!");
    // Properties would be accessible via aiResult.name, aiResult.age, etc.
}

// Test reason function with JSON response
var reasonResult = reason("Analyze this data structure: {\"type\": \"analysis\", \"confidence\": 0.95, \"findings\": [\"pattern_detected\", \"anomaly_found\"]}");
print("Reason Result: " + reasonResult);

// Test generate function with JSON response
var generateResult = generate("Create a JSON response for a product: {\"id\": 1, \"name\": \"Widget\", \"price\": 29.99, \"inStock\": true}");
print("Generate Result: " + generateResult);

// Test synthesize function with JSON response
var synthesizeResult = synthesize("Generate code structure: {\"function\": \"calculateTotal\", \"parameters\": [\"price\", \"quantity\"], \"returnType\": \"number\"}");
print("Synthesize Result: " + synthesizeResult);

// Test process function with JSON response
var processResult = process("customer_data.json", "Extract key metrics: {\"totalCustomers\": 1250, \"avgOrderValue\": 75.50, \"churnRate\": 0.03}");
print("Process Result: " + processResult);

// Test embed function with JSON response
var embedResult = embed("This text will be embedded: {\"embedding\": [0.1, 0.2, 0.3, 0.4], \"dimension\": 4}");
print("Embed Result: " + embedResult);

// Test adapt function with JSON response
var adaptResult = adapt("optimize this code", "Return optimization suggestions: {\"suggestions\": [\"use_caching\", \"reduce_loops\"], \"improvement\": \"25%\"}");
print("Adapt Result: " + adaptResult);

print("=== AI Functions with JSON Object Support Complete ===");
