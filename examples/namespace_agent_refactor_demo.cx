// CX Language - Namespace Event Scoping Applied to Agent System
// Shows how to refactor global event handlers to use namespace-based scoping


class SmartAgent
{
    name: string;
    role: string;
    agentId: string;
    
    constructor(agentName, agentRole)
    {
        this.name = agentName;
        this.role = agentRole;
        this.agentId = "";
        print("🤖 Agent " + this.name + " (" + this.role + ") created");
    }
    
    function register()
    {
        // Register with namespace system - no complex configuration needed!
        this.agentId = RegisterNamespacedAgent(this.name, null, this.role, null, this);
        print("✅ " + this.name + " registered with namespace ID: " + this.agentId);
        return this.agentId;
    }
    
    function handleTask(taskDesc)
    {
        print("📋 " + this.name + " handling: " + taskDesc);
        
        var result = textGen.GenerateAsync(
            "As " + this.name + " (" + this.role + "), handle: " + taskDesc,
            { temperature: 0.7, maxTokens: 100 }
        );
        
        print("✅ " + this.name + " result: " + result);
        
        // Emit completion using namespace scoping
        EmitNamespacedEvent("role." + this.role + ".taskCompleted", {
            completedBy: this.name,
            originalTask: taskDesc,
            result: result,
            timestamp: "now"
        });
        
        return result;
    }
}

// ✅ NAMESPACE-BASED EVENT HANDLERS - Event names define the scope!
// No routing logic needed - the event name IS the routing

// Developer-specific task requests
on role.developer.taskRequest (payload)
{
    print("🔧 DEVELOPER TASK REQUEST");
    print("   Description: " + payload.description);
    print("   Priority: " + payload.priority);
    print("   Scope: Automatically routed to developers only");
}

// Designer-specific task requests  
on role.designer.taskRequest (payload)
{
    print("🎨 DESIGNER TASK REQUEST");
    print("   Description: " + payload.description);
    print("   Priority: " + payload.priority);
    print("   Scope: Automatically routed to designers only");
}

// Any role task completion (using wildcard)
on role.any.taskCompleted (payload)
{
    print("✅ TASK COMPLETED");
    print("   Completed by: " + payload.completedBy);
    print("   Result: " + payload.result);
    print("   Scope: All roles see task completions");
}

// Global status requests (all agents)
on global.statusRequest (payload)
{
    print("📊 GLOBAL STATUS REQUEST");
    print("   Requested by: " + payload.requestedBy);
    print("   Scope: All agents respond to global status");
}

// Team-level urgent alerts
on team.any.urgent (payload)
{
    print("🚨 TEAM URGENT ALERT");
    print("   Alert: " + payload.message);
    print("   Scope: All team members affected");
}

print("🚀 NAMESPACE EVENT SCOPING - AGENT SYSTEM");
print("==========================================");
print("");

print("📋 PHASE 1: Agent Setup");
print("------------------------");

// Create agents
var developer = new SmartAgent("Alice", "developer");
var designer = new SmartAgent("Bob", "designer");

// Register with namespace system
developer.register();
designer.register();

print("");
print("📋 PHASE 2: Namespace Event Broadcasting");
print("-----------------------------------------");

print("🔸 Developer Task (role.developer.any):");
EmitNamespacedEvent("role.developer.task.request", {
    description: "Fix login authentication bug",
    priority: "high",
    assignedBy: "ProjectManager"
});

print("");
print("🔸 Designer Task (role.designer.any):");
EmitNamespacedEvent("role.designer.task.request", {
    description: "Create wireframes for user dashboard",
    priority: "medium",
    deadline: "end-of-week"
});

print("");
print("🔸 Global Status Request (global.any):");
EmitNamespacedEvent("global.status.request", {
    requestedBy: "admin",
    timestamp: "now",
    urgency: "routine"
});

print("");
print("🔸 Team Urgent Alert (team.any.urgent):");
EmitNamespacedEvent("team.development.urgent", {
    message: "Production server experiencing high load",
    actionRequired: true,
    severity: "high"
});

print("");
print("📋 PHASE 3: Task Execution (triggers completions)");
print("--------------------------------------------------");

// Tasks will emit completion events with namespace scoping
developer.handleTask("Fix login authentication bug");
designer.handleTask("Create wireframes for user dashboard");

print("");
print("📋 PHASE 4: Namespace Statistics");
print("---------------------------------");

var stats = GetNamespacedBusStatistics();
print("📊 Namespace Event Statistics:");
print("   Total Agents: " + stats.TotalAgents);
print("   Event Patterns: " + stats.TotalEventPatterns);

print("");
print("✅ NAMESPACE EVENT SCOPING DEMONSTRATION COMPLETE!");
print("");
print("🎯 NAMESPACE SCOPING BENEFITS:");
print("   ✓ Event names define routing - no complex logic needed");
print("   ✓ role.developer.any automatically goes to developers");
print("   ✓ role.designer.any automatically goes to designers");
print("   ✓ global.any events reach all agents");
print("   ✓ team.name.any events reach team members");
print("   ✓ Wildcards work: role.any.task.completed");
print("");
print("🔄 COMPARED TO PREVIOUS APPROACH:");
print("   ❌ Before: Global handlers with complex if/else routing");
print("   ✅ After: Event names ARE the routing mechanism");
print("   ❌ Before: Manual agent discovery and method calls");
print("   ✅ After: Automatic namespace-based delivery");
print("   ❌ Before: Hard-coded role checking logic");
print("   ✅ After: Self-organizing event distribution");
