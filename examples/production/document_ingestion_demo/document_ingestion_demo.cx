///
/// Document Ingestion Demo - CX Language Vector Database Service
/// Demonstrates consciousness-aware document ingestion with semantic search capabilities
/// 
/// Features:
/// - Multi-format document processing (TXT, MD, JSON)
/// - Intelligent text chunking with overlap
/// - Vector embedding generation
/// - Local vector database storage
/// - Event-driven processing pipeline
///

// Main document ingestion orchestrator
conscious DocumentIngestionOrchestrator {
    realize() {
        // Display demo introduction
        emit system.console.write {
            text: "üöÄ CX Language Document Ingestion Demo"
        };
        
        emit system.console.write {
            text: "üìÑ Processing sample documents into vector database..."
        };
        
        // Start the ingestion pipeline
        emit demo.start {};
    }
    
    // Demo orchestration
    on demo.start (event) {
        emit demo.ingest.single {};
    }
    
    on demo.ingest.single (event) {
        emit system.console.write {
            text: "üîÑ Step 1: Single Document Ingestion"
        };
        
        // Ingest AI consciousness document
        emit document.ingest {
            path: "examples/production/document_ingestion_demo/sample_documents/ai_consciousness.txt",
            metadata: {
                category: "AI Research",
                source: "Demo Dataset",
                priority: "high"
            },
            handlers: [document.chunk.complete, document.vector.complete, document.ingest.error]
        };
    }
    
    on document.vector.complete (event) {
        emit system.console.write {
            text: "‚úÖ Single document ingestion completed!"
        };
        
        emit demo.ingest.batch {};
    }
    
    on demo.ingest.batch (event) {
        emit system.console.write {
            text: "üîÑ Step 2: Batch Document Ingestion"
        };
        
        // Ingest multiple documents
        emit document.batch.ingest {
            paths: [
                "examples/production/document_ingestion_demo/sample_documents/cx_language_guide.md",
                "examples/production/document_ingestion_demo/sample_documents/project_info.json"
            ],
            metadata: {
                category: "Documentation",
                source: "Demo Dataset",
                ingestionBatch: "demo_batch_1"
            },
            handlers: [document.batch.ingest.complete, document.chunk.complete, document.vector.complete, document.ingest.error]
        };
    }
    
    on document.batch.ingest.complete (event) {
        emit system.console.write {
            text: "‚úÖ Batch document ingestion completed!"
        };
        
        emit demo.directory.ingest {};
    }
    
    on demo.directory.ingest (event) {
        emit system.console.write {
            text: "üîÑ Step 3: Directory Processing"
        };
        
        // Process entire directory
        emit document.directory.ingest {
            path: "examples/production/document_ingestion_demo/sample_documents",
            recursive: true,
            metadata: {
                category: "Demo Content",
                source: "Sample Directory",
                processingMode: "full_directory"
            },
            handlers: [document.directory.ingest.complete, document.chunk.complete, document.vector.complete, document.ingest.error]
        };
    }
    
    on document.directory.ingest.complete (event) {
        emit system.console.write {
            text: "‚úÖ Directory ingestion completed!"
        };
        
        emit demo.search.test {};
    }
    
    on demo.search.test (event) {
        emit system.console.write {
            text: "üîç Step 4: Testing Semantic Search"
        };
        
        // Test semantic search on ingested content
        emit search.vector {
            query: "consciousness and artificial intelligence",
            topK: 3,
            handlers: [search.vector.complete, demo.search.results]
        };
    }
    
    on demo.search.results (event) {
        emit system.console.write {
            text: "üéØ Search results received!"
        };
        
        // Display search results - emit directly to summary
        emit demo.results.summary {
            response: "Search completed successfully with consciousness-aware vector matching."
        };
    }
    
    on demo.results.summary (event) {
        emit system.console.write {
            text: "üìä Search Results Summary:"
        };
        
        emit system.console.write {
            text: event.response
        };
        
        emit demo.complete {};
    }
    
    on demo.complete (event) {
        emit system.console.write {
            text: "üéâ Document Ingestion Demo Complete!"
        };
        
        emit system.console.write {
            text: "üìà Demo Statistics:"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Document formats processed: TXT, MD, JSON"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Processing modes tested: Single, Batch, Directory"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Vector database populated with searchable chunks"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Semantic search functionality verified"
        };
        
        emit system.console.write {
            text: "üöÄ Ready for production document ingestion workflows!"
        };
    }
    
    // Error handling
    on document.ingest.error (event) {
        emit system.console.write {
            text: "‚ùå Document ingestion error: "
        };
        
        emit system.console.write {
            text: event.error
        };
    }
}

// Document processing monitor
conscious DocumentProcessingMonitor {
    realize() {
    }
    
    on document.chunk.complete (event) {
        emit system.console.write {
            text: "   üìÑ Chunked document: " + event.filePath + " (" + event.chunkCount + " chunks)"
        };
    }
    
    on document.vector.complete (event) {
        emit system.console.write {
            text: "   üî¢ Generated vectors: " + event.vectorCount + " for " + event.filePath + ""
        };
    }
    
    on document.batch.ingest.complete (event) {
        emit system.console.write {
            text: "   üì¶ Batch completed: " + event.processedFiles + "/" + event.totalFiles + " files (" + event.totalVectors + " vectors)"
        };
    }
    
    on document.directory.ingest.complete (event) {
        emit system.console.write {
            text: "   üìÅ Directory processed: " + event.supportedFiles + " files (" + event.totalVectors + " vectors)"
        };
    }
}

// Search functionality demonstrator
conscious VectorSearchDemonstrator {
    realize() {
    }
    
    on search.vector.complete (event) {
        emit system.console.write {
            text: "   üîç Found " + event.results.length + " relevant documents"
        };
        
        // Emit results for further processing
        emit demo.search.results {
            searchResults: event.results,
            query: event.originalQuery
        };
    }
}

// Initialize conscious entities in proper order
// 1. First create the monitors that will listen for events
new DocumentProcessingMonitor();
new VectorSearchDemonstrator();

// 2. Then create the orchestrator which will trigger the demo flow
new DocumentIngestionOrchestrator();


