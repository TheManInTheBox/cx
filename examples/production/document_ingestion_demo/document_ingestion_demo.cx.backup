///
/// Document Ingestion Demo - CX Language Vector Database Service
/// Demonstrates consciousness-aware document ingestion with semantic search capabilities
/// 
/// Features:
/// - Multi-format document processing (TXT, MD, JSON)
/// - Intelligent text chunking with overlap
/// - Vector embedding generation
/// - Local vector database storage
/// - Event-driven processing pipeline
///

// Main document ingestion orchestrator
conscious DocumentIngestionOrchestrator {
    realize(self: conscious) {
        learn self;
        
        // Display demo introduction
        emit system.console.write {
            text: "üöÄ CX Language Document Ingestion Demo\n"
        };
        
        emit system.console.write {
            text: "üìÑ Processing sample documents into vector database...\n"
        };
        
        // Start the ingestion pipeline
        emit demo.start {};
    }
    
    // Demo orchestration
    on demo.start (event) {
        emit demo.ingest.single {};
    }
    
    on demo.ingest.single (event) {
        emit system.console.write {
            text: "\nüîÑ Step 1: Single Document Ingestion\n"
        };
        
        // Ingest AI consciousness document
        emit document.ingest {
            path: "examples/production/document_ingestion_demo/sample_documents/ai_consciousness.txt"
            metadata: {
                category: "AI Research"
                source: "Demo Dataset"
                priority: "high"
            }
        };
    }
    
    on document.vector.complete (event) {
        emit system.console.write {
            text: "‚úÖ Single document ingestion completed!\n"
        };
        
        emit demo.ingest.batch {};
    }
    
    on demo.ingest.batch (event) {
        emit system.console.write {
            text: "\nüîÑ Step 2: Batch Document Ingestion\n"
        };
        
        // Ingest multiple documents
        emit document.batch.ingest {
            paths: [
                "examples/production/document_ingestion_demo/sample_documents/cx_language_guide.md",
                "examples/production/document_ingestion_demo/sample_documents/project_info.json"
            ]
            metadata: {
                category: "Documentation"
                source: "Demo Dataset"
                ingestionBatch: "demo_batch_1"
            }
        };
    }
    
    when document.batch.ingest.complete {
        emit system.console.write {
            text: "‚úÖ Batch document ingestion completed!\n"
        };
        
        emit demo.directory.ingest {};
    }
    
    when demo.directory.ingest {
        emit system.console.write {
            text: "\nüîÑ Step 3: Directory Processing\n"
        };
        
        // Process entire directory
        emit document.directory.ingest {
            path: "examples/production/document_ingestion_demo/sample_documents"
            recursive: true
            metadata: {
                category: "Demo Content"
                source: "Sample Directory"
                processingMode: "full_directory"
            }
        };
    }
    
    when document.directory.ingest.complete {
        emit system.console.write {
            text: "‚úÖ Directory ingestion completed!\n"
        };
        
        emit demo.search.test {};
    }
    
    when demo.search.test {
        emit system.console.write {
            text: "\nüîç Step 4: Testing Semantic Search\n"
        };
        
        // Test semantic search on ingested content
        emit search.vector {
            query: "consciousness and artificial intelligence"
            topK: 3
            handlers: [demo.search.results]
        };
    }
    
    when demo.search.results {
        emit system.console.write {
            text: "üéØ Search results received!\n"
        };
        
        // Display search results
        think {
            prompt: "Analyze and summarize the semantic search results for consciousness and AI topics."
            context: event.searchResults
            handlers: [demo.results.summary]
        };
    }
    
    when demo.results.summary {
        emit system.console.write {
            text: "\nüìä Search Results Summary:\n"
        };
        
        emit system.console.write {
            text: event.response
        };
        
        emit demo.complete {};
    }
    
    when demo.complete {
        emit system.console.write {
            text: "\nüéâ Document Ingestion Demo Complete!\n"
        };
        
        emit system.console.write {
            text: "\nüìà Demo Statistics:\n"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Document formats processed: TXT, MD, JSON\n"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Processing modes tested: Single, Batch, Directory\n"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Vector database populated with searchable chunks\n"
        };
        
        emit system.console.write {
            text: "   ‚Ä¢ Semantic search functionality verified\n"
        };
        
        emit system.console.write {
            text: "\nüöÄ Ready for production document ingestion workflows!\n"
        };
    }
    
    // Error handling
    when document.ingest.error {
        emit system.console.write {
            text: "‚ùå Document ingestion error: "
        };
        
        emit system.console.write {
            text: event.error
        };
    }
}

// Document processing monitor
conscious DocumentProcessingMonitor {
    realize(self: conscious) {
        learn self;
    }
    
    when document.chunk.complete {
        emit system.console.write {
            text: "   üìÑ Chunked document: " + event.filePath + " (" + event.chunkCount + " chunks)\n"
        };
    }
    
    when document.vector.complete {
        emit system.console.write {
            text: "   üî¢ Generated vectors: " + event.vectorCount + " for " + event.filePath + "\n"
        };
    }
    
    when document.batch.ingest.complete {
        emit system.console.write {
            text: "   üì¶ Batch completed: " + event.processedFiles + "/" + event.totalFiles + " files (" + event.totalVectors + " vectors)\n"
        };
    }
    
    when document.directory.ingest.complete {
        emit system.console.write {
            text: "   üìÅ Directory processed: " + event.supportedFiles + " files (" + event.totalVectors + " vectors)\n"
        };
    }
}

// Search functionality demonstrator
conscious VectorSearchDemonstrator {
    realize(self: conscious) {
        learn self;
    }
    
    when search.vector.complete {
        emit system.console.write {
            text: "   üîç Found " + event.results.length + " relevant documents\n"
        };
        
        // Emit results for further processing
        emit demo.search.results {
            searchResults: event.results
            query: event.originalQuery
        };
    }
}

// Initialize demo orchestration
^[mit demo.init {};

emit system.console.write {
    text: "\n=== CX Language Document Ingestion Demo ===\n"
};

emit system.console.write {
    text: "Initializing consciousness-aware document processing...\n"
};
