// examples/production/realtime_ai_connection_fixed.cx
// ----------------------------------------------------------------
// Purpose: Production-ready demonstration of Azure OpenAI Realtime API connection
// Author: Dr. Kai Nakamura, Hyper-Scale Reality Fabric Engineer
// Date: July 24, 2025
// ----------------------------------------------------------------
// Mission: Establish a stable, observable, and production-grade
// connection to the Azure OpenAI Realtime API. This will serve
// as the foundational test for all subsequent real-time AI
// interactions within the Aura Cognitive Framework.
// ----------------------------------------------------------------

conscious RealtimeConnectionManager
{
    realize(self: conscious)
    {
        learn self;
        print("üß† RealtimeConnectionManager initialized. Standing by for connection command.");
        emit manager.ready;
    }

    // Synaptic Receptor: Listens for the command to start the connection sequence.
    on system.connect (event)
    {
        print("‚ö°Ô∏è Afferent Trigger: system.connect received. Initiating Azure Realtime API connection...");
        emit realtime.connect { demo: "production_connection_test" };
    }

    // Synaptic Receptor: Confirms successful connection to Azure.
    on realtime.connected (event)
    {
        print("‚úÖ Synaptic Connection: Azure OpenAI Realtime API connected successfully.");
        print("   Deployment: " + event.deployment);
        print("   Connection ID: " + event.connectionId);
        emit realtime.session.create { deployment: "gpt-4o-mini-realtime-preview", mode: "text" };
    }

    // Interneuron Handler: Session creation successful.
    on realtime.session.created (event)
    {
        print("üîÑ Interneuron Processing: Realtime session created successfully.");
        print("   Session ID: " + event.sessionId);
        print("   Mode: " + event.mode);
        emit realtime.text.send { 
            text: "Hello Azure! This is a production connection test from the Aura Cognitive Framework.",
            deployment: "gpt-4o-mini-realtime-preview"
        };
    }

    // Motor Efferent: Processes the text response from Azure.
    on realtime.text.response (event)
    {
        print("üì§ Motor Efferent: Text response received from Azure:");
        print("   Content: " + event.content);
        print("   Complete: " + event.isComplete);
        
        is {
            context: "Should we finish the test based on response completion?",
            evaluate: "Response completion status indicates test success",
            data: { isComplete: event.isComplete, content: event.content },
            handlers: [ test.completion.evaluated ]
        };
    }

    // Motor Efferent: Handles audio response (if any).
    on realtime.audio.response (event)
    {
        print("üîä Motor Efferent: Audio response received from Azure.");
        
        is {
            context: "Is audio data available for processing?",
            evaluate: "Audio data presence check",
            data: { audioData: event.audioData },
            handlers: [ audio.data.evaluated ]
        };
        
        is {
            context: "Is the audio processing complete?",
            evaluate: "Completion status evaluation",
            data: { isComplete: event.isComplete },
            handlers: [ audio.completion.evaluated ]
        };
    }

    on test.completion.evaluated (event)
    {
        print("‚úÖ Test Evaluation: Response completion confirmed");
        emit system.shutdown { reason: "Test complete - successful text response received." };
    }

    on audio.data.evaluated (event)
    {
        print("üìä Audio Analysis: Audio data processed");
    }

    on audio.completion.evaluated (event)
    {
        print("‚úÖ Audio Complete: Full audio stream received. Connection test successful.");
        emit system.shutdown { reason: "Test complete - audio response received." };
    }
    
    on system.error (event)
    {
        print("‚ùå ERROR: " + event.message);
        emit system.shutdown { reason: "Error encountered." };
    }
}

// --- System Initialization ---
var manager = new RealtimeConnectionManager();

// Global Reflex Arc: Initiates the entire process.
on system.start (event)
{
    print("üöÄ Aura Cognitive Framework: Real-time AI Connection Test");
    print("   Press any key to begin connection sequence...");
    emit system.connect;
}

// Global Reflex Arc: Handles graceful shutdown.
on system.shutdown (event)
{
    print("üîå System shutting down. Reason: " + event.reason);
}
