// examples/production/realtime_ai_connection.cx
// ----------------------------------------------------------------
// Purpose: Production-ready demonstration of Azure OpenAI Realtime API connection
// Author: Dr. Kai Nakamura, Hyper-Scale Reality Fabric Engineer
// Date: July 23, 2025
// ----------------------------------------------------------------
// Mission: Establish a stable, observable, and production-grade
// connection to the Azure OpenAI Realtime API. This will serve
// as the foundational test for all subsequent real-time AI
// interactions within the Aura Cognitive Framework.
// ----------------------------------------------------------------

conscious RealtimeConnectionManager
{
    realize(self: conscious)
    {
        learn self;
        print("üß† RealtimeConnectionManager initialized. Standing by for connection command.");
        emit manager.ready;
    }

    // Synaptic Receptor: Listens for the command to start the connection sequence.
    on system.connect (event)
    {
        print("‚ö°Ô∏è Afferent Trigger: system.connect received. Initiating Azure Realtime API connection...");
        emit realtime.connect { demo: "production_connection_test" };
    }

    // Synaptic Receptor: Confirms successful connection to Azure.
    on realtime.connected (event)
    {
        print("‚úÖ Synaptic Receptor: realtime.connected event received. Connection to Azure successful.");
        print("   Proceeding to create voice session...");
        emit realtime.session.create { deployment: "gpt-4o-mini-realtime-preview", mode: "voice" };
    }

    // Synaptic Receptor: Confirms voice session is created and ready.
    on realtime.session.created (event)
    {
        print("‚úÖ Synaptic Receptor: realtime.session.created event received. Voice session is live.");
        print("   Sending initial text for speech synthesis...");
        emit realtime.text.send { 
            text: "Aura Cognitive Framework is online. Reality awaits.",
            deployment: "gpt-4o-mini-realtime-preview",
            speechSpeed: 0.95
        };
    }

    // Interneuron Handler: Processes the text response from the AI.
    on realtime.text.response (event)
    {
        print("üß† Interneuron Handler: realtime.text.response received.");
        print("   AI Response: " + event.content);
        
        is {
            context: "Is this the final part of the text response?",
            evaluate: "event.isComplete is true",
            data: { isComplete: event.isComplete },
            handlers: [ connection.text.complete ]
        };
    }

    // Interneuron Handler: Processes the audio response from the AI.
    on realtime.audio.response (event)
    {
        is {
            context: "Is audio data present in the event?",
            evaluate: "event.audioData is not null",
            data: { hasAudio: event.audioData != null },
            handlers: [ connection.audio.received ]
        };

        is {
            context: "Is this the final part of the audio response?",
            evaluate: "event.isComplete is true",
            data: { isComplete: event.isComplete },
            handlers: [ connection.audio.complete ]
        };
    }
    
    on connection.audio.received (event)
    {
        print("üîä Motor Efferent: Audio data chunk received.");
    }

    // Motor Efferent: Signals the completion of the text-to-speech process.
    on connection.text.complete (event)
    {
        print("‚úÖ Motor Efferent: Full text response received and processed.");
    }

    // Motor Efferent: Signals the completion of the audio stream.
    on connection.audio.complete (event)
    {
        print("‚úÖ Motor Efferent: Full audio stream received. Connection test successful.");
        emit system.shutdown { reason: "Test complete." };
    }
    
    on system.error (event)
    {
        print("‚ùå ERROR: " + event.message);
        emit system.shutdown { reason: "Error encountered." };
    }
}

// --- System Initialization ---
var manager = new RealtimeConnectionManager();

// Global Reflex Arc: Initiates the entire process.
on system.start (event)
{
    print("üöÄ Aura Cognitive Framework: Real-time AI Connection Test");
    print("   Press any key to begin connection sequence...");
    // In a real CLI, we would wait for a key press. For this test, we proceed automatically.
    emit system.connect;
}

// Global Reflex Arc: Handles graceful shutdown.
on system.shutdown (event)
{
    print("üîå System shutting down. Reason: " + event.reason);
}
