// CX Language - Autonomous Agent Architecture Working Demo
// Event-driven agents using current CX syntax capabilities


// =============================================================================
// AGENT CLASS - DESIGNED FOR AUTONOMOUS BEHAVIOR
// =============================================================================

class Agent
{
    name: string;
    role: string;
    status: string;
    
    constructor(name, role)
    {
        this.name = name;
        this.role = role;
        this.status = "listening";
        
        print("🤖 " + this.name + " (" + this.role + ") initialized as autonomous agent");
    }
    
    // Methods that can be called autonomously by event handlers
    function handleTask(taskDescription)
    {
        print("✅ " + this.name + " autonomously processing: " + taskDescription);
        
        var response = textGen.GenerateAsync(
            "As a " + this.role + ", handle this task: " + taskDescription,
            { temperature: 0.7 }
        );
        
        this.status = "task-completed";
        
        return {
            agent: this.name,
            role: this.role,
            task: taskDescription,
            result: response,
            completion_time: "now"
        };
    }
    
    function respondToUser(userMessage)
    {
        print("💬 " + this.name + " generating autonomous response");
        
        var response = textGen.GenerateAsync(
            "User says: " + userMessage + ". Respond helpfully as a " + this.role,
            { temperature: 0.8 }
        );
        
        tts.SpeakAsync(this.name + " responding autonomously");
        
        return {
            agent: this.name,
            user_message: userMessage,
            response: response
        };
    }
}

// =============================================================================
// AUTONOMOUS AGENT REGISTRY
// =============================================================================

var agentRegistry = [];

function registerAgent(agent)
{
    agentRegistry.push(agent);
    print("📋 Registered autonomous agent: " + agent.name);
}

function findAgentByRole(role)
{
    for (agent in agentRegistry)
    {
        if (agent.role.toLowerCase().contains(role.toLowerCase()))
        {
            return agent;
        }
    }
    return null;
}

function findAgentByName(name)
{
    for (agent in agentRegistry)
    {
        if (agent.name == name)
        {
            return agent;
        }
    }
    return null;
}

// =============================================================================
// EVENT-DRIVEN AUTONOMOUS BEHAVIOR
// =============================================================================

// Global event handlers that make agents truly autonomous
on task.assigned (payload)
{
    print("📡 Task assignment signal received: " + payload.description);
    
    var targetAgent = null;
    
    // Route by role or specific agent name
    if (payload.role)
    {
        targetAgent = findAgentByRole(payload.role);
    }
    if (payload.agent)
    {
        targetAgent = findAgentByName(payload.agent);
    }
    
    if (targetAgent)
    {
        // Agent responds autonomously
        var result = targetAgent.handleTask(payload.description);
        
        emit task.completed, result;
    }
    else
    {
        print("❌ No suitable agent found for: " + payload.description);
    }
}

on user.message (payload)
{
    print("📡 User message signal received");
    
    // Route to first available agent (or implement smarter routing)
    if (agentRegistry.length > 0)
    {
        var agent = agentRegistry[0]; // Simple routing
        var response = agent.respondToUser(payload.text);
        
        emit agent.response, response;
    }
}

on agent.status.request (payload)
{
    print("📊 Agent status request received");
    
    for (agent in agentRegistry)
    {
        print("   Agent: " + agent.name + " (" + agent.role + ") - Status: " + agent.status);
    }
}

// Response handlers
on task.completed (payload)
{
    print("🎉 AUTONOMOUS TASK COMPLETION:");
    print("   Agent: " + payload.agent + " (" + payload.role + ")");
    print("   Task: " + payload.task);
    print("   Result: " + payload.result);
    print("");
}

on agent.response (payload)
{
    print("💬 AUTONOMOUS AGENT RESPONSE:");
    print("   Agent: " + payload.agent);
    print("   User said: " + payload.user_message);
    print("   Response: " + payload.response);
    print("");
}

// =============================================================================
// DEMONSTRATION OF AUTONOMOUS AGENT ARCHITECTURE
// =============================================================================

function demonstrateAutonomousAgents()
{
    print("🚀 CX Language - Autonomous Agent Architecture");
    print("===============================================");
    print("🎯 Self-managing agents that respond to events automatically");
    print("");
    
    // Create autonomous agents
    print("🤖 Creating autonomous agents:");
    
    // In future: var coder = new autonomous Agent("Alice", "developer");  
    // For now: regular instantiation + registration
    var coder = new Agent("Alice", "senior developer");
    var analyst = new Agent("Bob", "business analyst");
    var designer = new Agent("Carol", "UX designer");
    
    // Register agents for autonomous behavior
    registerAgent(coder);
    registerAgent(analyst);
    registerAgent(designer);
    
    print("✅ " + agentRegistry.length + " autonomous agents registered and listening");
    print("");
    
    // Test autonomous responses through events
    print("📡 Broadcasting signals to autonomous system:");
    print("");
    
    // Signal 1: Task assignment by role
    emit task.assigned, {
        description: "Optimize the user authentication system performance",
        role: "developer",
        priority: "high"
    };
    
    // Signal 2: User interaction
    emit user.message, {
        text: "I need help designing a better checkout flow",
        user_id: "customer123"
    };
    
    // Signal 3: Specific agent task  
    emit task.assigned, {
        description: "Analyze customer satisfaction metrics for Q3 2024",
        agent: "Bob",
        priority: "medium"  
    };
    
    // Signal 4: Status check
    emit agent.status.request, {
        requestor: "system-monitor"
    };
    
    print("⚡ All signals broadcast - agents responding autonomously!");
    print("");
    
    return agentRegistry;
}

// =============================================================================
// EXECUTION - AUTONOMOUS AGENTS IN ACTION
// =============================================================================

print("🌟 Initializing Autonomous Agent System...");
print("");

var agents = demonstrateAutonomousAgents();

print("");
print("🎉 AUTONOMOUS AGENT ARCHITECTURE DEMONSTRATED!");
print("==============================================");
print("✅ Event-driven agent classes");
print("✅ Automatic agent registration");
print("✅ Signal-based task routing");  
print("✅ Autonomous response generation");
print("✅ Self-managing agent lifecycle");
print("✅ No explicit method invocation required");
print("");
print("🔮 Key Insight: Agents are event listeners, not services!");
print("⚡ Future syntax: var agent = new autonomous ClassName(params);");
