
/* Global scope is limited to the first few lines
 * of the script.
 *
 * A global scope is force by inserting the
 * compound operator before generating icode, and
 * inserting a call to main() after global scope is left.
 *
 * Kind of sloppy, but works. The only limitation is
 * globals must be at the top of the script file.
 * Maybe good for forcing global code organization??
 *
 * time to finish other statements and types :)
 *
 */

//int gcd(int x,  int y);
//int int_sqrt(int num);
//int inc_var(int &num);

/* Cx standard math functions.
 *
 */

// Euclidean Greatest Common Divisor (GCD) algorithm
int gcd(int x,  int y){
	if(x == y){
		return x;
	}else if(x < y){
		return gcd(x, y - x);
	}else{
		return gcd(x - y, y);
	}
}

// Binary numeral system (base 2) square root (integer)
int int_sqrt(int num) {
    int res = 0;
    int bit = 1 << 14; // The second-to-top bit is set: 1L<<30 for long

    // "bit" starts at the highest power of four <= the argument.
    while (bit > num)
        bit >>= 2;

    while (bit != 0) {
        if (num >= res + bit) {
            num -= res + bit;
            res = (res >> 1) + bit;
        }else{
            res >>= 1;
        }

        bit >>= 2;
    }

    return res;
}

int inc_var(int &num){
    return num++;
}

int main(){
    int i = 0;
    int root = 4096;
    int c_gcd = 0;
    int array[10];
    int test = root * 2;

    bool test_bool = true;

    float test_float = 5.5;

    i = (int) test_float;

    c_gcd = gcd(root, test);

    do{
            array[i] = int_sqrt(root);
            root = int_sqrt(test);
	}while (i++ < 10);

	test_float = (float) root;

    return root;
}