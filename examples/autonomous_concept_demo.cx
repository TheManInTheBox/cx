// CX Language - Autonomous Agent Concept Demonstration
// Simplified to show the core insight: agents are event listeners, not invoked services

using textGen from "Cx.AI.TextGeneration";
using tts from "Cx.AI.TextToSpeech";

// =============================================================================
// CORE AUTONOMOUS AGENT CONCEPT
// =============================================================================

// Global agent registry for autonomous behavior
var autonomousAgents = [];

// Agent factory function that creates autonomous agents
function createAutonomousAgent(name, role)
{
    var agent = {
        name: name,
        role: role,
        status: "listening",
        taskCount: 0
    };
    
    autonomousAgents.push(agent);
    print("🤖 Autonomous agent " + name + " (" + role + ") is now listening for events");
    
    return agent;
}

// Autonomous agent lookup functions
function findAgentByRole(role)
{
    for (agent in autonomousAgents)
    {
        if (agent.role == role)
        {
            return agent;
        }
    }
    return null;
}

function findAgentByName(name)
{
    for (agent in autonomousAgents)
    {
        if (agent.name == name)
        {
            return agent;
        }
    }
    return null;
}

// =============================================================================
// AUTONOMOUS EVENT HANDLERS - THE KEY INSIGHT
// =============================================================================

// Agents respond autonomously to task assignments
on task.assigned (payload)
{
    print("📡 Task assignment detected: " + payload.description);
    
    var agent = null;
    
    // Route by role or agent name
    if (payload.role)
    {
        agent = findAgentByRole(payload.role);
    }
    if (payload.agent)
    {
        agent = findAgentByName(payload.agent);
    }
    
    if (agent)
    {
        print("✅ " + agent.name + " autonomously accepting task");
        
        // Agent processes task autonomously
        var response = textGen.GenerateAsync(
            "As a " + agent.role + ", handle this task: " + payload.description + 
            ". Provide a specific action plan.",
            { temperature: 0.7 }
        );
        
        agent.taskCount = agent.taskCount + 1;
        agent.status = "task-completed";
        
        // Agent autonomously reports completion
        emit task.completed, {
            agent: agent.name,
            role: agent.role,
            task: payload.description,
            result: response,
            taskNumber: agent.taskCount
        };
        
        tts.SpeakAsync(agent.name + " completed task autonomously");
    }
    else
    {
        print("❌ No autonomous agent available for: " + payload.description);
    }
}

// Agents respond autonomously to user messages
on user.message (payload)
{
    print("📡 User message detected: " + payload.text);
    
    if (autonomousAgents.length > 0)
    {
        var agent = autonomousAgents[0]; // Simple routing to first agent
        
        print("💬 " + agent.name + " autonomously responding to user");
        
        var response = textGen.GenerateAsync(
            "User says: " + payload.text + ". Respond helpfully as a " + agent.role,
            { temperature: 0.8 }
        );
        
        emit agent.response, {
            agent: agent.name,
            userMessage: payload.text,
            response: response
        };
    }
}

// System status monitoring
on system.status (payload)
{
    print("📊 System status request - autonomous agents reporting:");
    
    for (agent in autonomousAgents)
    {
        print("   " + agent.name + " (" + agent.role + ") - Status: " + agent.status + " - Tasks: " + agent.taskCount);
    }
    
    emit system.status.complete, {
        totalAgents: autonomousAgents.length,
        activeAgents: autonomousAgents.length
    };
}

// =============================================================================
// AUTONOMOUS RESPONSE HANDLERS
// =============================================================================

on task.completed (payload)
{
    print("🎉 AUTONOMOUS TASK COMPLETION!");
    print("   Agent: " + payload.agent + " (" + payload.role + ")");
    print("   Task #" + payload.taskNumber + ": " + payload.task);
    print("   Result: " + payload.result);
    print("");
}

on agent.response (payload)
{
    print("💬 AUTONOMOUS AGENT RESPONSE!");
    print("   Agent: " + payload.agent);
    print("   User: " + payload.userMessage);
    print("   Response: " + payload.response);
    print("");
}

// =============================================================================
// DEMONSTRATION OF AUTONOMOUS ARCHITECTURE
// =============================================================================

print("🚀 CX Language - Autonomous Agent Architecture Demo");
print("===================================================");
print("🎯 Key Insight: Agents are event listeners, not invoked services");
print("");

// Create autonomous agents using factory function
print("🤖 Initializing autonomous agents:");

var alice = createAutonomousAgent("Alice", "developer");
var bob = createAutonomousAgent("Bob", "analyst");
var carol = createAutonomousAgent("Carol", "designer");

print("✅ " + autonomousAgents.length + " autonomous agents active and listening");
print("");

// Test autonomous behavior through events
print("📡 Broadcasting events to autonomous agents:");
print("");

// Event 1: Task for developer
emit task.assigned, {
    description: "Optimize database query performance in the user service",
    role: "developer",
    priority: "high"
};

// Event 2: User message
emit user.message, {
    text: "I need help with improving the mobile app user experience",
    userId: "user123"
};

// Event 3: Specific agent task
emit task.assigned, {
    description: "Create wireframes for the new dashboard interface",
    agent: "Carol",
    priority: "medium"
};

// Event 4: System status check
emit system.status, {
    requestor: "admin"
};

print("⚡ All events broadcast - observing autonomous responses!");
print("");
print("🌟 AUTONOMOUS AGENT DEMONSTRATION COMPLETE!");
print("===========================================");
print("✅ Agents respond automatically to events");
print("✅ No explicit method calls on agent objects");
print("✅ Pure event-driven autonomous behavior");
print("✅ Self-managing through event subscription");
print("");
print("🔮 FUTURE SYNTAX VISION:");
print("   var agent = new autonomous DebugAgent('Alice', 'senior-dev');");
print("   // Agent immediately becomes autonomous event listener");
print("   // No further setup or method calls needed!");
print("   // Agent responds to relevant events automatically");
