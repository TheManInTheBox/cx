// DEBUG: Test method that calls AI services


print("🔧 DEBUG: Testing agent method with AI service");

class TestAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("✅ Agent created: " + this.name);
    }
    
    function testAiMethod()
    {
        print("🤖 Starting AI test...");
        
        var response = textGen.GenerateAsync("Say hello!", {
            temperature: 0.7,
            maxTokens: 50
        });
        
        print("✅ AI Response: " + response);
        return response;
    }
    
    // Class-scoped event handler
    on test.trigger (payload)
    {
        print("🎯 Event received in class: " + payload);
        var result = this.testAiMethod();
        print("✅ Event handler completed: " + result);
        emit test.complete, result;
    }
}

// Global event handler to receive completion
on test.complete (payload)
{
    print("🏆 Test completed with result: " + payload);
}

try
{
    print("🎯 Creating agent...");
    var testAgent = agent TestAgent("AI-TEST-AGENT");
    
    print("🎯 Testing class-scoped event handler...");
    emit test.trigger, "Hello from event system!";
    
    print("🎯 Testing direct method call...");
    var result = testAgent.testAiMethod();
    print("✅ Direct method result: " + result);
}
catch (error)
{
    print("❌ Error: " + error);
}
