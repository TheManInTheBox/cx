
// TARGET SCENARIO: Aura Live Audio Presence System
// - Agent listens continuously for "Aura on/off" commands only
// - When Aura on: beep-boop acknowledgment + conversation mode
// - When Aura off: disable all reactions except audio listening
// - Animal from Muppets personality with wild beep-boop responses

class AuraAnimalAgent
{
    name: string;
    isAwake: boolean;
    inConversation: boolean;
    auraEnabled: boolean;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.isAwake = false;
        this.inConversation = false;
        this.auraEnabled = false;
        print("🎧 " + this.name + " - Always listening for 'Aura on/off' commands");
    }
    
    function speakBeepBoop(message, isActivation)
    {
        if (isActivation)
        {
            // Wild, excited Animal activation
            var activationSound = "[Wild, chaotic Animal from Muppets voice] BEEP-BOOP! BEEP-BOOP! " + message + " DRUMS! CYMBALS! BEEP-BOOP!";
            tts.SpeakAsync(activationSound);
            print("🥁 ANIMAL (excited): BEEP-BOOP! " + message + " BEEP-BOOP!");
        }
        else
        {
            // Calmer Animal shutdown
            var shutdownSound = "[Tired Animal voice] beep-boop... " + message + " ...zzz...beep-boop";
            tts.SpeakAsync(shutdownSound);
            print("😴 ANIMAL (sleepy): beep-boop... " + message + " ...beep-boop");
        }
    }
    
    function generateAnimalResponse(userInput)
    {
        var prompt = "Respond as Animal from the Muppets - wild, enthusiastic, broken English, " +
                    "drum references, short energetic phrases. To: '" + userInput + "'";
        
        var response = textGen.GenerateAsync(prompt, {
            temperature: 0.9,
            maxTokens: 60
        });
        
        return response;
    }
    
    function speakAnimalResponse(text)
    {
        var animalVoice = "[Wild, energetic Animal from Muppets voice] " + text;
        tts.SpeakAsync(animalVoice);
        print("🐷 ANIMAL: " + text);
    }
    
    // AUDIO PROCESSING - Always active for "Aura on/off" detection
    on live.audio (payload)
    {
        var audioText = payload.toLowerCase();
        print("🎤 Live audio: " + payload);
        
        // AURA ACTIVATION: "Aura on" command
        if (audioText.includes("aura on"))
        {
            this.auraEnabled = true;
            this.isAwake = true;
            this.inConversation = true;
            
            // Animal's wild beep-boop activation response
            this.speakBeepBoop("ANIMAL AWAKE! AURA READY! ME LISTEN NOW!", true);
            print("✅ AURA SYSTEM: ON - All sensory systems active");
            
            emit aura.system.activated, this.name;
            return;
        }
        
        // AURA DEACTIVATION: "Aura off" command  
        if (audioText.includes("aura off"))
        {
            this.auraEnabled = false;
            this.isAwake = false;
            this.inConversation = false;
            
            // Animal's sleepy beep-boop shutdown response
            this.speakBeepBoop("ANIMAL SLEEP NOW... AURA OFF... DRUMS QUIET...", false);
            print("❌ AURA SYSTEM: OFF - Only audio listening remains");
            
            emit aura.system.deactivated, this.name;
            return;
        }
        
        // CONVERSATION PROCESSING - Only when Aura is enabled
        if (this.auraEnabled && this.isAwake && this.inConversation)
        {
            // Check for conversation end signal
            if (audioText.includes("beep-boop"))
            {
                this.inConversation = false;
                this.speakBeepBoop("BYE-BYE! ANIMAL HAD FUN! DRUMS ROCK!", false);
                print("👋 Conversation ended - demo complete!");
                
                emit conversation.ended, "beep-boop";
                return;
            }
            
            // Generate Animal conversation response
            var animalResponse = this.generateAnimalResponse(payload);
            this.speakAnimalResponse(animalResponse);
        }
        else if (!this.auraEnabled)
        {
            // Aura disabled - ignore all input except activation commands
            print("🔇 Aura disabled - ignoring: " + payload);
        }
    }
    
    // PRESENCE DETECTION - Only responds when Aura system is enabled
    on presence.detected (payload)
    {
        if (!this.auraEnabled || !this.isAwake)
        {
            print("🔇 Presence ignored - Aura system disabled");
            return;
        }
        
        print("👁️ Presence detected: " + payload);
        var presenceResponse = this.generateAnimalResponse("Someone here! Animal see you!");
        this.speakAnimalResponse(presenceResponse);
    }
    
    // ENVIRONMENTAL SENSING - Only active when Aura enabled
    on environment.change (payload)
    {
        if (!this.auraEnabled || !this.isAwake)
        {
            print("🔇 Environmental change ignored - Aura system disabled");
            return;
        }
        
        print("🌍 Environment: " + payload);
        var envResponse = this.generateAnimalResponse("Something different! Animal notice!");
        this.speakAnimalResponse(envResponse);
    }
}

// System Monitor for Aura state changes
class AuraSystemMonitor
{
    on aura.system.activated (payload)
    {
        print("📊 SYSTEM STATE: Aura ENABLED");
        print("📊 Active Services: Audio ✅ | Presence ✅ | Environment ✅ | Conversation ✅");
    }
    
    on aura.system.deactivated (payload)
    {
        print("📊 SYSTEM STATE: Aura DISABLED");
        print("📊 Active Services: Audio ✅ | Presence ❌ | Environment ❌ | Conversation ❌");
    }
    
    on conversation.ended (payload)
    {
        print("📊 CONVERSATION: Ended by " + payload);
        print("📊 Demo Status: Complete - Target scenario achieved!");
    }
}

// INITIALIZE TARGET SCENARIO DEMO
print("🚀 AURA LIVE AUDIO PRESENCE - TARGET SCENARIO");
print("===============================================");
print("🎯 SCENARIO: Voice-activated sensory system with Animal personality");
print("🎧 LISTENING: Always listening for 'Aura on' and 'Aura off' commands");
print("🔊 RESPONSE: Animal from Muppets with wild beep-boop acknowledgments");
print("💬 CONVERSATION: Active only when Aura system is enabled");
print("🛑 END: Say 'beep-boop' to end conversation and complete demo");
print("");

try
{
    // Create the Aura system agents
    var animalAgent = agent AuraAnimalAgent("ANIMAL");
    var systemMonitor = agent AuraSystemMonitor();
    
    print("🎤 SIMULATION: Live audio processing scenario");
    print("");
    
    // === STEP 1: USER SAYS "Aura on" ===
    print("👤 USER: 'Aura on'");
    emit live.audio, "Aura on";
    
    print("");
    
    // === STEP 2: USER STARTS CONVERSATION ===
    print("👤 USER: 'Hello Animal, how are you today?'");
    emit live.audio, "Hello Animal, how are you today?";
    
    print("");
    
    // === STEP 3: CONTINUE CONVERSATION ===
    print("👤 USER: 'Do you want to play drums with me?'");
    emit live.audio, "Do you want to play drums with me?";
    
    print("");
    
    // === STEP 4: PRESENCE DETECTION WHILE AURA ACTIVE ===
    print("🔍 [PRESENCE SENSOR] Motion detected in room");
    emit presence.detected, "motion";
    
    print("");
    
    // === STEP 5: ENVIRONMENTAL CHANGE ===
    print("🌡️ [ENVIRONMENT SENSOR] Temperature increase detected");
    emit environment.change, "temperature_rise";
    
    print("");
    
    // === STEP 6: END CONVERSATION ===
    print("👤 USER: 'beep-boop'");
    emit live.audio, "beep-boop";
    
    print("");
    print("🎊 TARGET SCENARIO COMPLETED!");
    print("");
    
    // === BONUS: DEMONSTRATE AURA OFF STATE ===
    print("📋 BONUS: Demonstrating Aura off state...");
    print("👤 USER: 'Aura off'");
    emit live.audio, "Aura off";
    
    print("");
    print("👤 USER: 'Hello? Anyone there?'");
    emit live.audio, "Hello? Anyone there?";
    
    print("");
    print("🔍 [PRESENCE SENSOR] Motion detected (should be ignored)");
    emit presence.detected, "motion";
    
    print("");
    print("✅ AURA SYSTEM BEHAVIOR VERIFIED!");
    
}
catch (error)
{
    print("❌ Target Scenario Error: " + error);
}

// Global audio listener (always active)
on system.audio.always (payload)
{
    print("🔊 System-wide audio processing: " + payload);
    emit live.audio, payload;
}

print("");
print("🏆 TARGET SCENARIO ACHIEVEMENTS:");
print("✅ Continuous Audio Listening: Always monitoring for 'Aura on/off'");
print("✅ State Management: Proper enable/disable of sensory processing");
print("✅ Animal Personality: Wild Muppet character with beep-boop responses"); 
print("✅ Selective Response: Only reacts when Aura system enabled");
print("✅ Conversation Flow: Natural start with activation, end with beep-boop");
print("✅ Multi-Sensory Integration: Audio, presence, environment coordination");
print("");
print("🌟 CAPABILITIES DEMONSTRATED:");
print("🎤 Live Audio Processing - Command detection and conversation");
print("🤖 Autonomous State Management - System-wide enable/disable");
print("🎭 AI Personality Integration - Animal from Muppets character");
print("👁️ Presence Detection - Environmental awareness when active");
print("🌍 Environmental Sensing - Multi-modal sensory input processing");
print("🔊 Voice Synthesis - Text-to-speech with character personality");
print("");
print("🎯 TARGET SCENARIO: COMPLETE - Aura Live Audio Presence System Operational!");
