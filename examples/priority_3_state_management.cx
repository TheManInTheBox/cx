
// Global state management variables - Priority #3
var auraEnabled = false;
var isAwake = false;
var inConversation = false;

print("🎯 PRIORITY #3: INTELLIGENT STATE MANAGEMENT");
print("============================================");
print("🧠 Smart conditional processing with state flags");
print("🎤 Voice-activated autonomous behavior control");
print("🤖 Animal personality with intelligent state transitions");
print("");

// State management functions with local state handling
function processVoiceCommand(audioText, currentAuraEnabled, currentAwake, currentInConversation)
{
    print("🎤 PROCESSING: \"" + audioText + "\"");
    
    // Check current state
    print("📊 CURRENT STATE:");
    print("   🎯 Aura: " + currentAuraEnabled + " | 😴 Awake: " + currentAwake + " | 💬 In Conversation: " + currentInConversation);
    
    // ALWAYS process voice commands (Priority #1: Always-On Audio)
    if (audioText.includes("aura on"))
    {
        print("✅ VOICE COMMAND: Aura activation detected");
        speakBeepBoop("ANIMAL AWAKE! AURA READY! BEEP-BOOP!", true);
        print("🧠 STATE TRANSITION: DISABLED → FULLY ACTIVE");
        return { aura: true, awake: true, conversation: true, action: "ACTIVATED" };
    }
    
    if (audioText.includes("aura off"))
    {
        print("❌ VOICE COMMAND: Aura deactivation detected");
        speakBeepBoop("ANIMAL SLEEP... AURA OFF... zzz...", false);
        print("🧠 STATE TRANSITION: ACTIVE → DISABLED");
        return { aura: false, awake: false, conversation: false, action: "DEACTIVATED" };
    }
    
    if (audioText.includes("wake up"))
    {
        if (currentAuraEnabled)
        {
            print("😴 VOICE COMMAND: Wake up detected (Aura enabled)");
            speakBeepBoop("ANIMAL WAKE UP! READY FOR TALK!", false);
            print("🧠 STATE TRANSITION: STANDBY → LISTENING");
            return { aura: currentAuraEnabled, awake: true, conversation: true, action: "AWAKENED" };
        }
        else
        {
            print("😴 IGNORED: Wake up command (Aura disabled - say 'aura on' first)");
            return { aura: currentAuraEnabled, awake: currentAwake, conversation: currentInConversation, action: "IGNORED_DISABLED" };
        }
    }
    
    if (audioText.includes("go to sleep"))
    {
        if (currentAuraEnabled)
        {
            print("� VOICE COMMAND: Sleep detected (Aura enabled)");
            speakBeepBoop("ANIMAL GO SLEEP... QUIET TIME... zzz...", false);
            print("🧠 STATE TRANSITION: ACTIVE → STANDBY");
            return { aura: currentAuraEnabled, awake: false, conversation: false, action: "SLEEPING" };
        }
        else
        {
            print("😴 IGNORED: Sleep command (Aura disabled)");
            return { aura: currentAuraEnabled, awake: currentAwake, conversation: currentInConversation, action: "IGNORED_DISABLED" };
        }
    }
    
    // Priority #3: STATE-DEPENDENT CONVERSATION PROCESSING
    if (currentAuraEnabled && currentAwake && currentInConversation)
    {
        print("🤖 INTELLIGENT PROCESSING: Full conversation mode");
        var response = generateAnimalResponse(audioText);
        speakBeepBoop(response, false);
        return { aura: currentAuraEnabled, awake: currentAwake, conversation: currentInConversation, action: "CONVERSING" };
    }
    else if (currentAuraEnabled && currentAwake)
    {
        print("🤖 LISTENING MODE: Ready but waiting for conversation");
        speakBeepBoop("ANIMAL HEAR YOU! TALK MORE!", false);
        return { aura: currentAuraEnabled, awake: currentAwake, conversation: true, action: "LISTENING" };
    }
    else if (currentAuraEnabled)
    {
        print("� STANDBY MODE: Enabled but sleeping");
        print("💡 HINT: Say 'wake up' to activate conversation");
        return { aura: currentAuraEnabled, awake: currentAwake, conversation: currentInConversation, action: "STANDBY" };
    }
    else
    {
        print("❌ DISABLED MODE: No processing");
        print("💡 HINT: Say 'aura on' to enable system");
        return { aura: currentAuraEnabled, awake: currentAwake, conversation: currentInConversation, action: "DISABLED" };
    }
}

// Animal personality with intelligent state management
function speakBeepBoop(message, isActivation)
{
    if (isActivation)
    {
        var activationSound = "[Wild Animal voice] BEEP-BOOP! " + message + " BEEP-BOOP!";
        tts.SpeakAsync(activationSound);
        print("🥁 ANIMAL (EXCITED): " + activationSound);
    }
    else
    {
        var responseSound = "[Animal voice] BEEP-BOOP! " + message + " BEEP-BOOP!";
        tts.SpeakAsync(responseSound);
        print("🥁 ANIMAL: " + responseSound);
    }
}

function generateAnimalResponse(userInput)
{
    var prompt = "Respond as Animal from Muppets - wild, enthusiastic, broken English, drum references, short phrases. To: '" + userInput + "'";
    return textGen.GenerateAsync(prompt, {
        temperature: 0.9,
        maxTokens: 50
    });
}

function updateSystemState(newAuraState, newAwakeState, newConversationState)
{
    auraEnabled = newAuraState;
    isAwake = newAwakeState;
    inConversation = newConversationState;
    
    print("🧠 STATE UPDATE:");
    print("   🎯 Aura Enabled: " + auraEnabled);
    print("   😴 Is Awake: " + isAwake);
    print("   💬 In Conversation: " + inConversation);
}

function checkSystemState()
{
    print("📊 CURRENT SYSTEM STATE:");
    print("   🎯 Aura Enabled: " + auraEnabled);
    print("   😴 Is Awake: " + isAwake);
    print("   💬 In Conversation: " + inConversation);
    
    if (auraEnabled && isAwake && inConversation)
    {
        print("   ✅ FULLY ACTIVE - All systems operational");
        return "FULLY_ACTIVE";
    }
    else if (auraEnabled && isAwake)
    {
        print("   🟡 LISTENING - Ready for conversation");
        return "LISTENING";
    }
    else if (auraEnabled)
    {
        print("   🔵 STANDBY - Aura enabled but sleeping");
        return "STANDBY";
    }
    else
    {
        print("   ❌ DISABLED - System offline");
        return "DISABLED";
    }
}

// Intelligent state-dependent audio processing
function processAudioInput(audioText)
{
    print("🎤 HEARD: \"" + audioText + "\"");
    
    // ALWAYS process voice commands (Priority #1: Always-On Audio)
    if (audioText.includes("aura on"))
    {
        // Priority #3: Intelligent State Management - Activation sequence
        updateSystemState(true, true, true);
        speakBeepBoop("ANIMAL AWAKE! AURA READY! ME LISTEN NOW!", true);
        print("✅ SYSTEM ACTIVATED - Full conversational mode");
        return;
    }
    
    if (audioText.includes("aura off"))
    {
        // Priority #3: Intelligent State Management - Deactivation sequence
        updateSystemState(false, false, false);
        speakBeepBoop("ANIMAL SLEEP NOW... AURA OFF... DRUMS QUIET...", false);
        print("❌ SYSTEM DEACTIVATED - All processing stopped");
        return;
    }
    
    if (audioText.includes("wake up"))
    {
        if (auraEnabled)
        {
            // Priority #3: State-dependent processing - Only if Aura enabled
            updateSystemState(auraEnabled, true, true);
            speakBeepBoop("ANIMAL WAKE UP! READY FOR TALK!", false);
        }
        else
        {
            print("😴 IGNORED - Aura system disabled (say 'aura on' first)");
        }
        return;
    }
    
    if (audioText.includes("go to sleep"))
    {
        if (auraEnabled)
        {
            // Priority #3: Intelligent conditional processing
            updateSystemState(auraEnabled, false, false);
            speakBeepBoop("ANIMAL GO SLEEP... ZZZ... BEEP-BOOP...", false);
        }
        else
        {
            print("😴 IGNORED - Aura system disabled");
        }
        return;
    }
    
    // Priority #3: STATE-DEPENDENT CONVERSATION PROCESSING
    if (auraEnabled && isAwake && inConversation)
    {
        print("🤖 PROCESSING CONVERSATION (All systems active)");
        var response = generateAnimalResponse(audioText);
        speakBeepBoop(response, false);
    }
    else if (auraEnabled && isAwake)
    {
        print("🤖 LISTENING MODE (Ready but not in conversation)");
        speakBeepBoop("ANIMAL HEAR YOU! TALK MORE!", false);
        updateSystemState(auraEnabled, isAwake, true);
    }
    else if (auraEnabled)
    {
        print("😴 STANDBY MODE (Enabled but sleeping)");
        print("💡 HINT: Say 'wake up' to activate conversation");
    }
    else
    {
        print("❌ DISABLED MODE - No processing");
        print("💡 HINT: Say 'aura on' to enable system");
    }
}

try
{
    print("🚀 PHASE 1: Initialize Always-On Audio");
    print("======================================");
    
    // Start microphone services
    print("🎤 Starting microphone capture...");
    micCapture.StartListeningAsync();
    print("✅ Microphone listening started");
    
    print("🔄 Starting live audio transcription...");
    liveAudio.StartAsync();
    print("✅ Live audio processing started");
    
    print("");
    print("🎯 PHASE 2: INTELLIGENT STATE MANAGEMENT TESTING");
    print("===============================================");
    
    // Test initial state
    print("📊 TESTING INITIAL STATE:");
    checkSystemState();
    print("");
    
    // Test state transitions
    print("🔊 TESTING STATE TRANSITIONS:");
    print("-------------------------------");
    
    print("1️⃣ Testing Aura activation...");
    processAudioInput("aura on");
    checkSystemState();
    print("");
    
    print("2️⃣ Testing conversation while active...");
    processAudioInput("hello animal how are you doing today");
    print("");
    
    print("3️⃣ Testing sleep command...");
    processAudioInput("go to sleep");
    checkSystemState();
    print("");
    
    print("4️⃣ Testing ignored input while sleeping...");
    processAudioInput("can you hear me now");
    print("");
    
    print("5️⃣ Testing wake up command...");
    processAudioInput("wake up");
    checkSystemState();
    print("");
    
    print("6️⃣ Testing conversation after wake up...");
    processAudioInput("tell me about drums");
    print("");
    
    print("7️⃣ Testing full deactivation...");
    processAudioInput("aura off");
    checkSystemState();
    print("");
    
    print("8️⃣ Testing completely ignored input when disabled...");
    processAudioInput("hello are you there");
    print("");
    
    print("🏆 INTELLIGENT STATE MANAGEMENT - SUCCESS!");
    print("==========================================");
    print("✅ Global State Flags: auraEnabled, isAwake, inConversation working");
    print("✅ Smart Conditional Processing: State-dependent behavior operational");
    print("✅ Voice Command Control: 'aura on/off', 'wake up', 'go to sleep'");
    print("✅ Intelligent Early Returns: Proper processing flow control");
    print("✅ State Transitions: Smooth activation/deactivation sequences");
    
    print("");
    print("🎯 PRIORITY #3 COMPLETE - INTELLIGENT STATE MANAGEMENT READY!");
}
catch (error)
{
    print("❌ Error in intelligent state management: " + error);
}

print("");
print("🔇 GRACEFUL SHUTDOWN");
print("====================");

liveAudio.StopAsync();
print("✅ Live audio stopped");

micCapture.StopListeningAsync();
print("✅ Microphone stopped");

print("");
print("🎯 INTELLIGENT STATE MANAGEMENT SESSION COMPLETE!");
print("🧠 Smart conditional processing with global state control operational!");
