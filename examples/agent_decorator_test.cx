// Dual Agent Pattern Test
// This example demonstrates the two agent creation patterns available in CX Language
//
// IMPORTANT DISTINCTION:
// - Classes compiled WITH event handlers → Automatically registered as agents during instantiation
// - Classes compiled WITHOUT event handlers → Compiled as regular classes
// - Regular classes → Get registered as agents when modified to have event handlers at runtime

// Method 1: Class-based agent approach (event handlers present = automatic agent registration)
class ClassBasedAgent
{
    uses textGen from Cx.AI.TextGeneration;
    uses tts from Cx.AI.TextToSpeech;
    
    agentName: string;
    
    constructor(name)
    {
        this.agentName = name;
        print("Creating class-based agent: " + name);
    }
    
    on system.ready (payload)
    {
        print("Class-based agent " + this.agentName + " is ready!");
        var greeting = await textGen.GenerateAsync("Create a greeting for an AI agent named " + this.agentName);
        await tts.SpeakAsync(greeting);
        emit agent.initialized, { name: this.agentName, pattern: "class-based" };
    }
    
    on agent.test (payload)
    {
        print("Class-based agent test received: " + payload.message);
        await tts.SpeakAsync("Class-based agent pattern working perfectly!");
    }
}

// Method 2: Event-driven approach (also has event handlers = automatic agent registration)
class EventDrivenAgent
{
    uses textGen from Cx.AI.TextGeneration;
    uses tts from Cx.AI.TextToSpeech;
    
    agentName: string;
    
    constructor(name)
    {
        this.agentName = name;
        print("Creating event-driven agent: " + name);
    }
    
    on system.ready (payload)
    {
        print("Event-driven agent " + this.agentName + " is ready!");
        var greeting = await textGen.GenerateAsync("Create a greeting for an event-driven AI agent named " + this.agentName);
        await tts.SpeakAsync(greeting);
        emit agent.initialized, { name: this.agentName, pattern: "event-driven" };
    }
    
    on agent.test (payload)
    {
        print("Event-driven test received: " + payload.message);
        await tts.SpeakAsync("Event-driven pattern working perfectly!");
    }
}

// Method 3: Regular class example (NO event handlers = compiled as regular class)
class RegularClass
{
    uses textGen from Cx.AI.TextGeneration;
    uses tts from Cx.AI.TextToSpeech;
    
    className: string;
    
    constructor(name)
    {
        this.className = name;
        print("Creating regular class (not an agent): " + name);
    }
    
    // Regular methods - no event handlers means this stays a regular class
    function doSomething()
    {
        print("Regular class " + this.className + " doing something...");
        return "Regular class operation complete";
    }
}

function main()
{
    print("=== Dual Agent Pattern Test ===");
    print("Demonstrating agent registration behavior:");
    print("");
    
    try
    {
        // Test class-based agent pattern (event handlers = auto-registered as agent during instantiation)
        print("1. Creating ClassBasedAgent (has event handlers):");
        var classBasedAgent = new ClassBasedAgent("Class-Based-Agent");
        print("   → Automatically registered as agent because it has event handlers");
        print("");
        
        // Test event-driven pattern (also has event handlers = auto-registered as agent)
        print("2. Creating EventDrivenAgent (has event handlers):");
        var eventAgent = new EventDrivenAgent("Event-Agent");
        print("   → Automatically registered as agent because it has event handlers");
        print("");
        
        // Test regular class (NO event handlers = compiled as regular class)
        print("3. Creating RegularClass (NO event handlers):");
        var regularObject = new RegularClass("Regular-Object");
        print("   → Compiled as regular class, NOT registered as agent");
        var result = regularObject.doSomething();
        print("   → " + result);
        print("");
        
        print("4. Testing agent functionality:");
        // Emit system ready to both agents (regular class won't receive these events)
        emit system.ready, { source: "main", timestamp: "2025-01-21" };
        
        // Test agent functionality (only agents will respond)
        emit agent.test, { message: "Testing agent patterns", source: "main" };
        
        print("✅ Dual agent pattern test completed successfully!");
        print("Key insight: Event handlers at compile-time determine agent registration at instantiation");
    }
    catch (ex)
    {
        print("❌ Agent pattern test failed: " + ex.message);
    }
}

main();
