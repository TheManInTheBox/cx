// CX Language - Class-Based Event Handlers Demo
// Demonstrating agents that handle events within their class definition

using textGen from "Cx.AI.TextGeneration";

// Agent class with INTERNAL event handlers
class AutonomousAgent
{
    name: string;
    role: string;
    expertise: string;
    
    constructor(agentName, agentRole, agentExpertise)
    {
        this.name = agentName;
        this.role = agentRole;
        this.expertise = agentExpertise;
        print("🤖 " + this.name + " (" + this.role + ") is now autonomous and listening for events");
        
        // Agent announces its availability
        emit agent.ready, {
            name: this.name,
            role: this.role,
            expertise: this.expertise
        };
    }
    
    // ✅ EVENT HANDLER INSIDE CLASS - This is what you're looking for!
    on task.assigned (payload)
    {
        // Only respond to tasks assigned to this agent or role
        if (payload.assignedTo == this.name || payload.targetRole == this.role)
        {
            print("📋 " + this.name + " received task: " + payload.description);
            
            var response = textGen.GenerateAsync(
                "As " + this.name + " with expertise in " + this.expertise + 
                ", handle this task: " + payload.description,
                { temperature: 0.7, maxTokens: 150 }
            );
            
            print("✅ " + this.name + " completed task!");
            print("   Result: " + response);
            
            // Agent autonomously reports completion
            emit task.completed, {
                agent: this.name,
                taskId: payload.taskId,
                result: response,
                completedAt: "now"
            };
        }
    }
    
    // ✅ ANOTHER EVENT HANDLER INSIDE CLASS
    on user.question (payload)
    {
        // Agent responds to questions in their area of expertise
        if (payload.topic == this.expertise || payload.targetExpert == this.name)
        {
            print("❓ " + this.name + " responding to question: " + payload.question);
            
            var answer = textGen.GenerateAsync(
                "As an expert in " + this.expertise + ", answer this question: " + payload.question,
                { temperature: 0.6, maxTokens: 100 }
            );
            
            print("💬 " + this.name + " answered: " + answer);
            
            emit expert.response, {
                expert: this.name,
                question: payload.question,
                answer: answer,
                confidence: "high"
            };
        }
    }
    
    // ✅ THIRD EVENT HANDLER - Status monitoring
    on system.status (payload)
    {
        if (payload.requestor == "admin")
        {
            print("📊 " + this.name + " status report:");
            print("   Role: " + this.role);
            print("   Expertise: " + this.expertise);
            print("   Status: Active and listening");
            
            emit agent.status, {
                agent: this.name,
                role: this.role,
                expertise: this.expertise,
                status: "active",
                responseTime: "immediate"
            };
        }
    }
}

// Create autonomous agents with internal event handlers
print("🚀 CREATING AUTONOMOUS AGENTS WITH CLASS-BASED EVENT HANDLERS");
print("============================================================");

var alice = new AutonomousAgent("Alice", "developer", "software engineering");
var bob = new AutonomousAgent("Bob", "analyst", "data analysis");
var carol = new AutonomousAgent("Carol", "designer", "user experience");

print("");
print("🎯 TESTING AUTONOMOUS AGENT RESPONSES...");
print("");

// Test 1: Task assignment
print("📤 Assigning task to developer role...");
emit task.assigned, {
    description: "Debug the authentication system",
    assignedTo: "Alice",
    targetRole: "developer",
    taskId: "TASK-001",
    priority: "high"
};

print("");

// Test 2: Expert question
print("📤 Asking UX design question...");
emit user.question, {
    question: "How can we improve the user onboarding flow?",
    topic: "user experience",
    targetExpert: "Carol",
    userId: "user123"
};

print("");

// Test 3: System status check
print("📤 Requesting system status from all agents...");
emit system.status, {
    requestor: "admin",
    timestamp: "now"
};

print("");
print("✅ Class-based event handlers demonstration complete!");
print("🎯 Each agent autonomously handled events relevant to their role!");
