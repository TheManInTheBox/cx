// CX Language - Agent Event Handling Demo (Current Working Implementation)
// Shows how agents can handle events with the current architecture

using textGen from "Cx.AI.TextGeneration";

// Agent class with methods that can be triggered by events
class SmartAgent
{
    name: string;
    role: string;
    expertise: string;
    taskCount: number;
    
    constructor(agentName, agentRole, agentExpertise)
    {
        this.name = agentName;
        this.role = agentRole;
        this.expertise = agentExpertise;
        this.taskCount = 0;
        print("🤖 " + this.name + " (" + this.role + ") initialized and ready");
        
        // Agent announces its availability
        emit agent.online, {
            name: this.name,
            role: this.role,
            expertise: this.expertise,
            status: "ready"
        };
    }
    
    // Method that handles task assignment
    function handleTask(taskDescription, taskId)
    {
        this.taskCount = this.taskCount + 1;
        print("📋 " + this.name + " received task #" + this.taskCount + ": " + taskDescription);
        
        var result = textGen.GenerateAsync(
            "As " + this.name + " with expertise in " + this.expertise + 
            ", handle this task: " + taskDescription,
            { temperature: 0.7, maxTokens: 120 }
        );
        
        print("✅ " + this.name + " completed task #" + this.taskCount);
        print("   Result: " + result);
        
        // Emit completion event
        emit task.completed, {
            agent: this.name,
            taskId: taskId,
            result: result,
            taskNumber: this.taskCount
        };
        
        return result;
    }
    
    // Method that handles user questions
    function answerQuestion(question, userId)
    {
        print("❓ " + this.name + " answering question from " + userId);
        
        var answer = textGen.GenerateAsync(
            "As an expert in " + this.expertise + ", answer: " + question,
            { temperature: 0.6, maxTokens: 100 }
        );
        
        print("💬 " + this.name + ": " + answer);
        
        emit question.answered, {
            expert: this.name,
            question: question,
            answer: answer,
            userId: userId
        };
        
        return answer;
    }
    
    // Method for status reporting
    function reportStatus()
    {
        print("📊 " + this.name + " status:");
        print("   Role: " + this.role);
        print("   Expertise: " + this.expertise);
        print("   Tasks completed: " + this.taskCount);
        print("   Status: Active");
        
        emit agent.status, {
            agent: this.name,
            role: this.role,
            expertise: this.expertise,
            tasksCompleted: this.taskCount,
            status: "active"
        };
    }
}

// Create agent registry
var agents = [];

// Helper function to find agent by name
function findAgent(name)
{
    for (agent in agents)
    {
        if (agent.name == name)
        {
            return agent;
        }
    }
    return null;
}

// Helper function to find agent by role
function findAgentByRole(role)
{
    for (agent in agents)
    {
        if (agent.role == role)
        {
            return agent;
        }
    }
    return null;
}

// ✅ GLOBAL EVENT HANDLERS - These route events to appropriate agent methods
on agent.online (payload)
{
    print("🌐 SYSTEM: Agent " + payload.name + " (" + payload.role + ") joined the network");
}

on task.assigned (payload)
{
    print("📤 SYSTEM: Routing task to " + payload.targetAgent);
    
    var agent = findAgent(payload.targetAgent);
    if (agent)
    {
        // Call the agent's method to handle the task
        agent.handleTask(payload.description, payload.taskId);
    }
    else
    {
        print("❌ SYSTEM: Agent " + payload.targetAgent + " not found");
    }
}

on user.question (payload)
{
    print("📤 SYSTEM: Routing question to " + payload.targetExpert);
    
    var agent = findAgent(payload.targetExpert);
    if (agent)
    {
        // Call the agent's method to answer the question
        agent.answerQuestion(payload.question, payload.userId);
    }
    else
    {
        print("❌ SYSTEM: Expert " + payload.targetExpert + " not found");
    }
}

on status.request (payload)
{
    print("📤 SYSTEM: Status request for all agents");
    
    for (agent in agents)
    {
        agent.reportStatus();
    }
}

// Create and register agents
print("🚀 CREATING SMART AGENTS WITH EVENT ROUTING");
print("==========================================");

var alice = new SmartAgent("Alice", "developer", "software engineering");
var bob = new SmartAgent("Bob", "analyst", "data analysis");
var carol = new SmartAgent("Carol", "designer", "user experience");

// Add agents to registry
agents.push(alice);
agents.push(bob);
agents.push(carol);

print("");
print("🎯 TESTING EVENT-DRIVEN AGENT COMMUNICATION...");
print("");

// Test 1: Assign task to specific agent
print("📤 Assigning development task to Alice...");
emit task.assigned, {
    description: "Implement user authentication system",
    targetAgent: "Alice",
    taskId: "DEV-001",
    priority: "high"
};

print("");

// Test 2: Ask expert question
print("📤 Asking UX question to Carol...");
emit user.question, {
    question: "How can we make the login form more user-friendly?",
    targetExpert: "Carol",
    userId: "product-manager"
};

print("");

// Test 3: Request status from all agents
print("📤 Requesting status from all agents...");
emit status.request, {
    requestedBy: "admin"
};

print("");
print("✅ AGENT EVENT HANDLING DEMO COMPLETE!");
print("🎯 This shows the CURRENT working approach:");
print("   • Agents have methods that can be called");
print("   • Global event handlers route events to agent methods");
print("   • Agents emit events to communicate their status");
print("");
print("🔮 FUTURE: Class-based event handlers (on statements inside classes)");
print("   • Would eliminate the global routing layer");
print("   • Agents would handle events directly in their class definition");
