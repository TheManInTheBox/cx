// Phase 3 Comprehensive Test - All Advanced Features
print("=== PHASE 3 COMPREHENSIVE TEST ===");

// 1. FUNCTION RETURN VALUES
print("\n1. Function Return Values:");
function multiply(a: number, b: number) -> number
{
    return a * b;
}

function formatMessage(name: string, age: number) -> string
{
    return name + " is " + age + " years old";
}

var result = multiply(6, 7);
print("6 * 7 = " + result);

var message = formatMessage("Bob", 25);
print(message);

// 2. OBJECT LITERALS
print("\n2. Object Literals:");
var car = {
    brand: "Toyota",
    model: "Camry",
    year: 2023,
    specs: {
        engine: "2.4L",
        fuel: "Gasoline"
    }
};

print("Car brand: " + car.brand);
print("Car model: " + car.model);
print("Engine: " + car.specs.engine);

// 3. ARRAY LITERALS
print("\n3. Array Literals:");
var colors = ["red", "green", "blue"];
print("Colors: " + colors);

// 4. FOR-IN LOOPS
print("\n4. For-in Loops:");
for (var color in colors)
{
    print("Color: " + color);
}

// 5. CLASS SYSTEM
print("\n5. Class System:");
class Vehicle
{
    brand: string;
    model: string;
    
    constructor(brand: string, model: string)
    {
        this.brand = brand;
        this.model = model;
    }
    
    function getInfo() -> string
    {
        return this.brand + " " + this.model;
    }
    
    function start()
    {
        print("Starting " + this.brand + " " + this.model);
    }
}

var mycar = new Vehicle("Honda", "Civic");
mycar.start();
var info = mycar.getInfo();
print("Vehicle info: " + info);

// 6. EXCEPTION HANDLING
print("\n6. Exception Handling:");
try
{
    print("In try block");
    throw "Test exception";
}
catch (e)
{
    print("Caught exception: " + e);
}

print("\n=== PHASE 3 TEST COMPLETE ===");
print("All advanced features working!");
