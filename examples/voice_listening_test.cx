
// VOICE LISTENING TEST - Continuous Audio Processing
// Listens continuously until "stop listening" voice command
// Demonstrates Always-On Audio Processing capability

class VoiceListenerAgent
{
    name: string;
    isListening: boolean;
    sessionCount: number;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.isListening = true;
        this.sessionCount = 0;
        
        print("🎤 " + this.name + " - Voice Listening Test Started");
        print("📋 Say 'stop listening' to end the test");
        print("📋 Say 'status check' to get current status");
        print("📋 Say anything else for AI response");
        print("==========================================");
        
        // Initial greeting
        var greeting = "Voice listening test activated! I'm ready to hear you speak.";
        tts.SpeakAsync(greeting);
    }
    
    function generateResponse(userInput)
    {
        var prompt = "Respond helpfully and conversationally to: '" + userInput + 
                    "'. Keep response under 30 words.";
        
        return textGen.GenerateAsync(prompt, {
            temperature: 0.7,
            maxTokens: 50
        });
    }
    
    function speakResponse(text)
    {
        tts.SpeakAsync(text);
        print("🤖 RESPONSE: " + text);
    }
    
    // ALWAYS-ON AUDIO PROCESSING - Core capability test
    on live.audio (payload)
    {
        if (!this.isListening)
        {
            return; // Safety check in case listening is disabled
        }
        
        var audioText = payload.toLowerCase().trim();
        this.sessionCount = this.sessionCount + 1;
        
        print("🎤 [" + this.sessionCount + "] Audio captured: '" + payload + "'");
        
        // STOP COMMAND - Test termination
        if (audioText.includes("stop listening") || audioText.includes("end test"))
        {
            this.isListening = false;
            
            var farewell = "Voice listening test completed! Processed " + this.sessionCount + " audio inputs. Goodbye!";
            this.speakResponse(farewell);
            
            print("✅ TEST COMPLETED - Listener stopped");
            print("📊 Total audio inputs processed: " + this.sessionCount);
            
            emit test.completed, this.name;
            return;
        }
        
        // STATUS CHECK - Test monitoring
        if (audioText.includes("status check") || audioText.includes("how are you"))
        {
            var status = "Voice listener active! Processed " + this.sessionCount + " inputs so far. Still listening!";
            this.speakResponse(status);
            return;
        }
        
        // ECHO TEST - Simple response validation
        if (audioText.includes("echo test"))
        {
            var echo = "Echo test successful! I heard you say: " + payload;
            this.speakResponse(echo);
            return;
        }
        
        // BEEP TEST - Hardware validation
        if (audioText.includes("beep test"))
        {
            tts.SpeakAsync("Beep! Audio hardware working correctly!");
            print("🔊 BEEP TEST: Hardware validation successful");
            return;
        }
        
        // IGNORE EMPTY/SHORT INPUTS
        if (audioText.length < 2)
        {
            print("🔇 Ignoring short/empty audio input");
            return;
        }
        
        // GENERAL CONVERSATION - AI-powered responses
        try
        {
            print("💭 Generating AI response...");
            var response = this.generateResponse(payload);
            this.speakResponse(response);
            
            emit audio.processed, payload;
        }
        catch (error)
        {
            var errorResponse = "Sorry, I had trouble processing that. Please try again.";
            this.speakResponse(errorResponse);
            print("❌ Error processing audio: " + error);
        }
    }
}

// MONITORING AGENT - Tracks test progress
class TestMonitor
{
    testStartTime: string;
    
    constructor()
    {
        this.testStartTime = "now"; // Placeholder for actual timestamp
        print("📊 Test Monitor: Tracking voice listening session");
    }
    
    on audio.processed (payload)
    {
        print("📈 MONITOR: Audio processed successfully");
    }
    
    on test.completed (payload)
    {
        print("📊 FINAL REPORT:");
        print("   Agent: " + payload);
        print("   Status: ✅ COMPLETED SUCCESSFULLY");
    }
}

// Initialize the voice listening test
print("🚀 INITIALIZING VOICE LISTENING TEST");
print("====================================");

var voiceListener = agent VoiceListenerAgent("VoiceTestAgent");
var monitor = agent TestMonitor();

print("🎤 Voice Listening Test is now ACTIVE");
print("📋 Commands you can try:");
print("   • 'echo test' - Test basic audio capture");
print("   • 'beep test' - Test audio output");
print("   • 'status check' - Get current status");
print("   • 'stop listening' - End the test");
print("   • Any other speech - Get AI response");
print("====================================");

// Test is now running - waiting for voice input
emit test.initialized, "Voice listening test ready";
