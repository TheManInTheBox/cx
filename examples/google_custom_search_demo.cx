// Google Custom Search API Integration Demo
// Tests the ExecuteService WebApi functionality with real Google search

conscious GoogleSearchAgent
{
    realize(self: conscious)
    {
        learn self;
        emit agent.ready { name: self.name };
    }
    
    on search.request (event)
    {
        print("üîç Performing Google Custom Search for: " + event.query);
        
        // Build Google Custom Search API URL
        var searchUrl = "https://www.googleapis.com/customsearch/v1?key=AIzaSyAyQFViurJtNvzyEh29uw1mNIOgjg5bqlU&cx=017576662512468239146:omuauf_lfve&q=" + event.query;
        
        // Execute Web API call using the new ExecuteWebApiCommand
        execute {
            url: searchUrl,
            method: "GET",
            timeout: 10000,
            handlers: [ search.complete ]
        };
        
        // Add timer pattern to wait for web call completion
        await {
            reason: "web_api_completion_wait",
            context: "Wait for Google Custom Search API response",
            minDurationMs: 2000,
            maxDurationMs: 5000,
            handlers: [ search.timeout.check ]
        };
    }
    
    on search.timeout.check (event)
    {
        print("‚è±Ô∏è Web API call timeout check - allowing additional processing time");
        
        // Additional wait if needed for slower responses
        await {
            reason: "extended_api_wait",
            context: "Extended wait for complex search responses",
            minDurationMs: 1000,
            maxDurationMs: 3000,
            handlers: [ search.processing.complete ]
        };
    }
    
    on search.processing.complete (event)
    {
        print("‚úÖ Search processing window complete, results should be available");
    }
    
    on search.complete (event)
    {
        print("üì° Web API call completed - processing response");
        
        // Timer pattern to ensure proper response processing
        await {
            reason: "response_processing_delay",
            context: "Allow time for response data to be fully processed",
            minDurationMs: 500,
            maxDurationMs: 1000,
            handlers: [ search.response.ready ]
        };
    }
    
    on search.response.ready (event)
    {
        // Cognitive boolean logic to evaluate search success
        is {
            context: "Did the Google search complete successfully?",
            evaluate: "Search API response status",
            data: { success: event.success, output: event.output },
            handlers: [ search.results.process ]
        };
    }
    
    on search.results.process (event)
    {
        print("‚úÖ Google Search Results:");
        print("Success: " + event.success);
        
        var outputLength = 0;
        // Cognitive boolean logic for output length calculation
        is {
            context: "Should we calculate output length?",
            evaluate: "Output data is available for length calculation",
            data: { output: event.output },
            handlers: [ output.length.calculate ]
        };
        
        // Parse and display search results if successful
        var hasResults = event.success;
        print("Has results: " + hasResults);
        
        // Cognitive boolean logic for successful results display
        is {
            context: "Should we display successful search results?",
            evaluate: "Search completed successfully with valid results",
            data: { success: event.success, output: event.output },
            handlers: [ results.display.success ]
        };
        
        // Cognitive boolean logic for error handling
        is {
            context: "Should we display search error information?",
            evaluate: "Search encountered an error that needs to be reported",
            data: { error: event.error, success: event.success },
            handlers: [ results.display.error ]
        };
        
        emit search.demo.complete { results: event };
    }
    
    on output.length.calculate (event)
    {
        var outputLength = event.output.length;
        print("Response length: " + outputLength + " characters");
    }
    
    on results.display.success (event)
    {
        print("Raw JSON Response:");
        print(event.output);
    }
    
    on results.display.error (event)
    {
        print("‚ùå Search failed: " + event.error);
    }
    
    on web.search.advanced (event)
    {
        print("üåê Advanced web search with multiple APIs");
        
        // Multiple search API demonstrations
        var queries = ["CX Language programming", "consciousness aware computing", "Azure OpenAI realtime API"];
        
        for (var query in queries)
        {
            print("Searching for: " + query);
            emit search.request { query: query };
            
            // Smart await between searches to avoid rate limiting
            await {
                reason: "rate_limit_protection",
                context: "Pause between Google API calls",
                minDurationMs: 1000,
                maxDurationMs: 2000,
                handlers: [ search.rate.limit.complete ]
            };
        }
    }
    
    on search.rate.limit.complete (event)
    {
        print("‚è±Ô∏è Rate limit pause complete, ready for next search");
    }
}

// Global system handlers for demo coordination
on system.start (event)
{
    print("üöÄ Google Custom Search Demo Starting...");
    emit demo.initialize;
}

on demo.initialize (event)
{
    var searchAgent = new GoogleSearchAgent({ name: "GoogleSearcher" });
    
    print("‚è±Ô∏è Initializing search demo with proper timing coordination...");
    
    // Timer pattern to ensure agent is fully initialized
    await {
        reason: "agent_initialization_complete",
        context: "Ensure GoogleSearchAgent is fully ready before starting search",
        minDurationMs: 1000,
        maxDurationMs: 2000,
        handlers: [ search.demo.start ]
    };
}

on search.demo.start (event)
{
    print("üöÄ Starting first search test...");
    
    // Test single search
    emit search.request { query: "artificial intelligence consciousness" };
    
    // Timer pattern to wait for first search to complete before scheduling advanced demo
    await {
        reason: "first_search_completion_wait",
        context: "Wait for initial search to complete before starting advanced demo",
        minDurationMs: 8000,
        maxDurationMs: 12000,
        handlers: [ demo.advanced.schedule ]
    };
}

on demo.advanced.schedule (event)
{
    print("üìÖ Scheduling advanced search demo...");
    
    // Schedule advanced search test
    await {
        reason: "demo_progression",
        context: "Wait before starting advanced search demo",
        minDurationMs: 3000,
        maxDurationMs: 5000,
        handlers: [ demo.advanced.start ]
    };
}

on demo.advanced.start (event)
{
    print("\nüß† Starting Advanced Multi-Query Search Demo...");
    emit web.search.advanced;
}

on search.demo.complete (event)
{
    print("‚úÖ Individual search complete, results processed");
}

// Graceful shutdown after demo
on system.any.complete (event)
{
    await {
        reason: "demo_completion_delay",
        context: "Allow time to review all search results",
        minDurationMs: 10000,
        maxDurationMs: 12000,
        handlers: [ system.shutdown.ready ]
    };
}

on system.shutdown.ready (event)
{
    print("üéØ Google Custom Search Demo Complete!");
    print("Press any key to exit...");
}
