//
// Filename: vector_database_rag_test.cx
// Description: Demonstrates the complete Retrieval-Augmented Generation (RAG) workflow.
// 1. Ingests data into the vector database.
// 2. Fetches relevant data based on a query.
// 3. Uses a TextGeneration AI to reason over the fetched data.
//
// Expected Outcome: The script should successfully ingest, fetch, and reason,
// printing a coherent answer generated by the AI based on the context.
//

// Import the necessary AI services from the standard library
using vectorDB from "Cx.AI.VectorDatabase";
using textGen from "Cx.AI.TextGeneration";

function main()
{
    print("üöÄ Starting RAG Workflow Test...");

    try
    {
        // 1. Ingest Data: Store a document into the vector database.
        var docId = "cx-language-description-001";
        var docContent = "CX is an AI-native agentic programming language designed for autonomous workflows. It is built on .NET 8 and features a standard library of AI services.";
        
        print("   1. Ingesting knowledge...");
        vectorDB.IngestTextAsync(docContent, docId);
        print("      ‚úÖ Knowledge ingested successfully.");

        // 2. Ask a Question using the RAG capability
        var userQuery = "What is the CX language?";
        print("   2. Asking a question to the RAG service...");
        
        var finalAnswer = vectorDB.AskAsync(userQuery);
        print("      ‚úÖ RAG service has generated the final answer.");
        
        // 3. Print the final result
        print("\nüéâ RAG Workflow Complete! Final Answer:");
        print("-----------------------------------------");
        print(finalAnswer);
        print("-----------------------------------------");
    }
    catch (e)
    {
        print("‚ùå An error occurred during the RAG workflow: " + e);
    }
}

main();
