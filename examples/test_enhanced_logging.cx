// Test file for enhanced logging of code injection and runtime function calls

// This will demonstrate the complete pipeline:
// 1. AI generates code for a mathematical function
// 2. Code gets compiled and injected into runtime
// 3. The injected function gets called and executed

print("=== Enhanced Logging Test ===");
print("Testing the complete code injection pipeline with detailed logging");

// Test 1: Generate and inject a simple function
print("\n--- Test 1: Simple Mathematical Function ---");
var result1 = adapt("Create a function called 'square' that takes a number and returns its square, then call it with 5");
print("Adapt result: " + result1);

// Test 2: Generate and inject a more complex function  
print("\n--- Test 2: Complex Mathematical Function ---");
var result2 = adapt("Create a function called 'fibonacci' that calculates the nth Fibonacci number using iteration, then call it with 10");
print("Adapt result: " + result2);

// Test 3: Try to call an injected function (if it exists)
print("\n--- Test 3: Calling Injected Function ---");
try 
{
    // This should call the injected function if it exists
    var squareResult = square(7);
    print("Square of 7: " + squareResult);
}
catch (error)
{
    print("Could not call square function: " + error);
}

// Test 4: Generate a function that uses other AI functions
print("\n--- Test 4: AI Function Integration ---");
var result3 = adapt("Create a function called 'aiHelper' that takes a question and uses the reason function to provide an answer");
print("Adapt result: " + result3);

print("\n=== Enhanced Logging Test Complete ===");
