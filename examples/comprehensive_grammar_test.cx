// Comprehensive Grammar Test - Exercises All Cx Language Features
// This script demonstrates every grammar construct implemented in Cx

// Import statements for AI services
using OpenAI from "azure-openai";
using Analytics from "azure-analytics";

// Variable declarations with different types
var greeting = "Hello, Cx Language!";
var count = 42;
var isActive = true;
var nothing = null;

// Function declarations with optional parameter types
function simpleFunction() 
{
    return "Simple function result";
}

function typedFunction(name: string, age: number) -> string 
{
    return "Typed function with " + name + " age " + age;
}

function untypedFunction(x, y) 
{
    return x + y;
}

async function asyncFunction(data) 
{
    var result = await synthesize("Process this data", 
        model: "gpt-4",
        temperature: 0.7
    );
    return result;
}

// Control flow statements
if (count > 40) 
{
    var message = "Count is high";
}
else 
{
    var message = "Count is low";
}

// While loop
var i = 0;
while (i < 3) 
{
    i += 1;
}

// For-in loop with variable declaration
var items = ["apple", "banana", "cherry"];
for (var item in items) 
{
    var processed = item + " processed";
}

// For-in loop with existing variable
var element = "";
for (element in items) 
{
    var current = element;
}

// Exception handling
try 
{
    var riskyData = new Object();
    throw new Error("Something went wrong");
} 
catch (error) 
{
    var errorMessage = "Caught error: " + error;
}

// Assignment operators
var total = 100;
total += 50;    // Addition assignment
total -= 25;    // Subtraction assignment
total *= 2;     // Multiplication assignment
total /= 4;     // Division assignment

// Object and array literals
var config = {
    name: "Configuration",
    version: 1.0,
    enabled: true
};

var numbers = [1, 2, 3, 4, 5];
var mixed = ["text", 42, true, null];

// Expression types
var arithmetic = 10 + 5 * 2 - 8 / 4;
var comparison = (total > 50) && (count <= 100);
var logical = !isActive || (count != 0);
var relational = greeting == "Hello" && numbers[0] < 10;

// Member access and function calls
var length = greeting.length;
var upperCase = greeting.toUpperCase();
var firstNumber = numbers[0];
var result = simpleFunction();

// Unary expressions
var negative = -count;
var positive = +total;
var inverted = !isActive;

// New expressions for object creation
var newObject = new Object();
var customType = new CustomClass("parameter");

// AI-native functions - all types
var taskResult = task("Analyze the data", 
    priority: "high",
    timeout: 30
);

var synthesizedContent = synthesize("Create a summary", 
    format: "markdown",
    length: "brief",
    tone: "professional"
);

var reasoning = reason("What is the best approach?", 
    maxIterations: 5,
    confidence: 0.8
);

var processedData = process("image", "/path/to/image.jpg", 
    operation: "enhance",
    quality: "high"
);

var generatedCode = generate("Create a function", 
    language: "javascript",
    style: "functional"
);

var embeddings = embed("Text to embed", 
    model: "text-embedding-3-small",
    dimensions: 512
);

var adaptedCode = adapt("Optimize this algorithm", 
    target: "performance",
    constraints: ["memory", "speed"]
);

// Complex expressions combining multiple features
var complexResult = synthesize("Complex analysis", 
    model: await task("Select best model"),
    parameters: {
        temperature: 0.5 + (total / 100),
        maxTokens: count * 10
    }
);

// Nested function calls and expressions
var nested = upperCase.substring(0, embed(greeting).length);
var chained = numbers[total % 5].toString();

// Await and parallel expressions
async function demonstrateAsync() 
{
    var sequential = await synthesize("First task");
    var concurrent = parallel synthesize("Parallel task");
    
    return sequential + concurrent;
}

// Block statements and nested scopes
{
    var blockScoped = "Inside block";
    
    {
        var deeplyNested = blockScoped + " deeply";
    }
}

// Return statements
function earlyReturn(condition) 
{
    if (condition) 
    {
        return "Early exit";
    }
    
    var processing = "Continue processing";
    return processing;
}

function voidReturn() 
{
    var sideEffect = "Performing side effect";
    return;
}

// Expression statements
total;
greeting.toUpperCase();
numbers[0] + numbers[1];

// Comprehensive type usage
function allTypes(
    str: string,
    num: number, 
    bool: boolean,
    arr: array<string>,
    obj: object,
    data: object,
    custom: CustomType
) -> object 
{
    return {
        stringValue: str,
        numberValue: num,
        booleanValue: bool,
        arrayValue: arr,
        objectValue: obj,
        listValue: [],
        customValue: custom
    };
}

// AI function composition and advanced usage
var compositeAI = synthesize(
    reason("What should I synthesize?", maxDepth: 3),
    format: process("text", "format-template", style: "academic"),
    validation: embed("quality-check")
);

// Final complex example combining everything
async function masterExample(input: object) -> object 
{
    try 
    {
        var analyzed = await reason(input.toString(), iterations: 5);
        var enhanced = new Map();
        
        for (var key in analyzed.properties) 
        {
            enhanced[key] = synthesize(analyzed.properties[key], 
                quality: "premium",
                style: await adapt("determine best style")
            );
        }
        
        var finalResult = {
            original: input,
            analysis: analyzed,
            enhanced: enhanced,
            metadata: {
                timestamp: new Date(),
                version: 2.1,
                processed: true
            }
        };
        
        return finalResult;
        
    } 
    catch (processingError) 
    {
        throw new ProcessingException("Failed to process: " + processingError);
    }
}

// Test all grammar constructs are working
var grammarTest = "All Cx language features tested successfully!";
