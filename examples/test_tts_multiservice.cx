// Test specifically the Text-to-Speech service with EastUS2 configuration

function testTTSService()
{
    print("=== Testing Text-to-Speech Service (gpt-4o-mini-tts) ===");
    print("Expected routing: EastUS2 ‚Üí gpt-4o-mini-tts with API version 2024-10-01");
    print("");
    
    try
    {
        var speechText = "Hello! This is Aura CX, testing the new multi-service configuration with model-specific API versions.";
        print("Input Text: " + speechText);
        print("Generating speech...");
        
        var speechResponse = textToSpeech.SynthesizeAsync(speechText);
        print("‚úÖ Text-to-Speech SUCCESS!");
        print("Response: " + speechResponse);
        
        return true;
    }
    catch (error)
    {
        print("‚ùå Text-to-Speech FAILED: " + error);
        return false;
    }
}

function testChatService()
{
    print("=== Testing Chat Completion Service (gpt-4.1-nano) ===");
    print("Expected routing: EastUS ‚Üí gpt-4.1-nano with API version 2024-10-21");
    print("");
    
    try
    {
        var response = chatBot.CompleteAsync(
            "You are a helpful AI assistant.",
            "Explain the benefits of multi-service AI architecture in one sentence."
        );
        print("‚úÖ Chat Completion SUCCESS!");
        print("Response: " + response);
        
        return true;
    }
    catch (error)
    {
        print("‚ùå Chat Completion FAILED: " + error);
        return false;
    }
}

// Test the services
print("üöÄ TARGETED AI SERVICES TEST");
print("============================");
print("");

var ttsResult = testTTSService();
print("");

var chatResult = testChatService();
print("");

print("=== RESULTS ===");
if (ttsResult)
{
    print("‚úÖ TTS Service: Working with model-specific API version!");
}
else
{
    print("‚ùå TTS Service: Needs configuration adjustment");
}

if (chatResult)
{
    print("‚úÖ Chat Service: Working with model-specific API version!");
}
else
{
    print("‚ùå Chat Service: Needs configuration adjustment");
}

if (ttsResult && chatResult)
{
    print("");
    print("üéâ SUCCESS! Multi-service configuration with model-specific API versions is working!");
    print("‚úÖ Service routing based on ServiceSelection is functional");
    print("‚úÖ Model-specific API versions are being applied correctly");
}
else
{
    print("");
    print("‚ö†Ô∏è  Some services need configuration adjustments");
}
