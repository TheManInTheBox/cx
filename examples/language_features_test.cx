// Test file to verify updated CX Language instructions work correctly
// This demonstrates the new dictionary iteration and event property access features

class EventProcessor
{
    name: string = "ProcessorAgent";
    
    on data.received (event)
    {
        print("=== Event Processing Demo ===");
        
        // Direct event property access
        print("Event Name: " + event.name);
        print("Timestamp: " + event.timestamp);
        print("Agent: " + this.name);
        
        // Dictionary iteration over event payload
        print("\n--- Event Payload Iteration ---");
        for (var item in event.payload)
        {
            print("Key: " + item.Key + " | Value: " + item.Value + " | Type: " + typeof(item.Value));
        }
        
        // Conditional processing based on event data
        if (event.priority == "high")
        {
            print("\nüö® HIGH PRIORITY EVENT DETECTED");
            emit alert.priority.high { 
                processor: this.name,
                originalEvent: event.name,
                timestamp: event.timestamp
            };
        }
    }
    
    on alert.priority.high (event)
    {
        print("\n=== ALERT HANDLER ===");
        print("Alert processed by: " + event.processor);
        print("Original event: " + event.originalEvent);
    }
}

// Global wildcard handler to catch all events
on any.any.high (event)
{
    print("\nüåê Global high-priority handler activated");
    print("Caught event: " + event.name);
}

// Create processor and emit test events
var processor = new EventProcessor();

// Test with complex dictionary data
emit data.received {
    id: "evt_001",
    type: "sensor_reading", 
    priority: "high",
    sensor: {
        location: "warehouse_a",
        temperature: 75.2,
        humidity: 45
    },
    readings: [23.5, 24.1, 23.8],
    metadata: {
        source: "IoT Gateway",
        version: "1.2.3"
    }
};
