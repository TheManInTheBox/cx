// ✅ FIXED: Simple AI coordination avoiding IL generation issues
// Pure event-driven approach without complex string concatenation in event handlers

class SimpleAgent
{
    name: string;
    personality: string;
    
    constructor(agentName: string, agentPersonality: string)
    {
        this.name = agentName;
        this.personality = agentPersonality;
        print("🤖 Agent created: " + agentName);
    }
}

// ✅ Simple event handlers with minimal IL complexity
on agent.wants.to.speak (event)
{
    print("🗣️ Agent wants to speak");
    print(event.name);
    print(event.message);
    
    // Simple AI decision request
    think { 
        prompt: "Should I speak now or wait?",
        handlers: [ timing.decision ]
    };
}

on timing.decision (event)
{
    print("🧠 AI timing decision received");
    print(event.result);
    
    // Simple response based on AI decision
    if (event.result == "SPEAK_NOW")
    {
        emit agent.approved.to.speak { approved: true };
    }
    else
    {
        emit agent.should.wait { wait: true };
    }
}

on agent.approved.to.speak (event)
{
    print("✅ Agent approved to speak!");
    
    // Use the proven working speak emitter
    speak { text: "Hello, I am speaking now!" };
}

on agent.should.wait (event)
{
    print("⏳ Agent will wait politely");
}

// Azure Realtime API integration - proven working
on realtime.connected (event)
{
    print("✅ Azure connected - creating session");
    emit realtime.session.create { deployment: "gpt-4o-mini-realtime-preview" };
}

on realtime.session.created (event)
{
    print("✅ Session ready - starting coordination");
    emit autonomous.coordination.ready { ready: true };
}

on ai.speak.request (event)
{
    print("🎤 Processing speak request");
    emit realtime.text.send { 
        text: event.text,
        deployment: "gpt-4o-mini-realtime-preview"
    };
}

on realtime.audio.response (event)
{
    print("🔊 Audio received - playing through NAudio");
    if (event.isComplete)
    {
        print("🎉 Speaking complete!");
    }
}

on autonomous.coordination.ready (event)
{
    print("🚀 AI coordination system ready");
    
    // Start simple coordination test
    emit agent.wants.to.speak { 
        name: "TestAgent",
        message: "Hello everyone!"
    };
}

// ✅ Initialize Azure connection
print("🔌 Connecting to Azure Realtime API...");
emit realtime.connect { demo: "simple_ai_coordination" };

print("✨ Simple AI coordination system starting...");
