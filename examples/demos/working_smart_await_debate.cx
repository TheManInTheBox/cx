// SMART AWAIT DEBATE DEMO - Working Version
// Two AI agents debating with turn-based order and optimized timing
// Features: Smart await coordination, slowed speech (-10%), real-time audio

print("🎭 Smart Await Debate Demo");
print("Turn-Based AI Agent Debate System");
print("=================================");

class DebateAgent
{
    name: string;
    position: string;
    speechSpeed: number = 0.9; // 10% slower speech
    
    constructor(agentName: string, debatePosition: string)
    {
        this.name = agentName;
        this.position = debatePosition;
        print("🎯 " + this.name + " created - Position: " + this.position);
        print("  Speech speed: " + this.speechSpeed + " (10% slower)");
    }
    
    function startArgument(turnNum: number)
    {
        print("🎤 " + this.name + " starting turn " + turnNum);
        
        // ✅ SMART AWAIT: Optimal preparation timing before speaking
        await { 
            reason: "preparation_" + this.name + "_turn_" + turnNum,
            context: "Agent " + this.name + " preparing argument for turn " + turnNum,
            minDurationMs: 1000,
            maxDurationMs: 2500,
            handlers: [ debate.preparation.ready ]
        };
    }
    
    function speakArgument()
    {
        print("💬 " + this.name + " (" + this.position + ") making argument");
        
        // Connect to Azure Realtime API for speech synthesis
        emit realtime.connect { 
            demo: "debate_" + this.name.toLowerCase(),
            agent: this.name,
            speechSpeed: this.speechSpeed
        };
    }
    
    // ✅ PREPARATION READY: Start speaking after smart await
    on debate.preparation.ready (event)
    {
        if (event.reason.indexOf(this.name) >= 0)
        {
            print("🧠 " + this.name + " preparation complete (" + event.actualDurationMs + "ms)");
            this.speakArgument();
        }
    }
    
    // ✅ AZURE REALTIME: Connection handler
    on realtime.connected (event)
    {
        if (event.agent == this.name)
        {
            print("🔗 " + this.name + " connected to Azure Realtime API");
            
            emit realtime.session.create { 
                deployment: "gpt-4o-mini-realtime-preview",
                mode: "voice",
                voice: "alloy",
                agent: this.name,
                speechSpeed: this.speechSpeed
            };
        }
    }
    
    // ✅ SESSION CREATED: Start speaking
    on realtime.session.created (event)
    {
        if (event.agent == this.name)
        {
            print("🎙️ " + this.name + " voice session ready - speaking argument");
            
            var debateText = "Hello, I am " + this.name + " representing the " + this.position + " position in this debate about AI in society.";
            
            emit realtime.text.send { 
                text: debateText,
                deployment: "gpt-4o-mini-realtime-preview",
                voice: "alloy",
                speed: this.speechSpeed,
                agent: this.name
            };
        }
    }
    
    // ✅ AUDIO RESPONSE: Handle speech with slowed speed
    on realtime.audio.response (event)
    {
        if (event.agent == this.name)
        {
            print("🔊 " + this.name + " audio response (speed: " + this.speechSpeed + ")");
            
            if (event.audioData != null)
            {
                emit audio.stream.direct { 
                    audioData: event.audioData,
                    format: "pcm16_24khz",
                    autoPlay: true,
                    source: "debate_" + this.name,
                    speechSpeed: this.speechSpeed,
                    agent: this.name
                };
            }
            
            if (event.isComplete)
            {
                print("✅ " + this.name + " speech synthesis complete");
                
                // ✅ SMART AWAIT: Post-speech pause
                await { 
                    reason: "post_speech_" + this.name,
                    context: "Natural pause after " + this.name + " completes speech",
                    minDurationMs: 1000,
                    maxDurationMs: 2000,
                    handlers: [ speech.pause.complete ]
                };
            }
        }
    }
    
    // ✅ SPEECH PAUSE: Complete turn after pause
    on speech.pause.complete (event)
    {
        if (event.reason.indexOf(this.name) >= 0)
        {
            print("🎉 " + this.name + " turn complete (" + event.actualDurationMs + "ms pause)");
            
            emit agent.turn.finished { 
                agent: this.name,
                position: this.position,
                speechSpeed: this.speechSpeed
            };
        }
    }
}

// ✅ GLOBAL SMART AWAIT HANDLERS
on await.smart.complete (event)
{
    print("🧠 Smart await optimization complete:");
    print("  Reason: " + event.reason);
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Context: " + event.context);
}

on await.completed (event)
{
    print("⏰ Await completed:");
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Success: " + event.success);
}

// ✅ AUDIO STREAMING HANDLERS
on audio.stream.direct (event)
{
    if (event.agent)
    {
        print("🔊 Audio streaming for " + event.agent + " (speed: " + event.speechSpeed + ")");
    }
}

// ✅ TURN MANAGEMENT: Global turn coordination
var currentTurn = 1;
var maxTurns = 4;

// Create debate agents at global scope
var aliceAgent = new DebateAgent("Alice", "Pro-AI");
var bobAgent = new DebateAgent("Bob", "Cautious-AI");

on agent.turn.finished (event)
{
    print("✅ Turn " + currentTurn + " finished by " + event.agent + " (" + event.position + ")");
    
    currentTurn = currentTurn + 1;
    
    if (currentTurn > maxTurns)
    {
        print("");
        print("🏁 SMART AWAIT DEBATE COMPLETE!");
        print("📊 Total turns: " + (currentTurn - 1));
        print("🎭 Participants: Alice (Pro-AI) vs Bob (Cautious-AI)");
        print("✅ Smart await timing optimization demonstrated successfully");
        
        emit debate.complete { 
            totalTurns: currentTurn - 1,
            topic: "The role of AI in society"
        };
    }
    else
    {
        // ✅ SMART AWAIT: Inter-turn pause for natural flow
        await { 
            reason: "inter_turn_pause",
            context: "Natural pause between debate turns for better flow",
            minDurationMs: 1500,
            maxDurationMs: 2500,
            handlers: [ inter.turn.ready ]
        };
    }
}

on inter.turn.ready (event)
{
    print("⏳ Inter-turn pause complete (" + event.actualDurationMs + "ms)");
    print("🎯 === TURN " + currentTurn + " ===");
    
    // Alternate between agents
    if (currentTurn % 2 == 1)
    {
        print("🎤 Alice's turn");
        aliceAgent.startArgument(currentTurn);
    }
    else
    {
        print("🎤 Bob's turn");
        bobAgent.startArgument(currentTurn);
    }
}

on debate.complete (event)
{
    print("🏆 FINAL DEBATE RESULTS:");
    print("  Topic: " + event.topic);
    print("  Turns completed: " + event.totalTurns);
    print("🎭 Smart await debate demonstration successful!");
}

// 🚀 START THE SMART AWAIT DEBATE
print("🎭 SMART AWAIT DEBATE DEMO:");
print("✅ Speech speed: 90% (10% slower)");
print("✅ Turn-based coordination with smart await");
print("✅ Real-time audio synthesis with Azure OpenAI");
print("✅ Optimized timing between all phases");
print("");

print("🚀 Starting debate initialization...");

// ✅ SMART AWAIT: Initial debate startup timing
await { 
    reason: "debate_startup",
    context: "Optimizing timing for debate initialization",
    minDurationMs: 2000,
    maxDurationMs: 3000,
    handlers: [ debate.start ]
};

on debate.start (event)
{
    print("🎬 Debate initialization complete (" + event.actualDurationMs + "ms)");
    print("🎯 Starting Turn 1...");
    
    // Start first turn with Alice
    aliceAgent.startArgument(1);
}

print("🚀 Smart await debate system initialized!");
print("⏰ Watch for optimized timing coordination...");
