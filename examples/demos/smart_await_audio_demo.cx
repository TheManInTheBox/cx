// ✅ WORKING SMART AWAIT DEMO WITH AUDIO PLAYBACK
// Class-based approach with proper instance scope

print("🎭 Smart Await Demo with Audio Playback");
print("AI-Optimized Timing + Real Audio Output");
print("=========================================");

class SmartAwaitAgent
{
    name: string;
    speechSpeed: number = 0.9; // 10% slower
    currentPhase: string = "initializing";
    
    constructor(agentName: string)
    {
        this.name = agentName;
        print("🎯 Agent: " + this.name + " (Speech Speed: " + this.speechSpeed + " = 10% slower)");
        print("🚀 Starting smart await demonstration...");
        this.startDemo();
    }
    
    function startDemo()
    {
        // ✅ PHASE 1: Smart preparation timing
        print("📋 Phase 1: Smart preparation timing...");
        await {
            reason: "demo_preparation_" + this.name,
            context: "Agent " + this.name + " preparing for smart await demonstration",
            minDurationMs: 1000,
            maxDurationMs: 3000,
            handlers: [preparation.complete]
        };
    }

    // ✅ CLASS-BASED EVENT HANDLERS (proper instance scope)
    on preparation.complete (event)
    {
        print("🧠 Preparation optimized (" + event.actualDurationMs + "ms)");
        print("  AI determined optimal timing for: " + event.reason);
        
        this.currentPhase = "speech_timing";
        print("📋 Phase 2: Speech timing optimization...");
        
        // Phase 2: Speech timing await
        await {
            reason: "speech_timing_" + this.name,
            context: "Optimizing speech synthesis timing with " + this.speechSpeed + " speed",
            minDurationMs: 800,
            maxDurationMs: 2000,
            handlers: [speech.timing.ready]
        };
    }

    on speech.timing.ready (event)
    {
        print("🎙️ Speech timing optimized (" + event.actualDurationMs + "ms)");
        print("  Ready for voice synthesis at " + this.speechSpeed + " speed");
        
        this.currentPhase = "voice_synthesis";
        print("📋 Phase 3: Azure Realtime voice synthesis...");
        
        // Connect to Azure Realtime API
        emit realtime.connect {
            demo: "smart_await_audio",
            agent: this.name,
            speechSpeed: this.speechSpeed
        };
    }

    on realtime.connected (event)
    {
        print("🔗 Connected to Azure Realtime API");
        
        emit realtime.session.create {
            deployment: "gpt-4o-mini-realtime-preview",
            mode: "voice",
            voice: "alloy"
        };
    }

    on realtime.session.created (event)
    {
        print("🎙️ Voice session ready - starting synthesis");
        
        var message = "Hello! I am " + this.name + " demonstrating smart await with optimized timing. My speech is 10% slower for better clarity and coordination.";
        
        emit realtime.text.send {
            text: message,
            deployment: "gpt-4o-mini-realtime-preview",
            voice: "alloy",
            speed: this.speechSpeed
        };
    }

    on realtime.text.response (event)
    {
        if (event.isComplete)
        {
            print("🎤 Text synthesis complete: " + event.content);
            this.currentPhase = "completion";
        }
    }

    on realtime.audio.response (event)
    {
        if (event.audioData != null)
        {
            print("🔊 Audio received: " + event.audioSize + " bytes (" + event.audioFormat + "/" + event.sampleRate + "Hz)");
            
            // ✅ IMPORTANT: Stream audio with proper data
            emit audio.stream.direct {
                audioData: event.audioData,
                format: event.audioFormat,
                sampleRate: event.sampleRate,
                autoPlay: true,
                source: "smart_await_demo",
                agent: this.name,
                speechSpeed: this.speechSpeed
            };
        }
        
        if (event.isComplete)
        {
            print("✅ Voice synthesis complete!");
            
            // Phase 4: Completion timing
            print("📋 Phase 4: Demo completion timing...");
            await {
                reason: "demo_completion_" + this.name,
                context: "Final smart await optimization for completion",
                minDurationMs: 1000,
                maxDurationMs: 2500,
                handlers: [demo.complete]
            };
        }
    }

    on demo.complete (event)
    {
        print("🎉 Demo completion optimized (" + event.actualDurationMs + "ms)");
        this.currentPhase = "finished";
        
        emit agent.demo.finished {
            agent: this.name,
            speechSpeed: this.speechSpeed,
            totalOptimizations: 3,
            success: true,
            phase: this.currentPhase
        };
    }
}

// ✅ SMART AWAIT EVENT TRACKING
on await.smart.complete (event)
{
    print("🧠 Smart await optimization:");
    print("  Reason: " + event.reason);
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Context: " + event.context);
    print("  ✅ AI determined optimal timing");
}

on await.completed (event)
{
    print("⏰ Await completed:");
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Success: " + event.success);
}

// ✅ AUDIO PLAYBACK CONFIRMATION
on audio.stream.direct (event)
{
    print("🔊 Audio streaming to NAudio:");
    print("  Agent: " + event.agent);
    print("  Speed: " + event.speechSpeed + " (10% slower)");
    print("  Format: " + event.format);
    print("  Source: " + event.source);
    print("  🎵 Audio should now be playing through speakers!");
}

// ✅ FINAL RESULTS
on agent.demo.finished (event)
{
    print("");
    print("🏆 SMART AWAIT DEMO COMPLETED!");
    print("================================");
    print("  Agent: " + event.agent);
    print("  Speech Speed: " + event.speechSpeed + " (10% slower)");
    print("  Total Optimizations: " + event.totalOptimizations);
    print("  Final Phase: " + event.phase);
    print("  Success: " + event.success);
    print("");
    print("🎯 FEATURES DEMONSTRATED:");
    print("  ✅ AI-determined optimal timing");
    print("  ✅ Real-time audio synthesis");
    print("  ✅ 10% slower speech for clarity");
    print("  ✅ NAudio integration for playback");
    print("  ✅ Event-driven coordination");
    print("  ✅ Azure OpenAI Realtime API");
    print("");
    print("🎉 Demo complete - you should have heard Alice speaking!");
}

print("");
print("🚀 Smart await system initialized!");
print("⏰ Watch for AI-optimized timing and listen for audio playback...");
