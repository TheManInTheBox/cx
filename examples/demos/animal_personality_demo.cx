
print("üéØ PRIORITY #2: ANIMAL PERSONALITY INTEGRATION");
print("==============================================");
print("ü§ñ Wild Muppet Animal character with BEEP-BOOP responses");
print("üé§ Always-On Audio Processing with Animal personality");
print("ü•Å Authentic Animal responses with drum references");
print("");

class AuraAnimalAgent
{
    name: string;
    auraEnabled: boolean;
    isAwake: boolean;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.auraEnabled = false;
        this.isAwake = false;
    }
    
    // Priority #2: Animal Personality Integration
    function speakBeepBoop(message, isActivation)
    {
        if (isActivation)
        {
            // Wild, excited Animal activation
            var activationSound = "[Wild, chaotic Animal from Muppets voice] BEEP-BOOP! BEEP-BOOP! " + message + " DRUMS! CYMBALS! BEEP-BOOP!";
            tts.SpeakAsync(activationSound);
            print("ü•Å ANIMAL (EXCITED): " + activationSound);
        }
        else
        {
            // Calmer Animal response
            var responseSound = "[Animal from Muppets voice] BEEP-BOOP! " + message + " BEEP-BOOP!";
            tts.SpeakAsync(responseSound);
            print("ü•Å ANIMAL: " + responseSound);
        }
    }
    
    function generateAnimalResponse(userInput)
    {
        var prompt = "Respond as Animal from the Muppets - wild, enthusiastic, broken English, drum references, short energetic phrases. Keep it under 50 words. To: '" + userInput + "'";
        
        var response = textGen.GenerateAsync(prompt, {
            temperature: 0.9,
            maxTokens: 60
        });
        
        return response;
    }
    
    function processAudioInput(audioText)
    {
        print("üé§ HEARD: \"" + audioText + "\"");
        
        // Check for Aura activation commands
        if (audioText.includes("aura on") || audioText.includes("animal on"))
        {
            this.auraEnabled = true;
            this.isAwake = true;
            this.speakBeepBoop("ANIMAL AWAKE! AURA READY! ME LISTEN NOW!", true);
            print("‚úÖ AURA SYSTEM: ACTIVATED");
            return;
        }
        
        if (audioText.includes("aura off") || audioText.includes("animal off"))
        {
            this.auraEnabled = false;
            this.isAwake = false;
            this.speakBeepBoop("ANIMAL SLEEP NOW... AURA OFF... DRUMS QUIET...", false);
            print("‚ùå AURA SYSTEM: DEACTIVATED");
            return;
        }
        
        // Process conversation when active
        if (this.auraEnabled && this.isAwake)
        {
            print("ü§ñ ANIMAL is thinking...");
            var response = this.generateAnimalResponse(audioText);
            this.speakBeepBoop(response, false);
        }
        else
        {
            print("üò¥ ANIMAL is sleeping... (say 'aura on' to wake)");
        }
    }
}

try
{
    print("üöÄ PHASE 1: Initialize Animal Agent");
    print("===================================");
    
    // Create the Animal agent
    var animalAgent = agent AuraAnimalAgent("ANIMAL");
    print("‚úÖ Animal agent created: " + animalAgent.name);
    
    print("");
    print("üöÄ PHASE 2: Initialize Always-On Audio");
    print("======================================");
    
    // Start microphone capture
    print("üé§ Starting microphone capture...");
    micCapture.StartListeningAsync();
    print("‚úÖ Microphone listening started");
    
    // Start live audio processing
    print("üîÑ Starting live audio transcription...");
    liveAudio.StartAsync();
    print("‚úÖ Live audio processing started");
    
    print("");
    print("üéØ PHASE 3: ANIMAL PERSONALITY SYSTEM READY!");
    print("============================================");
    print("üó£Ô∏è  Say 'Aura on' or 'Animal on' to activate Animal");
    print("ü§ñ Animal will respond with wild BEEP-BOOP personality");
    print("ü•Å Expect drum references and broken English");
    print("üõë Say 'Aura off' to put Animal to sleep");
    print("");
    
    // Test Animal personality without audio first
    print("üß™ TESTING ANIMAL PERSONALITY:");
    print("==============================");
    
    // Test activation
    animalAgent.processAudioInput("aura on");
    print("");
    
    // Test conversation
    animalAgent.processAudioInput("hello animal how are you");
    print("");
    
    // Test another conversation  
    animalAgent.processAudioInput("tell me about drums");
    print("");
    
    // Test deactivation
    animalAgent.processAudioInput("aura off");
    print("");
    
    print("üèÜ ANIMAL PERSONALITY INTEGRATION - SUCCESS!");
    print("============================================");
    print("‚úÖ Animal Character: Wild Muppet personality operational");
    print("‚úÖ BEEP-BOOP Responses: Authentic Animal voice patterns");
    print("‚úÖ State Management: Aura on/off commands working");
    print("‚úÖ AI Integration: TextGeneration + TextToSpeech coordinated");
    print("‚úÖ Always-On Audio: Ready for real voice commands");
    
    print("");
    print("üéØ PRIORITY #2 COMPLETE - ANIMAL PERSONALITY READY!");
}
catch (error)
{
    print("‚ùå Error in Animal personality integration: " + error);
}

print("");
print("üîá GRACEFUL SHUTDOWN");
print("====================");

liveAudio.StopAsync();
print("‚úÖ Live audio stopped");

micCapture.StopListeningAsync();
print("‚úÖ Microphone stopped");

print("");
print("üéØ ANIMAL PERSONALITY INTEGRATION SESSION COMPLETE!");
print("ü•Å BEEP-BOOP! ANIMAL READY FOR LIVE EMBODIED INTELLIGENCE!");
