// SIMPLIFIED SMART AWAIT DEBATE DEMO
// Two AI agents debating with turn-based order and optimized timing
// Features: Smart await coordination, slowed speech (-10%), real-time audio

print("🎭 Smart Await Debate Demo - Simplified");
print("Turn-Based AI Agent Debate System");
print("=================================");

class SimpleDebateAgent
{
    name: string;
    position: string;
    turnNumber: number = 0;
    speechSpeed: number = 0.9; // 10% slower speech
    
    constructor(agentName: string, debatePosition: string)
    {
        this.name = agentName;
        this.position = debatePosition;
        print("🎯 " + this.name + " created - Position: " + this.position);
        print("  Speech speed: " + this.speechSpeed + " (10% slower)");
    }
    
    function startTurn(turnNum: number)
    {
        this.turnNumber = turnNum;
        print("🎤 " + this.name + " starting turn " + turnNum);
        
        // ✅ SMART AWAIT: Optimal preparation timing before speaking
        await { 
            reason: "debate_preparation_" + this.name + "_turn_" + turnNum,
            context: "Agent " + this.name + " preparing argument for turn " + turnNum,
            minDurationMs: 1000,
            maxDurationMs: 2500,
            handlers: [ preparation.complete ]
        };
    }
    
    function makeArgument()
    {
        print("💬 " + this.name + " (" + this.position + ") making argument:");
        
        var argumentText = "As the " + this.position + " advocate, I believe this perspective is crucial for our discussion.";
        print("  Argument: " + argumentText);
        
        // ✅ SMART AWAIT: Timing before speech synthesis
        await { 
            reason: "speech_preparation_" + this.name,
            context: "Preparing speech synthesis for " + this.name + " with " + this.speechSpeed + " speed",
            minDurationMs: 500,
            maxDurationMs: 1500,
            handlers: [ speech.ready ]
        };
    }
    
    function synthesizeSpeech(text: string)
    {
        print("🎤 " + this.name + " synthesizing speech (speed: " + this.speechSpeed + ")");
        
        // Connect to Azure Realtime API for speech
        emit realtime.connect { 
            demo: "debate_" + this.name.toLowerCase(),
            agent: this.name,
            speechSpeed: this.speechSpeed
        };
    }
    
    function finishTurn()
    {
        print("✅ " + this.name + " turn " + this.turnNumber + " complete");
        
        // ✅ SMART AWAIT: Post-turn pause for natural flow
        await { 
            reason: "post_turn_pause_" + this.name,
            context: "Natural pause after " + this.name + " completes turn",
            minDurationMs: 1000,
            maxDurationMs: 2000,
            handlers: [ turn.complete ]
        };
    }
    
    // ✅ SMART AWAIT: Preparation completion handler
    on preparation.complete (event)
    {
        if (event.reason.indexOf(this.name) >= 0)
        {
            print("🧠 " + this.name + " preparation complete (" + event.actualDurationMs + "ms)");
            this.makeArgument();
        }
    }
    
    // ✅ SPEECH READY: Speech synthesis ready handler
    on speech.ready (event)
    {
        if (event.reason.indexOf(this.name) >= 0)
        {
            print("🎙️ " + this.name + " speech ready (" + event.actualDurationMs + "ms)");
            var argumentText = "This is my " + this.position + " argument for the debate.";
            this.synthesizeSpeech(argumentText);
        }
    }
    
    // ✅ AZURE REALTIME: Connection handler
    on realtime.connected (event)
    {
        if (event.agent == this.name)
        {
            print("🔗 " + this.name + " connected to Azure Realtime API");
            
            emit realtime.session.create { 
                deployment: "gpt-4o-mini-realtime-preview",
                mode: "voice",
                voice: "alloy",
                agent: this.name,
                speechSpeed: this.speechSpeed
            };
        }
    }
    
    // ✅ SESSION CREATED: Start speaking
    on realtime.session.created (event)
    {
        if (event.agent == this.name)
        {
            print("🎙️ " + this.name + " voice session ready - speaking argument");
            
            var debateText = "Hello, I am " + this.name + " representing the " + this.position + " position in this debate.";
            
            emit realtime.text.send { 
                text: debateText,
                deployment: "gpt-4o-mini-realtime-preview",
                voice: "alloy",
                speed: this.speechSpeed,
                agent: this.name
            };
        }
    }
    
    // ✅ AUDIO RESPONSE: Handle speech with slowed speed
    on realtime.audio.response (event)
    {
        if (event.agent == this.name)
        {
            print("🔊 " + this.name + " audio response (speed: " + this.speechSpeed + ")");
            
            if (event.audioData != null)
            {
                emit audio.stream.direct { 
                    audioData: event.audioData,
                    format: "pcm16_24khz",
                    autoPlay: true,
                    source: "debate_" + this.name,
                    speechSpeed: this.speechSpeed,
                    agent: this.name
                };
            }
            
            if (event.isComplete)
            {
                print("✅ " + this.name + " speech complete");
                this.finishTurn();
            }
        }
    }
    
    // ✅ TURN COMPLETION: Handle turn completion
    on turn.complete (event)
    {
        if (event.reason.indexOf(this.name) >= 0)
        {
            print("🎉 " + this.name + " turn sequence complete (" + event.actualDurationMs + "ms pause)");
            
            emit agent.turn.finished { 
                agent: this.name,
                turnNumber: this.turnNumber,
                position: this.position
            };
        }
    }
}

// ✅ GLOBAL SMART AWAIT HANDLERS
on await.smart.complete (event)
{
    print("🧠 Smart await optimization complete:");
    print("  Reason: " + event.reason);
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Context: " + event.context);
}

on await.completed (event)
{
    print("⏰ Await completed:");
    print("  Duration: " + event.actualDurationMs + "ms");
    print("  Success: " + event.success);
}

// ✅ AUDIO STREAMING HANDLERS
on audio.stream.direct (event)
{
    if (event.agent)
    {
        print("🔊 Audio streaming for " + event.agent + " (speed: " + event.speechSpeed + ")");
    }
}

// ✅ TURN MANAGEMENT: Simple turn controller
var currentTurn = 1;
var maxTurns = 4;
var agent1 = null;
var agent2 = null;

function startDebate()
{
    print("🚀 Starting simplified smart await debate...");
    print("📝 Topic: The role of AI in society");
    print("🔄 Max turns: " + maxTurns);
    print("");
    
    // Create agents with slowed speech
    agent1 = new SimpleDebateAgent("Alice", "Pro-AI");
    agent2 = new SimpleDebateAgent("Bob", "Cautious-AI");
    
    // ✅ SMART AWAIT: Debate initialization timing
    await { 
        reason: "debate_initialization",
        context: "Optimizing timing for debate startup between Alice and Bob",
        minDurationMs: 2000,
        maxDurationMs: 3000,
        handlers: [ debate.start ]
    };
}

function nextTurn()
{
    if (currentTurn > maxTurns)
    {
        endDebate();
        return;
    }
    
    print("");
    print("🎯 === TURN " + currentTurn + " ===");
    
    // Alternate between agents
    if (currentTurn % 2 == 1)
    {
        print("🎤 Alice's turn");
        agent1.startTurn(currentTurn);
    }
    else
    {
        print("🎤 Bob's turn");
        agent2.startTurn(currentTurn);
    }
}

function endDebate()
{
    print("");
    print("🏁 SMART AWAIT DEBATE COMPLETE!");
    print("📊 Total turns: " + (currentTurn - 1));
    print("🎭 Participants: Alice (Pro-AI) vs Bob (Cautious-AI)");
    print("✅ Smart await timing optimization demonstrated successfully");
    
    emit debate.complete { 
        totalTurns: currentTurn - 1,
        agent1: "Alice",
        agent2: "Bob",
        topic: "The role of AI in society"
    };
}

// ✅ DEBATE FLOW HANDLERS
on debate.start (event)
{
    print("🎬 Debate initialization complete (" + event.actualDurationMs + "ms)");
    print("🎯 Starting Turn 1...");
    nextTurn();
}

on agent.turn.finished (event)
{
    print("✅ Turn " + event.turnNumber + " finished by " + event.agent + " (" + event.position + ")");
    
    currentTurn = currentTurn + 1;
    
    // ✅ SMART AWAIT: Inter-turn pause for natural flow
    await { 
        reason: "inter_turn_pause",
        context: "Natural pause between debate turns for better flow",
        minDurationMs: 1500,
        maxDurationMs: 2500,
        handlers: [ inter.turn.ready ]
    };
}

on inter.turn.ready (event)
{
    print("⏳ Inter-turn pause complete (" + event.actualDurationMs + "ms)");
    nextTurn();
}

on debate.complete (event)
{
    print("🏆 FINAL DEBATE RESULTS:");
    print("  Topic: " + event.topic);
    print("  Turns completed: " + event.totalTurns);
    print("  Participants: " + event.agent1 + " vs " + event.agent2);
    print("🎭 Smart await debate demonstration successful!");
}

// 🚀 START THE SIMPLIFIED SMART AWAIT DEBATE
print("🎭 SMART AWAIT DEBATE DEMO:");
print("✅ Speech speed: 90% (10% slower)");
print("✅ Turn-based coordination with smart await");
print("✅ Real-time audio synthesis");
print("✅ Optimized timing between all phases");
print("");

startDebate();

print("🚀 Smart await debate system initialized!");
print("⏰ Watch for optimized timing coordination...");
