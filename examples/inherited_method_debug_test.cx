// Debug test for inherited method IL generation with event-driven results
class TestAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("Created agent: " + this.name);
    }
    
    // Event handler to catch learning completion events
    on ai.learning.complete (payload)
    {
        print("🎉 EVENT: Learning completed for experience: " + payload.experience);
        print("📄 Document ID: " + payload.documentId);
        if (payload.tags)
        {
            print("🏷️  Tags: " + payload.tags);
        }
    }
    
    // Event handler to catch any AI processing events
    on ai.processing.complete (payload)
    {
        print("⚡ EVENT: AI processing completed: " + payload.operation);
        print("📊 Result: " + payload.result);
    }
    
    function testMethod()
    {
        print("About to call this.Learn() with options object");
        
        // Create an options object with structured data
        var options = {
            context: "cognitive_testing",
            priority: "high",
            tags: ["test", "inheritance", "await-free"]
        };
        
        // This should call the inherited Learn method with fire-and-forget pattern
        // Results should come back via events
        this.Learn("Revolutionary await-free programming test", options);
        
        print("Called this.Learn() - results will arrive via events");
        return "Fire-and-forget method initiated";
    }
}

// Test the inherited method call with event-driven results
var agent = new TestAgent("EventAgent");
var result = agent.testMethod();
print("Immediate result: " + result);

// Allow some time for background learning process and events
print("Waiting for background learning events...");

// Emit some test events to verify the event system is working
emit ai.processing.complete, { 
    operation: "test_operation", 
    result: "Event system operational" 
};
