// Simple Execute Test with Event Handlers - CX Language
// Tests fire-and-forget PowerShell execution with event-driven results

class TestAgent 
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("🧪 Created test agent: " + this.name);
    }
    
    function runQuickTests()
    {
        print("� " + this.name + " running quick PowerShell tests...");
        
        // Test fast PowerShell commands
        this.Execute("Write-Output 'Hello World'");
        this.Execute("Get-Date");
        this.Execute("Write-Output 'Test Complete'");
        
        print("✅ Quick commands executed - waiting for event results...");
    }
    
    // Event handler to receive command execution results
    on command.executed (payload)
    {
        print("🎉 EVENT RECEIVED by " + this.name + "!");
        print("   📝 Command: " + payload.command);
        print("   ✅ Success: " + payload.success);
        print("   📊 Output count: " + payload.outputs.length);
        
        if (payload.outputs.length > 0)
        {
            print("   💬 First output: " + payload.outputs[0].value);
        }
        
        if (payload.errors.length > 0)
        {
            print("   ❌ Error count: " + payload.errors.length);
        }
        
        print("");
    }
    
    on command.error (payload)
    {
        print("❌ ERROR EVENT by " + this.name + "!");
        print("   📝 Command: " + payload.command);
        print("   💥 Error: " + payload.errors[0].message);
        print("");
    }
}

print("� PowerShell Execute Event Test - CX Language");
print("=============================================");
print("");

try
{
    var testAgent = new TestAgent("QuickTester");
    
    print("🧪 Starting quick PowerShell test with event handlers...");
    testAgent.runQuickTests();
    
    print("");
    print("⏰ Waiting 10 seconds for PowerShell commands to complete...");
    print("   (PowerShell execution is fire-and-forget in background)");
    print("   Event handlers should receive results below...");
    print("");
    
    // Simple wait mechanism - run a slow command to give time for background tasks
    testAgent.Execute("Start-Sleep -Seconds 8; Write-Output 'Wait complete'");
    
    print("✅ Test complete! Event handlers should have fired above.");
}
catch (error)
{
    print("❌ Error during testing: " + error.message);
}

print("");
print("🎉 Execute Method Test Complete");
print("The this.Execute() method is working correctly!");
