// SIMPLE WORKING CONSOLE - Real Console.ReadLine() Integration
// Direct connection to ConsoleInputService for actual keyboard input

conscious WorkingConsole
{
    realize(self: conscious)
    {
        learn self;
        emit console.working.start { name: self.name };
    }
    
    on console.working.start (event)
    {
        print("🎯 SIMPLE WORKING CONSOLE");
        print("📝 Name: " + event.name);
        print("");
        print("✅ CONSOLE FEATURES:");
        print("  📋 Real Console.ReadLine() integration");
        print("  ⌨️ Actual keyboard input processing");
        print("  🔄 Line-based input (not streaming)");
        print("  🎯 Direct ConsoleInputService connection");
        print("");
        print("💡 HOW TO USE:");
        print("  1. Type a command");
        print("  2. Press Enter");
        print("  3. Command will be processed");
        print("");
        print("🎮 COMMANDS:");
        print("  hello - Say hello");
        print("  status - Show system status");
        print("  exit - Close console");
        print("");
        
        // Start console input session
        emit console.input.start { mode: "active" };
    }
    
    on console.input.start (event)
    {
        print("⚡ Console input session starting...");
        print("📝 Mode: " + event.mode);
        print("");
        print("🎯 Ready for input! Type a command and press Enter:");
        
        // Request first prompt
        emit console.prompt { prompt: "CX> " };
    }
    
    // Handle actual console input from ConsoleInputService
    on console.input (event)
    {
        print("");
        print("📥 Input received: '" + event.text + "'");
        print("📊 Source: " + event.source);
        print("");
        
        // Process the input
        emit command.process { 
            input: event.text,
            source: event.source,
            timestamp: event.timestamp || now()
        };
    }
    
    on command.process (event)
    {
        var input = event.input;
        
        print("🔧 Processing command: '" + input + "'");
        print("");
        
        // Route commands using cognitive boolean logic
        is {
            context: "Command routing for console input",
            evaluate: "User typed 'hello' command",
            data: { input: input, command: "hello" },
            handlers: [ command.hello ]
        };
        
        is {
            context: "Command routing for console input", 
            evaluate: "User typed 'status' command",
            data: { input: input, command: "status" },
            handlers: [ command.status ]
        };
        
        is {
            context: "Command routing for console input",
            evaluate: "User typed 'exit' command",
            data: { input: input, command: "exit" },
            handlers: [ command.exit ]
        };
        
        not {
            context: "Command validation for console input",
            evaluate: "Command is recognized",
            data: { input: input },
            handlers: [ command.unknown ]
        };
    }
    
    on command.hello (event)
    {
        print("👋 Hello! Console is working perfectly!");
        print("✅ Input: '" + event.input + "'");
        print("🎯 Console.ReadLine() integration successful");
        print("");
        
        emit ready.next.input;
    }
    
    on command.status (event)
    {
        print("📊 SYSTEM STATUS:");
        print("  🔧 ConsoleInputService: ✅ Active");
        print("  📝 Console.ReadLine(): ✅ Working");
        print("  ⌨️ Keyboard Input: ✅ Functional");
        print("  🧠 Event Processing: ✅ Operational");
        print("  🎯 Command Routing: ✅ Active");
        print("");
        
        emit ready.next.input;
    }
    
    on command.exit (event)
    {
        print("👋 Goodbye! Console session ending...");
        print("✅ Console.ReadLine() worked correctly");
        print("🎯 Line-based input confirmed functional");
        print("");
        
        emit system.shutdown { reason: "user_exit" };
    }
    
    on command.unknown (event)
    {
        print("❌ Unknown command: '" + event.input + "'");
        print("💡 Available commands: hello, status, exit");
        print("");
        
        emit ready.next.input;
    }
    
    on ready.next.input (event)
    {
        print("🔄 Ready for next command:");
        
        // Request next prompt from ConsoleInputService
        emit console.prompt { prompt: "CX> " };
    }
}

// Create and start the working console
var workingConsole = new WorkingConsole({ name: "SimpleWorkingConsole" });

// Start the console
emit console.working.start { name: "SimpleWorkingConsole" };
