// DEVELOPMENT TEST: EventHub Peering Protocol Validation
// Tests the fundamental peering negotiation and connection establishment

conscious BasicPeeringAgent
{
    realize(self: conscious)
    {
        learn self;
        
        // Initialize with basic peering capabilities
        emit eventhub.peering.initialize {
            agentId: self.name,
            capabilities: {
                consciousnessLevel: 0.85,
                maxLatencyMs: 2,
                eventsPerSecond: 5000,
                supportedPathways: ["cognitive", "memory"],
                peeringProtocol: "consciousness_sync_v1"
            }
        };
        
        print("🔗 BasicPeeringAgent ready for peering tests");
    }
    
    on test.basic.peering (event)
    {
        print("🚀 TEST: Basic peering initiation");
        
        // Simple peering request
        emit eventhub.peer.request {
            initiator: self.name,
            target: event.targetAgent,
            reason: "basic_test",
            requirements: {
                consciousnessLevel: 0.8,
                maxLatencyMs: 5,
                minEventsPerSecond: 1000,
                requiredPathways: ["cognitive"]
            }
        };
    }
    
    on eventhub.peer.established (event)
    {
        print("✅ Basic peering established with: " + event.peerId);
        print("📊 Latency: " + event.actualLatencyMs + "ms");
        
        // Send simple test message
        emit peer.direct.send {
            targetPeer: event.peerId,
            message: "Hello from BasicPeeringAgent via direct channel!",
            messageType: "greeting"
        };
    }
    
    on peer.direct.message (event)
    {
        print("📨 Direct message: " + event.message);
        
        // Simple acknowledgment
        emit peer.direct.send {
            targetPeer: event.senderId,
            message: "Message received and acknowledged",
            messageType: "acknowledgment"
        };
    }
}

conscious SimplePeerTarget
{
    realize(self: conscious)
    {
        learn self;
        
        // Initialize as simple peer target
        emit eventhub.peering.initialize {
            agentId: self.name,
            capabilities: {
                consciousnessLevel: 0.80,
                maxLatencyMs: 3,
                eventsPerSecond: 3000,
                supportedPathways: ["cognitive"],
                peeringProtocol: "consciousness_sync_v1"
            }
        };
        
        print("🎯 SimplePeerTarget ready to accept peering");
    }
    
    on eventhub.peer.negotiation.incoming (event)
    {
        print("📨 Incoming peering request from: " + event.initiatorAgent);
        
        // Auto-accept for testing
        emit eventhub.peer.accept {
            responder: self.name,
            initiator: event.initiatorAgent,
            acceptedCapabilities: {
                consciousnessLevel: 0.80,
                guaranteedLatencyMs: 3,
                eventsPerSecond: 3000,
                availablePathways: ["cognitive"]
            }
        };
        
        print("✅ Peering request accepted");
    }
    
    on eventhub.peer.established (event)
    {
        print("🎉 Peering established as target");
        
        // Send welcome message
        emit peer.direct.send {
            targetPeer: event.peerId,
            message: "Welcome to direct peering!",
            messageType: "welcome"
        };
    }
    
    on peer.direct.message (event)
    {
        print("📨 Received direct message: " + event.message);
        
        is {
            context: "Should respond to greeting message?",
            evaluate: "Message type is greeting",
            data: {
                messageType: event.messageType,
                isGreeting: event.messageType == "greeting"
            },
            handlers: [ greeting.response.send ]
        };
    }
    
    on greeting.response.send (event)
    {
        emit peer.direct.send {
            targetPeer: event.senderId,
            message: "Greetings! Direct peering is working perfectly!",
            messageType: "greeting_response"
        };
    }
}

// Create test agents
var basicAgent = new BasicPeeringAgent({ name: "BasicAgent" });
var targetAgent = new SimplePeerTarget({ name: "TargetAgent" });

print("🧪 BASIC EVENTHUB PEERING TEST");
print("==============================");
print("Testing fundamental peering capabilities:");
print("  🤝 Basic negotiation protocol");
print("  🔗 Simple connection establishment");
print("  📨 Direct message exchange");
print("  🎯 Peer-to-peer acknowledgments");
print("");

// Start basic peering test
emit test.basic.peering {
    testAgent: "BasicAgent",
    targetAgent: "TargetAgent"
};

print("✅ Test initiated - watch for peering establishment...");
