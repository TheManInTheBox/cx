// CX Language - Enhanced Autonomous Agent Architecture (Current Grammar Compatible)
// Demonstrates enhanced context through payload structure until dual-parameter support

using textGen from "Cx.AI.TextGeneration";
using tts from "Cx.AI.TextToSpeech";

// =============================================================================
// ENHANCED AUTONOMOUS AGENT SYSTEM WITH EMBEDDED CONTEXT
// =============================================================================

// Global agent registry for autonomous behavior
var autonomousAgents = [];
var eventHistory = [];

// Enhanced agent factory with context tracking
function createAutonomousAgent(name, role, specialties)
{
    var agent = {
        name: name,
        role: role,
        specialties: specialties,
        status: "listening",
        taskCount: 0,
        responseHistory: [],
        createdAt: "2025-07-19"
    };
    
    autonomousAgents.push(agent);
    print("ü§ñ Enhanced autonomous agent " + name + " (" + role + ") listening with specialties: " + specialties.join(", "));
    
    return agent;
}

// Enhanced agent lookup functions
function findAgentByRole(role)
{
    for (agent in autonomousAgents)
    {
        if (agent.role == role)
        {
            return agent;
        }
    }
    return null;
}

function findBestAgentForTask(taskDescription)
{
    // Simple selection logic for now (can be enhanced with AI)
    for (agent in autonomousAgents)
    {
        if (agent.role == "developer" && taskDescription.indexOf("database") > -1)
        {
            return agent;
        }
        if (agent.role == "designer" && taskDescription.indexOf("wireframe") > -1)
        {
            return agent;
        }
        if (agent.role == "analyst" && taskDescription.indexOf("analysis") > -1)
        {
            return agent;
        }
    }
    
    // Fallback to first available agent
    if (autonomousAgents.length > 0)
    {
        return autonomousAgents[0];
    }
    
    return null;
}

// =============================================================================
// ENHANCED EVENT HANDLERS WITH EMBEDDED CONTEXT PATTERN
// =============================================================================

// Enhanced task assignment with embedded context in payload
on task.assigned (payload)
{
    print("üì° Enhanced task assignment detected:");
    print("   Context - Caller: " + payload.context.caller + ", Session: " + payload.context.sessionId);
    print("   Payload - Task: " + payload.task.description + ", Priority: " + payload.task.priority);
    
    var agent = null;
    
    // Enhanced routing with context awareness
    if (payload.task.useAiSelection == true)
    {
        agent = findBestAgentForTask(payload.task.description);
    }
    else if (payload.task.role)
    {
        agent = findAgentByRole(payload.task.role);
    }
    
    if (agent)
    {
        print("‚úÖ " + agent.name + " autonomously accepting task with context awareness");
        
        // Enhanced AI processing with caller context
        var enhancedPrompt = "CONTEXT: Request from " + payload.context.caller + 
                           " in session " + payload.context.sessionId + 
                           ". TASK: As a " + agent.role + " with specialties [" + 
                           agent.specialties.join(", ") + "], handle: " + 
                           payload.task.description + ". Priority: " + payload.task.priority + 
                           ". Provide specific action plan with context awareness.";
        
        var response = textGen.GenerateAsync(enhancedPrompt, { temperature: 0.7, maxTokens: 200 });
        
        agent.taskCount = agent.taskCount + 1;
        agent.status = "task-completed";
        
        // Enhanced completion event with full context chain
        emit task.completed, {
            context: {
                caller: agent.name,
                timestamp: "now",
                originalEvent: "task.assigned",
                sessionId: payload.context.sessionId,
                processingChain: [payload.context.caller, agent.name]
            },
            result: {
                processor: agent.name,
                processorRole: agent.role,
                task: payload.task.description,
                response: response,
                taskNumber: agent.taskCount,
                originalCaller: payload.context.caller,
                priority: payload.task.priority,
                specialtiesUsed: agent.specialties
            }
        };
        
        tts.SpeakAsync(agent.name + " completed task with context chain: " + payload.context.caller + " to " + agent.name);
    }
    else
    {
        print("‚ùå No suitable autonomous agent found for: " + payload.task.description);
        
        // Emit failure event with context
        emit task.assignment.failed, {
            context: {
                caller: "system",
                timestamp: "now",
                originalEvent: "task.assigned",
                sessionId: payload.context.sessionId
            },
            failure: {
                reason: "no-suitable-agent",
                originalTask: payload.task.description,
                originalCaller: payload.context.caller
            }
        };
    }
}

// Enhanced user message handling with session context
on user.message (payload)
{
    print("üì° Enhanced user message with embedded context:");
    print("   Context - Session: " + payload.context.sessionId + ", User: " + payload.message.userId);
    print("   Payload - Message: " + payload.message.text);
    
    if (autonomousAgents.length > 0)
    {
        // Select most suitable agent based on message content
        var agent = findBestAgentForTask(payload.message.text);
        
        if (!agent)
        {
            agent = autonomousAgents[0]; // Fallback to first agent
        }
        
        print("üí¨ " + agent.name + " autonomously responding with session context");
        
        var contextAwarePrompt = "CONTEXT: User " + payload.message.userId + 
                               " in session " + payload.context.sessionId + 
                               " says: '" + payload.message.text + "'. " +
                               "RESPONSE: As a " + agent.role + " with specialties [" + 
                               agent.specialties.join(", ") + "], provide helpful response.";
        
        var response = textGen.GenerateAsync(contextAwarePrompt, { temperature: 0.8, maxTokens: 150 });
        
        emit agent.response, {
            context: {
                caller: agent.name,
                timestamp: "now",
                originalEvent: "user.message",
                sessionId: payload.context.sessionId
            },
            response: {
                respondingAgent: agent.name,
                agentRole: agent.role,
                userMessage: payload.message.text,
                response: response,
                userId: payload.message.userId,
                specialtiesApplied: agent.specialties
            }
        };
    }
}

// Enhanced system status with detailed context reporting
on system.status (payload)
{
    print("üìä Enhanced system status request with embedded context:");
    print("   Requestor: " + payload.context.caller + ", Detail Level: " + payload.request.detailLevel);
    
    print("üìà AUTONOMOUS AGENT STATUS REPORT:");
    
    var totalTasks = 0;
    for (agent in autonomousAgents)
    {
        print("   ü§ñ " + agent.name + " (" + agent.role + "):");
        print("      Status: " + agent.status + " | Tasks: " + agent.taskCount);
        print("      Specialties: " + agent.specialties.join(", "));
        
        totalTasks = totalTasks + agent.taskCount;
    }
    
    print("üìú Total Events Processed: " + totalTasks);
    
    emit system.status.complete, {
        context: {
            caller: "system",
            timestamp: "now",
            originalEvent: "system.status",
            sessionId: payload.context.sessionId
        },
        status: {
            totalAgents: autonomousAgents.length,
            totalTasks: totalTasks,
            requestor: payload.context.caller,
            systemHealth: "operational"
        }
    };
}

// =============================================================================
// ENHANCED RESPONSE HANDLERS WITH CONTEXT AWARENESS
// =============================================================================

on task.completed (payload)
{
    print("üéâ ENHANCED AUTONOMOUS TASK COMPLETION!");
    print("   Processing Chain: " + payload.context.processingChain.join(" ‚Üí "));
    print("   Processor: " + payload.result.processor + " (" + payload.result.processorRole + ")");
    print("   Task #" + payload.result.taskNumber + " (Priority: " + payload.result.priority + "): " + payload.result.task);
    print("   Specialties Used: " + payload.result.specialtiesUsed.join(", "));
    print("   Result: " + payload.result.response);
    print("   Original Caller: " + payload.result.originalCaller);
    print("");
}

on agent.response (payload)
{
    print("üí¨ ENHANCED AUTONOMOUS AGENT RESPONSE!");
    print("   Session: " + payload.context.sessionId);
    print("   Agent: " + payload.response.respondingAgent + " (" + payload.response.agentRole + ")");
    print("   User " + payload.response.userId + ": " + payload.response.userMessage);
    print("   Response: " + payload.response.response);
    print("   Specialties Applied: " + payload.response.specialtiesApplied.join(", "));
    print("");
}

on task.assignment.failed (payload)
{
    print("‚ùå TASK ASSIGNMENT FAILURE!");
    print("   Session: " + payload.context.sessionId);
    print("   Reason: " + payload.failure.reason);
    print("   Original Task: " + payload.failure.originalTask);
    print("   Original Caller: " + payload.failure.originalCaller);
    print("   üí° Consider creating specialized agents for this task type");
    print("");
}

on system.status.complete (payload)
{
    print("üìä SYSTEM STATUS SUMMARY:");
    print("   Agents: " + payload.status.totalAgents + " | Tasks Completed: " + payload.status.totalTasks);
    print("   Health: " + payload.status.systemHealth + " | Requestor: " + payload.status.requestor);
    print("   Session: " + payload.context.sessionId);
    print("");
}

// =============================================================================
// ENHANCED AUTONOMOUS AGENT DEMONSTRATION
// =============================================================================

print("üöÄ CX Language - Enhanced Autonomous Agent Architecture Demo");
print("============================================================");
print("üéØ Key Enhancement: Embedded context pattern in payload structure");
print("üìä Features: Context tracking, processing chains, specialties");
print("");

// Create enhanced autonomous agents with specialties
print("ü§ñ Initializing enhanced autonomous agents with specialties:");

var alice = createAutonomousAgent("Alice", "developer", ["backend", "databases", "performance"]);
var bob = createAutonomousAgent("Bob", "analyst", ["data-analysis", "reporting", "metrics"]);
var carol = createAutonomousAgent("Carol", "designer", ["ui-ux", "wireframes", "user-experience"]);

print("‚úÖ " + autonomousAgents.length + " enhanced autonomous agents active");
print("");

// Demonstrate enhanced context-aware events
print("üì° Broadcasting enhanced events with embedded context:");
print("");

// Event 1: High-priority task with embedded context
emit task.assigned, {
    context: {
        caller: "project-manager",
        timestamp: "2025-07-19T10:30:00Z",
        originalEvent: "project.milestone",
        sessionId: "proj-session-001"
    },
    task: {
        description: "Optimize database query performance for user dashboard",
        priority: "high",
        useAiSelection: true,
        deadline: "end-of-week"
    }
};

// Event 2: User interaction with embedded session context
emit user.message, {
    context: {
        caller: "chat-system",
        timestamp: "2025-07-19T10:35:00Z",
        originalEvent: "user.chat.initiated",
        sessionId: "chat-session-123"
    },
    message: {
        text: "I need help improving the mobile app navigation experience",
        userId: "user_jane_doe",
        userType: "premium-customer"
    }
};

// Event 3: Specific agent task with embedded context
emit task.assigned, {
    context: {
        caller: "design-lead",
        timestamp: "2025-07-19T10:40:00Z",
        originalEvent: "design.review",
        sessionId: "design-session-456"
    },
    task: {
        description: "Create wireframes for the new admin dashboard interface",
        role: "designer",
        priority: "medium",
        specifications: "mobile-first-responsive"
    }
};

// Event 4: System status with embedded context
emit system.status, {
    context: {
        caller: "system-admin",
        timestamp: "2025-07-19T10:45:00Z",
        originalEvent: "health.check",
        sessionId: "admin-session-789"
    },
    request: {
        detailLevel: "comprehensive",
        includeHistory: true
    }
};

print("‚ö° All enhanced events broadcast - observing context-aware autonomous responses!");
print("");
print("üåü ENHANCED AUTONOMOUS AGENT DEMONSTRATION COMPLETE!");
print("====================================================");
print("‚úÖ Embedded context pattern: payload.context + payload.data");
print("‚úÖ Context tracking through processing chains");
print("‚úÖ Enhanced agent selection and task routing");
print("‚úÖ Session awareness and conversation continuity");
print("‚úÖ Comprehensive event context and audit trail");
print("‚úÖ Enhanced autonomous decision-making with context");
print("");
print("üîÆ FUTURE SYNTAX VISION (Grammar Extension Needed):");
print("   on eventName (agentContext, payload) { ... }");
print("   emit eventName, context, payload;");
print("   // Perfect separation of concerns!");
