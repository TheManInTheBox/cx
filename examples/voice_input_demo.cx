// PRODUCTION DEMO: Voice Input Capture System
// Demonstrates real-time microphone capture with NAudio integration
// Tests Issue #160 implementation with complete audio processing

conscious VoiceTestAgent
{
    realize(self: conscious)
    {
        learn self;
        print("Voice Test Agent initialized: " + self.name);
        emit voice.test.ready { agent: self.name };
    }
    
    on voice.test.start (event)
    {
        print("🎤 Starting voice input capture test...");
        print("Agent: " + event.agentName);
        
        // This will test our new VoiceInputService
        emit voice.input.start { 
            agent: event.agentName,
            testMode: true 
        };
    }
    
    on voice.input.started (event)
    {
        print("✅ Voice input capture started successfully!");
        print("📊 Sample Rate: " + event.sampleRate + "Hz");
        print("📊 Channels: " + event.channels);
        print("📊 Bits Per Sample: " + event.bitsPerSample);
        print("🎤 Device: " + event.deviceName);
        
        emit voice.test.status { 
            status: "listening",
            message: "Microphone active - speak to test audio capture"
        };
    }
    
    on voice.input.captured (event)
    {
        print("🎵 Audio captured!");
        print("⏱️  Duration: " + event.durationMs + "ms");
        print("📏 Size: " + event.bytesLength + " bytes");
        print("📊 Sample Rate: " + event.sampleRate + "Hz");
        
        // Cognitive decision about audio quality
        is {
            context: "Should we process this audio sample?",
            evaluate: "Audio quality check for " + event.durationMs + "ms sample",
            data: { 
                duration: event.durationMs, 
                size: event.bytesLength,
                sampleRate: event.sampleRate
            },
            handlers: [ audio.quality.evaluated ]
        };
    }
    
    on audio.quality.evaluated (event)
    {
        print("✅ Audio quality evaluated - processing audio sample");
        print("📊 Audio data validated: " + event.size + " bytes at " + event.sampleRate + "Hz");
    }
    
    on voice.input.stopped (event)
    {
        print("🔇 Voice input capture stopped");
        print("📊 Total buffered frames: " + event.totalBufferedFrames);
        
        emit voice.test.complete { 
            status: "completed",
            message: "Voice input test completed successfully"
        };
    }
    
    on voice.input.device.changed (event)
    {
        print("🎤 Audio device changed");
        print("📱 Device: " + event.deviceName);
        print("📊 Channels: " + event.channels);
    }
}

// System event handler for overall coordination
on system.start (event)
{
    print("🚀 Voice Input Demo Starting...");
    print("Testing Issue #160: Voice Input Capture System");
    print("====================================================");
    
    var voiceAgent = new VoiceTestAgent { name: "VoiceAgent", testMode: true };
    
    // Wait a moment then start the test
    await { 
        reason: "startup_delay_for_voice_test",
        context: "Allowing system to initialize before voice test",
        minDurationMs: 1000,
        maxDurationMs: 2000,
        handlers: [ voice.test.ready ]
    };
}

on voice.test.ready (event)
{
    print("🎯 Voice test ready - starting capture test");
    emit voice.test.start { agentName: "VoiceAgent" };
}

on voice.test.status (event)
{
    print("📊 Test Status: " + event.status);
    print("💬 Message: " + event.message);
    
    is {
        context: "Should we start audio monitoring?",
        evaluate: "Check if status is listening",
        data: { status: event.status },
        handlers: [ audio.monitoring.started ]
    };
}

on audio.monitoring.started (event)
{
    print("🗣️  Speak now to test audio capture...");
    print("🔄 Audio events will be displayed in real-time");
    
    // Run for 10 seconds then stop
    await { 
        reason: "voice_capture_test_duration",
        context: "Running voice capture test for demonstration",
        minDurationMs: 10000,
        maxDurationMs: 10000,
        handlers: [ voice.test.timeout ]
    };
}

on voice.test.timeout (event)
{
    print("⏰ Test timeout - stopping voice capture");
    emit voice.input.stop { reason: "test_complete" };
}

on voice.test.complete (event)
{
    print("🎉 Voice Input Test Complete!");
    print("✅ Status: " + event.status);
    print("💬 Message: " + event.message);
    print("====================================================");
    print("✅ Issue #160 Voice Input Capture System: TESTED");
}
