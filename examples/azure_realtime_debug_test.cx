// Debug test to check if Azure OpenAI Realtime services are properly registered

class ServiceRegistrationDebugAgent
{
    name: string = "ServiceDebugAgent";
    
    function checkServiceRegistration()
    {
        print("🔍 Checking service registration status...");
        
        // Check if the service provider is working
        if (typeof(this) == "object")
        {
            print("✅ Agent created successfully - dependency injection working");
        }
        
        // Emit the events and see if any registered handlers respond
        print("📡 Testing event system for realtime services...");
        
        emit realtime.connect { debug: true, source: "debug_test" };
        emit realtime.session.create { debug: true, source: "debug_test" };
        emit realtime.text.send { text: "Debug test message", debug: true };
        
        print("Events emitted - checking for responses...");
    }
    
    on realtime.connected (event)
    {
        print("🎉 realtime.connected handler triggered!");
        print(event);
    }
    
    on realtime.session.created (event)
    {
        print("🎉 realtime.session.created handler triggered!");
        print(event);
    }
    
    on realtime.session.error (event)
    {
        print("⚠️ realtime.session.error handler triggered!");
        print(event);
    }
    
    on realtime.text.response (event)
    {
        print("🎉 realtime.text.response handler triggered!");
        print(event);
    }
    
    on realtime.error (event)
    {
        print("❌ realtime.error handler triggered!");
        print(event);
    }
    
    // Test global event bus listeners
    on system.ready (event)
    {
        print("✅ System ready event detected");
        print(event);
    }
}

print("=== Azure OpenAI Realtime Service Registration Debug ===");

var debugAgent = new ServiceRegistrationDebugAgent();
debugAgent.checkServiceRegistration();

// Also test direct event emission without agent
print("\n=== Direct Event System Test ===");

emit realtime.connect { direct: true };
emit realtime.session.create { direct: true };
emit system.ready { direct: true };
