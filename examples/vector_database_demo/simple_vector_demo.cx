///
/// CX Language Vector Database Demo - Issue #259 (Simplified Debug Version)
/// 
/// This simplified demo focuses on core functionality without complex error handling
///

conscious SimpleVectorDemo {
    realize() {
        emit system.console.write {
            text: "üéØ Simple Vector Database Demo - Issue #259",
            foregroundColor: "cyan"
        };
        
        emit system.console.write {
            text: "üß† Testing core vector operations",
            foregroundColor: "blue"
        };
        
        // Start with basic vector count
        emit vector.count {
            handlers: [ demo.count.check ]
        };
    }
    
    // Check initial count
    on demo.count.check (event) {
        emit system.console.write {
            text: "üìä Initial vector count: " + event.count,
            foregroundColor: "green"
        };
        
        // Add a test document
        emit vector.add.text {
            text: "CX Language is a consciousness-aware programming platform for AI agents.",
            metadata: {
                category: "test",
                demo: "simple"
            },
            handlers: [ demo.document.added ]
        };
    }
    
    // Document added successfully
    on demo.document.added (event) {
        emit system.console.write {
            text: "‚úÖ Document added with ID: " + event.id,
            foregroundColor: "green"
        };
        
        // Test search functionality
        emit vector.search.text {
            query: "consciousness programming",
            topK: 1,
            handlers: [ demo.search.complete ]
        };
    }
    
    // Search completed
    on demo.search.complete (event) {
        emit system.console.write {
            text: "üîç Search completed successfully!",
            foregroundColor: "green"
        };
        
        emit system.console.write {
            text: "üìä Search duration: " + event.duration + "ms",
            foregroundColor: "blue"
        };
        
        // Get final count
        emit vector.count {
            handlers: [ demo.final.count ]
        };
    }
    
    // Final count check
    on demo.final.count (event) {
        emit system.console.write {
            text: "üìä Final vector count: " + event.count,
            foregroundColor: "green"
        };
        
        emit system.console.write {
            text: "üéâ Simple demo completed successfully!",
            foregroundColor: "cyan"
        };
        
        emit system.console.write {
            text: "‚úÖ Issue #259: Core functionality validated",
            foregroundColor: "green"
        };
        
        emit system.shutdown { 
            reason: "demo_complete",
            exit_code: 0
        };
    }
    
    // Error handlers
    on vector.count.failed (event) {
        emit system.console.write {
            text: "‚ùå Vector count failed: " + event.error,
            foregroundColor: "red"
        };
        
        emit system.shutdown { reason: "error" };
    }
    
    on vector.add.text.failed (event) {
        emit system.console.write {
            text: "‚ùå Document add failed: " + event.error,
            foregroundColor: "red"
        };
        
        emit system.shutdown { reason: "error" };
    }
    
    on vector.search.text.failed (event) {
        emit system.console.write {
            text: "‚ùå Search failed: " + event.error,
            foregroundColor: "red"
        };
        
        emit system.shutdown { reason: "error" };
    }
}

new SimpleVectorDemo();
