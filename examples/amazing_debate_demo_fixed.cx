// FIXED: Amazing AI Debate Demo - Main Program Pattern
// Based on working comprehensive_ai_mp3_demo.cx approach
using textGen from "Cx.AI.TextGeneration";
using tts from "Cx.AI.TextToSpeech";

class DebateAgent
{
    name: string;
    position: string;
    
    constructor(name, position)
    {
        this.name = name;
        this.position = position;
    }
}

print("üî• AMAZING AI DEBATE: CLIMATE CHANGE SOLUTIONS");
print("===============================================");

// Create agents without dependency injection
var agent1 = new DebateAgent("Dr. Sarah Chen", "Pro-Technology");
var agent2 = new DebateAgent("Prof. Marcus Green", "Pro-Nature");
var agent3 = new DebateAgent("Dr. Lisa Martinez", "Economic Focus"); 
var agent4 = new DebateAgent("Dr. James Wilson", "Policy Focus");

var agents = [agent1, agent2, agent3, agent4];

print("üé≠ Agents created:");
for (var agent in agents)
{
    print("   ‚Üí " + agent.name + " (" + agent.position + ")");
}

try
{
    print("\nüó£Ô∏è  DEBATE ROUND 1: Opening Statements");
    print("=====================================");
    
    // Agent 1 speaks - DIRECT AI service call in main program
    print("\n" + agent1.name + " (" + agent1.position + "):");
    var statement1 = textGen.GenerateAsync(
        "As " + agent1.name + ", argue for " + agent1.position + " solutions to climate change. Be passionate but respectful. 2-3 sentences.",
        { temperature: 0.8, maxTokens: 150 }
    );
    print(statement1);
    tts.SpeakAsync(agent1.name + " says: " + statement1);
    
    // Agent 2 responds - DIRECT AI service call in main program  
    print("\n" + agent2.name + " (" + agent2.position + "):");
    var statement2 = textGen.GenerateAsync(
        "As " + agent2.name + ", argue for " + agent2.position + " solutions to climate change in response to technology focus. Be passionate but respectful. 2-3 sentences.",
        { temperature: 0.8, maxTokens: 150 }
    );
    print(statement2);
    tts.SpeakAsync(agent2.name + " says: " + statement2);
    
    // Agent 3 enters - DIRECT AI service call in main program
    print("\n" + agent3.name + " (" + agent3.position + "):");
    var statement3 = textGen.GenerateAsync(
        "As " + agent3.name + ", focus on " + agent3.position + " aspects of climate solutions. Address both technology and nature approaches. 2-3 sentences.",
        { temperature: 0.8, maxTokens: 150 }
    );
    print(statement3);
    tts.SpeakAsync(agent3.name + " says: " + statement3);
    
    // Agent 4 concludes - DIRECT AI service call in main program
    print("\n" + agent4.name + " (" + agent4.position + "):");
    var statement4 = textGen.GenerateAsync(
        "As " + agent4.name + ", focus on " + agent4.position + " solutions that can unite technology, nature, and economic approaches. Be diplomatic. 2-3 sentences.",
        { temperature: 0.8, maxTokens: 150 }
    );
    print(statement4);
    tts.SpeakAsync(agent4.name + " says: " + statement4);
    
    print("\nüéØ DEBATE ROUND 2: Responses & Counterpoints");
    print("==========================================");
    
    // Second round - each agent responds to others
    for (var agent in agents)
    {
        print("\n" + agent.name + " responds:");
        var response = textGen.GenerateAsync(
            "As " + agent.name + " with " + agent.position + " focus, respond to the other climate change arguments you've heard. Be thoughtful and specific. 2-3 sentences.",
            { temperature: 0.9, maxTokens: 150 }
        );
        print(response);
        tts.SpeakAsync(agent.name + " responds: " + response);
    }
    
    print("\nüèÜ FINAL SYNTHESIS");
    print("==================");
    
    var synthesis = textGen.GenerateAsync(
        "Synthesize the climate change debate between technology, nature, economic, and policy approaches into a unified solution. Be inspiring and actionable. 3-4 sentences.",
        { temperature: 0.7, maxTokens: 200 }
    );
    print("üåç Unified Solution:");
    print(synthesis);
    
    tts.SpeakAsync("The debate concludes with this unified vision: " + synthesis);
    
    print("\n‚ú® AMAZING AI DEBATE COMPLETE!");
    print("ü§ñ 4 Agents √ó Multiple AI Calls √ó Turn-Based Coordination");
    print("üéµ Full Text-to-Speech Integration");
    print("üöÄ CX Language Autonomous Programming Platform!");
}
catch (error)
{
    print("‚ùå Debate error: " + error);
}
