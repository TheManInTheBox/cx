// CX Language - Aura Presence Agent Demo
// Target Scenario: Audio-triggered presence detection with personality


// Global Aura state management
class AuraSystem
{
    isActive: boolean;
    
    constructor()
    {
        this.isActive = false;
    }
    
    function activate()
    {
        this.isActive = true;
        emit aura.activated, "active";
    }
    
    function deactivate()
    {
        this.isActive = false;
        emit aura.deactivated, "inactive";
    }
}

// Audio Listener Agent - Always listening for trigger words
class AudioListenerAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
    }
    
    function processAudio(input)
    {
        // Simulate audio processing - looking for "Aura on/off" commands
        if (input.toLowerCase().includes("aura on"))
        {
            emit audio.trigger, "activate";
            return true;
        }
        
        if (input.toLowerCase().includes("aura off"))
        {
            emit audio.trigger, "deactivate";
            return true;
        }
        
        // If Aura is active, process other audio as conversation
        if (auraSystem.isActive && input.trim() != "")
        {
            if (input.toLowerCase().includes("beep-boop"))
            {
                emit conversation.end, input;
                return true;
            }
            else
            {
                emit conversation.input, input;
                return true;
            }
        }
        
        return false;
    }
}

// Presence Agent - Responds when Aura is active
class PresenceAgent
{
    personality: string;
    isEnabled: boolean;
    
    constructor()
    {
        this.personality = "energetic and wild like Animal from the Muppets";
        this.isEnabled = false;
    }
    
    // React to Aura activation
    on aura.activated (payload)
    {
        this.isEnabled = true;
        
        // Generate Animal-style acknowledgment
        var acknowledgment = textGen.GenerateAsync(
            "Generate a very short 'beep-boop' style response like Animal from the Muppets would make when excited and ready. Be energetic and wild!",
            {
                temperature: 0.8,
                maxTokens: 30
            }
        );
        
        // Speak with Animal personality
        var animalResponse = "[energetic, wild, drum-playing voice like Animal from Muppets] " + acknowledgment;
        tts.SpeakAsync(animalResponse);
        
        print("🔥 Aura ACTIVATED! " + this.personality);
        print("🎵 Animal says: " + acknowledgment);
    }
    
    // React to Aura deactivation  
    on aura.deactivated (payload)
    {
        this.isEnabled = false;
        print("😴 Aura deactivated - all sensory processing stopped except audio listening");
    }
    
    // Respond to conversation when active
    on conversation.input (payload)
    {
        if (this.isEnabled)
        {
            var response = textGen.GenerateAsync(
                "Respond to: '" + payload + "' in the style of Animal from the Muppets - energetic, wild, enthusiastic, and drum-focused. Keep responses conversational and fun!",
                {
                    temperature: 0.9,
                    maxTokens: 100
                }
            );
            
            var animalVoice = "[energetic Animal voice from Muppets, with drum sounds] " + response;
            tts.SpeakAsync(animalVoice);
            
            print("🥁 Animal responds: " + response);
            emit agent.response, response;
        }
    }
    
    // Handle conversation end
    on conversation.end (payload)
    {
        if (this.isEnabled)
        {
            var farewell = textGen.GenerateAsync(
                "Animal from Muppets says goodbye with beep-boop style sounds - very energetic and drum-focused!",
                {
                    temperature: 0.8,
                    maxTokens: 40
                }
            );
            
            var animalGoodbye = "[wild Animal voice] " + farewell;
            tts.SpeakAsync(animalGoodbye);
            
            print("🎵 Animal farewell: " + farewell);
            print("🎭 Demo conversation ended!");
        }
    }
}

// Initialize the Aura system
var auraSystem = new AuraSystem();

// Create autonomous agents  
var audioListener = new AudioListenerAgent("AudioMonitor");
var presenceAgent = new PresenceAgent();

print("🎤 Aura Presence Detection System Initialized");
print("🔊 Audio listener is active - waiting for 'Aura on/off' commands...");
print("🎭 Say 'Aura on' to activate presence detection");
print("💬 When active, have a conversation and say 'beep-boop' to end");
print("");

// Simulate the target scenario
try
{
    print("═══ TARGET SCENARIO SIMULATION ═══");
    print("");
    
    // Step 1: User says "Aura on"
    print("👤 User: 'Aura on'");
    audioListener.processAudio("Aura on");
    auraSystem.activate();
    
    print("");
    print("⏳ Waiting for Animal's beep-boop response...");
    print("");
    
    // Step 2: Begin conversation
    print("👤 User: 'Hello there, how are you doing?'");
    audioListener.processAudio("Hello there, how are you doing?");
    
    print("");
    print("👤 User: 'What's your favorite thing to do?'");
    audioListener.processAudio("What's your favorite thing to do?");
    
    print("");
    print("👤 User: 'beep-boop'");
    audioListener.processAudio("beep-boop");
    
    print("");
    print("✅ Target scenario completed successfully!");
    print("🎯 Demonstrated: Audio trigger → Aura activation → Personality response → Conversation → Termination");
}
catch (error)
{
    print("❌ Error in scenario: " + error);
}

print("");
print("🚀 Aura Presence Agent Demo - Phase 7 Autonomous Intelligence Preview!");
