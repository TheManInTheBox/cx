// CX Language - Namespace-based Event Scoping Demo
// Event names define the scope: global.any, team.name.any, role.name.any, agent.name.any, channel.name.any


class NamespacedAgent
{
    name: string;
    role: string;
    team: string;
    agentId: string;
    
    constructor(agentName, agentRole, agentTeam)
    {
        this.name = agentName;
        this.role = agentRole;
        this.team = agentTeam;
        this.agentId = "";
        print("🤖 " + this.name + " (" + this.role + ", team " + this.team + ") created");
    }
    
    // Register with namespace-based event system
    function register()
    {
        this.agentId = RegisterNamespacedAgent(this.name, this.team, this.role, null, this);
        print("✅ " + this.name + " registered for namespaced events: " + this.agentId);
        return this.agentId;
    }
    
    // Handle global announcements
    function handleGlobalEvent(data)
    {
        print("🌍 " + this.name + " received global event: " + data.message);
        return "acknowledged";
    }
    
    // Handle team-specific events
    function handleTeamEvent(data)
    {
        print("👥 " + this.name + " handling team " + this.team + " event: " + data.task);
        
        var response = textGen.GenerateAsync(
            "As " + this.name + " from team " + this.team + ", handle: " + data.task,
            { temperature: 0.7, maxTokens: 100 }
        );
        
        print("✅ " + this.name + " team response: " + response);
        return response;
    }
    
    // Handle role-specific events
    function handleRoleEvent(data)
    {
        print("🎭 " + this.name + " handling role " + this.role + " event: " + data.instruction);
        
        var response = textGen.GenerateAsync(
            "As a " + this.role + " named " + this.name + ", respond to: " + data.instruction,
            { temperature: 0.6, maxTokens: 80 }
        );
        
        print("💼 " + this.name + " role response: " + response);
        return response;
    }
    
    // Handle agent-specific events
    function handlePersonalEvent(data)
    {
        print("👤 " + this.name + " received personal message: " + data.message);
        print("📧 Priority: " + data.priority);
        
        if (data.priority == "urgent")
        {
            // Escalate urgent personal messages
            EmitNamespacedEvent("team." + this.team + ".urgent", {
                escalatedBy: this.name,
                originalMessage: data.message,
                escalationReason: "urgent personal message"
            });
        }
        
        return "message received";
    }
    
    // Handle channel-specific events
    function handleChannelEvent(data)
    {
        print("📺 " + this.name + " handling channel event: " + data.topic);
        return "channel event processed";
    }
    
    function unregister()
    {
        if (this.agentId != "")
        {
            var success = UnregisterNamespacedAgent(this.agentId);
            print("👋 " + this.name + " unregistered: " + success);
            this.agentId = "";
            return success;
        }
        return false;
    }
}

// Namespace-aware event handlers for demonstration
// In real implementation, these would be automatically registered

on global.announcement (payload)
{
    print("🔊 GLOBAL ANNOUNCEMENT HANDLER");
    print("   Message: " + payload.message);
    print("   Scope: Global (all agents should see this)");
}

on team.development.task (payload)
{
    print("🔧 DEVELOPMENT TEAM TASK HANDLER");
    print("   Task: " + payload.task);
    print("   Scope: Development team only");
}

on role.manager.update (payload)
{
    print("👔 MANAGER ROLE UPDATE HANDLER");
    print("   Update: " + payload.instruction);
    print("   Scope: All managers");
}

on agent.alice.message (payload)
{
    print("👤 ALICE PERSONAL MESSAGE HANDLER");
    print("   Message: " + payload.message);
    print("   Scope: Alice only");
}

on channel.design.review (payload)
{
    print("🎨 DESIGN CHANNEL REVIEW HANDLER");
    print("   Topic: " + payload.topic);
    print("   Scope: Design channel subscribers");
}

print("🌐 NAMESPACE-BASED EVENT SCOPING DEMO");
print("=====================================");
print("");

print("📋 PHASE 1: Agent Registration");
print("-------------------------------");

// Create agents with different roles and teams
var alice = new NamespacedAgent("Alice", "developer", "development");
var bob = new NamespacedAgent("Bob", "designer", "design");
var charlie = new NamespacedAgent("Charlie", "manager", "development");
var diana = new NamespacedAgent("Diana", "developer", "mobile");

// Register all agents
alice.register();
bob.register();
charlie.register();
diana.register();

print("");
print("📋 PHASE 2: Namespace Event Broadcasting");
print("-----------------------------------------");

print("🔸 Global Announcement (all agents):");
EmitNamespacedEvent("global.announcement", {
    message: "New company policy: Work from home Fridays!",
    priority: "normal",
    timestamp: "now"
});

print("");
print("🔸 Team Development Task (development team only):");
EmitNamespacedEvent("team.development.task", {
    task: "Implement OAuth 2.0 authentication system",
    deadline: "next sprint",
    priority: "high"
});

print("");
print("🔸 Manager Role Update (all managers):");
EmitNamespacedEvent("role.manager.update", {
    instruction: "Please submit Q1 performance reviews by Friday",
    actionRequired: true,
    dueDate: "end-of-week"
});

print("");
print("🔸 Personal Message to Alice (Alice only):");
EmitNamespacedEvent("agent.alice.message", {
    message: "Your code review has been approved - great work!",
    priority: "normal",
    sender: "TechLead"
});

print("");
print("🔸 Design Channel Review (design channel subscribers):");
EmitNamespacedEvent("channel.design.review", {
    topic: "New brand guidelines review meeting",
    meetingTime: "2PM today",
    requiredAttendees: ["designers", "marketing"]
});

print("");
print("📋 PHASE 3: Hierarchical Event Broadcasting");
print("--------------------------------------------");

print("🔸 Testing event hierarchy - mobile team task:");
EmitNamespacedEvent("team.mobile.sprint", {
    task: "Optimize mobile app startup time",
    platform: "both iOS and Android",
    priority: "medium"
});

print("");
print("🔸 Testing wildcard patterns - general role event:");
EmitNamespacedEvent("role.developer.training", {
    training: "Advanced TypeScript workshop",
    date: "next Tuesday",
    optional: false
});

print("");
print("📋 PHASE 4: Complex Event Patterns");
print("-----------------------------------");

print("🔸 Multi-level namespace - team lead urgent:");
EmitNamespacedEvent("team.development.lead.urgent", {
    issue: "Production system down - all hands on deck",
    severity: "critical",
    responseRequired: true
});

print("");
print("🔸 Cross-functional event - project coordination:");
EmitNamespacedEvent("project.mobile_app.status", {
    project: "Mobile App v2.0",
    phase: "testing",
    blockers: ["API rate limiting", "iOS review pending"]
});

print("");
print("📋 PHASE 5: Event Bus Statistics");
print("---------------------------------");

var stats = GetNamespacedBusStatistics();
print("📊 Namespace Event Bus Statistics:");
print("   Total Agents: " + stats.TotalAgents);
print("   Total Event Patterns: " + stats.TotalEventPatterns);

print("");
print("📋 PHASE 6: Agent Cleanup");
print("-------------------------");

alice.unregister();
bob.unregister();
charlie.unregister();
diana.unregister();

var finalStats = GetNamespacedBusStatistics();
print("📊 Final Statistics - Remaining Agents: " + finalStats.TotalAgents);

print("");
print("✅ NAMESPACE-BASED EVENT SCOPING COMPLETE!");
print("");
print("🎯 NAMESPACE SCOPING PATTERNS DEMONSTRATED:");
print("   ✓ global.any        → All agents (company-wide announcements)");
print("   ✓ team.name.any     → Team-specific events (development, design, mobile)");
print("   ✓ role.name.any     → Role-specific events (manager, developer, designer)");
print("   ✓ agent.name.any    → Agent-specific events (personal messages)");
print("   ✓ channel.name.any  → Channel-specific events (design, engineering)");
print("   ✓ project.name.any  → Project-specific events (cross-functional coordination)");
print("");
print("🏗️ NAMESPACE ARCHITECTURE BENEFITS:");
print("   • Event names ARE the scoping mechanism");
print("   • No complex configuration required");
print("   • Intuitive hierarchical structure");
print("   • Wildcard pattern matching support");
print("   • Natural event routing based on naming");
print("   • Self-documenting event structure");
