
// Class-based event handlers demonstration
// Shows agents handling events directly in their class scope
class TaskAgent
{
    name: string;
    currentTask: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.currentTask = "idle";
        print("Agent " + this.name + " initialized and ready for tasks");
    }
    
    function processTask(taskData)
    {
        print("Agent " + this.name + " processing: " + taskData);
        this.currentTask = taskData;
        
        // Generate AI response for task completion
        var response = textGen.GenerateAsync("Complete this task: " + taskData, {
            temperature: 0.7,
            maxTokens: 100
        });
        
        print("Agent " + this.name + " completed task with: " + response);
        return response;
    }
    
    // CLASS-BASED EVENT HANDLER: This agent handles task assignments directly
    on task.assigned (payload)
    {
        print("🎯 Agent " + this.name + " received task assignment event");
        
        if (payload.assignee == this.name)
        {
            print("✅ Task is assigned to me (" + this.name + ")");
            var result = this.processTask(payload.taskDescription);
            
            // Emit completion event with results
            emit task.completed, {
                agent: this.name,
                originalTask: payload.taskDescription,
                result: result,
                completedAt: "now"
            };
        }
        else
        {
            print("ℹ️ Task assigned to " + payload.assignee + ", not me (" + this.name + ")");
        }
    }
    
    // CLASS-BASED EVENT HANDLER: Handle high priority tasks differently
    on priority.task (payload)
    {
        print("⚡ PRIORITY: Agent " + this.name + " handling urgent task");
        
        if (payload.urgencyLevel > 8)
        {
            print("🚨 CRITICAL: Agent " + this.name + " handling critical priority task");
            var urgentResponse = this.processTask("URGENT: " + payload.taskDescription);
            
            emit critical.task.completed, {
                agent: this.name,
                urgentResult: urgentResponse,
                urgencyLevel: payload.urgencyLevel
            };
        }
    }
}

class MonitorAgent  
{
    name: string;
    tasksMonitored: number;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.tasksMonitored = 0;
        print("Monitor Agent " + this.name + " started tracking system events");
    }
    
    // CLASS-BASED EVENT HANDLER: Monitor all task completions
    on task.completed (payload)
    {
        this.tasksMonitored = this.tasksMonitored + 1;
        print("📊 Monitor " + this.name + ": Task completed by " + payload.agent);
        print("📈 Total tasks monitored: " + this.tasksMonitored);
        
        // Generate monitoring report
        var report = textGen.GenerateAsync("Generate a brief monitoring report for completed task: " + payload.result, {
            temperature: 0.5,
            maxTokens: 50
        });
        
        print("📋 Monitoring Report: " + report);
        
        emit monitoring.report, {
            monitor: this.name,
            taskAgent: payload.agent,
            report: report,
            totalTasks: this.tasksMonitored
        };
    }
    
    // CLASS-BASED EVENT HANDLER: Alert on critical completions
    on critical.task.completed (payload)
    {
        print("🔴 CRITICAL ALERT: Monitor " + this.name + " detected critical task completion");
        print("🔥 Agent: " + payload.agent + " completed urgent task with level: " + payload.urgencyLevel);
        
        emit system.alert, {
            alertType: "critical-task-completed",
            monitor: this.name,
            urgentAgent: payload.agent,
            urgencyLevel: payload.urgencyLevel
        };
    }
}

// Create agents with class-based event handling
print("=== CX CLASS-BASED EVENT HANDLERS DEMO ===");
print("Creating agents with scoped event handling...");

var alice = new TaskAgent("Alice");
var bob = new TaskAgent("Bob");
var monitor = new MonitorAgent("SystemMonitor");

print("");
print("🚀 Testing class-based event handlers:");
print("--------------------------------------");

try
{
    // Test 1: Normal task assignment to Alice
    print("📤 Test 1: Assigning normal task to Alice");
    emit task.assigned, {
        assignee: "Alice",
        taskDescription: "Process customer data analysis",
        priority: 5
    };
    
    print("");
    
    // Test 2: Normal task assignment to Bob
    print("📤 Test 2: Assigning normal task to Bob");
    emit task.assigned, {
        assignee: "Bob", 
        taskDescription: "Generate monthly report",
        priority: 6
    };
    
    print("");
    
    // Test 3: High priority task
    print("📤 Test 3: Assigning critical priority task to Alice");
    emit priority.task, {
        assignee: "Alice",
        taskDescription: "Handle security breach incident",
        urgencyLevel: 9
    };
    
    print("");
    print("✅ Class-based event handlers working!");
    print("🎯 Each agent handled events in their own class scope");
    print("📊 Monitor agent tracked all completions automatically"); 
    print("⚡ Priority handlers triggered for urgent tasks");
}
catch (error)
{
    print("❌ Error in class-based event handling: " + error);
}

print("");
print("🏆 CX Language Class-Based Event Handlers: OPERATIONAL!");
