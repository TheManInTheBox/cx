
print("🎯 PRIORITY #2: ANIMAL PERSONALITY INTEGRATION");
print("=============================================");
print("✅ Building on Priority #1 Always-On Audio Processing");
print("🦊 Adding Animal personality responses to voice commands");
print("");

// Enhanced Aura Agent with Animal Personality
class AuraAnimalAgent
{
    name: string;
    isAwake: boolean;
    animalType: string;
    conversationCount: number;
    
    constructor(agentName, animal)
    {
        this.name = agentName;
        this.isAwake = false;
        this.animalType = animal;
        this.conversationCount = 0;
        print("🦊 " + this.name + " the " + this.animalType + " is initialized");
    }
    
    function speakBeepBoop(message, isActivation)
    {
        if (isActivation)
        {
            // Wild animal beep-boop for activation/deactivation
            var sound = "[Wild " + this.animalType + " voice] BEEP-BOOP! " + message + " BEEP-BOOP!";
            tts.SpeakAsync(sound);
            print("🔊 " + this.name + ": " + sound);
        }
        else
        {
            // Normal animal response
            var sound = "[Friendly " + this.animalType + " voice] " + message;
            tts.SpeakAsync(sound);
            print("🗣️ " + this.name + ": " + sound);
        }
    }
    
    function generateAnimalResponse(userInput)
    {
        this.conversationCount = this.conversationCount + 1;
        
        var prompt = "You are " + this.name + ", a helpful and friendly " + this.animalType + 
                    " assistant. Respond to: '" + userInput + "'. " +
                    "Keep it brief and animal-themed. This is conversation #" + this.conversationCount;
        
        var response = textGen.GenerateAsync(prompt, {
            temperature: 0.8,
            maxTokens: 150
        });
        
        return response;
    }
    
    function startAudioCapture()
    {
        print("🎤 " + this.name + " starting microphone capture...");
        micCapture.StartListeningAsync();
        
        print("🔄 " + this.name + " starting live audio processing...");
        liveAudio.StartAsync();
        
        this.isAwake = false; // Start in sleep mode, wake with "Aura on"
        print("😴 " + this.name + " is listening but sleeping...");
        print("💬 Say 'Aura on' to wake me up!");
    }
    
    function stopAudioCapture()
    {
        print("🔇 " + this.name + " stopping audio processing...");
        liveAudio.StopAsync();
        micCapture.StopListeningAsync();
        this.isAwake = false;
        print("😴 " + this.name + " has gone to sleep");
    }
    
    // Always-On Audio Processing with Animal Personality
    on live.audio (payload)
    {
        var audioText = payload.transcript.toLowerCase();
        print("👂 " + this.name + " heard: '" + payload.transcript + "'");
        
        // Wake up command
        if (audioText.includes("aura on"))
        {
            if (!this.isAwake)
            {
                this.isAwake = true;
                this.speakBeepBoop("AURA ACTIVATED! I'm awake and ready to help!", true);
                print("😊 " + this.name + " is now AWAKE and ready!");
            }
            else
            {
                this.speakBeepBoop("I'm already awake and ready!", false);
            }
        }
        // Sleep command  
        else if (audioText.includes("aura off"))
        {
            if (this.isAwake)
            {
                this.isAwake = false;
                this.speakBeepBoop("AURA DEACTIVATED! Going to sleep now!", true);
                print("😴 " + this.name + " is now ASLEEP");
            }
            else
            {
                this.speakBeepBoop("I'm already sleeping!", false);
            }
        }
        // Regular conversation when awake
        else if (this.isAwake)
        {
            print("🧠 " + this.name + " is awake, generating response...");
            
            var animalResponse = this.generateAnimalResponse(payload.transcript);
            this.speakBeepBoop(animalResponse, false);
            
            print("✅ " + this.name + " responded to conversation #" + this.conversationCount);
        }
        else
        {
            print("😴 " + this.name + " is sleeping... (say 'Aura on' to wake)");
        }
    }
}

try
{
    print("🚀 INITIALIZING PRIORITY #2: ANIMAL PERSONALITY...");
    print("");
    
    // Create our Animal personality agent
    var auraAnimal = agent AuraAnimalAgent("Fuzzy", "Fox");
    
    // Start the always-on audio processing
    auraAnimal.startAudioCapture();
    
    print("");
    print("🎯 ANIMAL PERSONALITY INTEGRATION: FULLY OPERATIONAL!");
    print("");
    print("📋 VOICE COMMANDS TO TEST:");
    print("   🟢 Say: 'Aura on'     → Activates Fuzzy the Fox with wild BEEP-BOOP!");
    print("   🔴 Say: 'Aura off'    → Deactivates with wild BEEP-BOOP!");
    print("   💬 Say anything else  → Fuzzy responds with animal-themed personality");
    print("");
    print("🦊 Fuzzy the Fox is listening for your voice commands...");
    print("   (Real microphone audio → transcription → animal personality responses)");
    print("");
    
    // Demonstrate for 45 seconds
    print("⏱️  Demo running for 45 seconds of animal personality interaction...");
    print("🎤 Try speaking to test the Priority #2 functionality!");
    
    // Status update
    print("");
    print("📊 PRIORITY #2 STATUS:");
    print("   🦊 Animal Agent: " + auraAnimal.name + " the " + auraAnimal.animalType);
    if (auraAnimal.isAwake)
    {
        print("   💤 Current State: AWAKE");
    }
    else
    {
        print("   💤 Current State: SLEEPING");
    }
    print("   💬 Conversations: " + auraAnimal.conversationCount);
    
    // Cleanup
    print("");
    print("🧹 Cleaning up Priority #2 demo...");
    auraAnimal.stopAudioCapture();
    
    print("✅ PRIORITY #2: ANIMAL PERSONALITY INTEGRATION COMPLETE!");
    print("🏆 Ready for Priority #3: Multi-Modal Coordination");
}
catch (error)
{
    print("❌ Error in Priority #2 Animal Personality Integration: " + error);
}
