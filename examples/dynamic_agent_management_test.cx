// Dynamic Agent Management Test
// Testing Phase 6 Priority #2: Runtime agent lifecycle management

print("🚀 Dynamic Agent Management Test Starting");
print("==========================================");

class DynamicAgent
{
    name: string;
    agentId: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        this.agentId = "";  // Will be set during registration
    }
    
    // Event handlers for testing
    on support.tickets (payload)
    {
        print("🎫 " + this.name + " handling support ticket: " + payload.ticketId);
    }
    
    on alerts.critical (payload)
    {
        print("🚨 " + this.name + " handling critical alert: " + payload.alert);
    }
    
    on any.urgent (payload)
    {
        print("⚡ " + this.name + " handling urgent event: " + payload.message);
    }
}

try
{
    print("");
    print("📊 Phase 1: System Statistics Before Dynamic Management");
    
    // Check initial system state
    var initialStats = GetNamespacedBusStatistics();
    print("Initial System State: " + initialStats.TotalAgents + " agents registered");
    
    print("");
    print("🔧 Phase 2: Runtime Agent Registration");
    
    // Create agent instances
    var agent1 = new DynamicAgent("SupportBot");
    var agent2 = new DynamicAgent("AlertMonitor"); 
    var agent3 = new DynamicAgent("UrgencyHandler");
    
    // Register agents dynamically at runtime
    var agentId1 = RegisterNamespacedAgent("SupportBot", "customer-service", "bot", null, agent1);
    var agentId2 = RegisterNamespacedAgent("AlertMonitor", "operations", "monitor", null, agent2);
    var agentId3 = RegisterNamespacedAgent("UrgencyHandler", "emergency", "handler", null, agent3);
    
    // Store agent IDs for later deregistration
    agent1.agentId = agentId1;
    agent2.agentId = agentId2;
    agent3.agentId = agentId3;
    
    print("✅ Agent1 registered with ID: " + agentId1);
    print("✅ Agent2 registered with ID: " + agentId2);
    print("✅ Agent3 registered with ID: " + agentId3);
    
    print("");
    print("📊 Phase 3: System Statistics After Registration");
    
    var midStats = GetNamespacedBusStatistics();
    print("After Registration: " + midStats.TotalAgents + " agents registered");
    
    print("");
    print("📡 Phase 4: Testing Event Delivery to Dynamic Agents");
    
    // Test events to dynamically registered agents
    emit support.tickets, { ticketId: "T-001", priority: "high" };
    emit alerts.critical, { alert: "Server outage detected", severity: 9 };
    emit system.urgent, { message: "Emergency maintenance required" };
    emit dev.urgent, { message: "Critical bug in production" };
    
    print("✅ All test events emitted");
    
    print("");
    print("🔄 Phase 5: Runtime Agent Deregistration");
    
    // Dynamically remove agents from the system
    var unreg1 = UnregisterNamespacedAgent(agent1.agentId);
    var unreg2 = UnregisterNamespacedAgent(agent2.agentId);
    
    print("✅ Agent1 deregistered: " + unreg1);
    print("✅ Agent2 deregistered: " + unreg2);
    print("ℹ️  Agent3 remains active");
    
    print("");
    print("📊 Phase 6: System Statistics After Deregistration");
    
    var finalStats = GetNamespacedBusStatistics();
    print("After Deregistration: " + finalStats.TotalAgents + " agents registered");
    
    print("");
    print("📡 Phase 7: Testing Events After Partial Deregistration");
    
    // Test that only remaining agents receive events
    emit support.tickets, { ticketId: "T-002", priority: "medium" };
    emit alerts.critical, { alert: "Network latency spike", severity: 7 };
    emit business.urgent, { message: "Urgent client escalation" };
    
    print("✅ Post-deregistration events emitted");
    
    print("");
    print("🧹 Phase 8: Complete System Cleanup");
    
    // Clean up remaining agent
    var unreg3 = UnregisterNamespacedAgent(agent3.agentId);
    print("✅ Agent3 deregistered: " + unreg3);
    
    var cleanupStats = GetNamespacedBusStatistics();
    print("After Full Cleanup: " + cleanupStats.TotalAgents + " agents registered");
    
    print("");
    print("🏆 Dynamic Agent Management Test Complete!");
    print("✅ Runtime Registration: OPERATIONAL");
    print("✅ Runtime Deregistration: OPERATIONAL"); 
    print("✅ Agent Discovery: OPERATIONAL");
    print("✅ System Monitoring: OPERATIONAL");
    print("✅ Event Delivery Management: OPERATIONAL");
}
catch (error)
{
    print("❌ Error in Dynamic Agent Management Test: " + error);
}
