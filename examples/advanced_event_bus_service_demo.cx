// CX Language - Advanced Event Bus Service Demo
// Demonstrates pub/sub patterns with different scoping strategies

using textGen from "Cx.AI.TextGeneration";

// Agent class that can join/leave the event bus
class SmartAgent
{
    name: string;
    role: string;
    busId: string;
    channels: array;
    
    constructor(agentName, agentRole)
    {
        this.name = agentName;
        this.role = agentRole;
        this.channels = [];
        this.busId = "";
        print("🤖 " + this.name + " (" + this.role + ") created");
    }
    
    // Join the event bus with specific scoping
    function joinBus(scope, channels, eventFilters)
    {
        // Convert array to native array format for CX runtime
        var channelArray = null;
        var filterArray = null;
        
        if (channels && channels.length > 0)
        {
            channelArray = channels;
            this.channels = channels;
        }
        
        if (eventFilters && eventFilters.length > 0)
        {
            filterArray = eventFilters;
        }
        
        this.busId = JoinEventBus(this.name, this.role, scope, channelArray, filterArray, this);
        print("✅ " + this.name + " joined event bus with ID: " + this.busId + " (scope: " + scope + ")");
        return this.busId;
    }
    
    // Leave the event bus
    function leaveBus()
    {
        if (this.busId != "")
        {
            var success = LeaveEventBus(this.busId);
            if (success)
            {
                print("👋 " + this.name + " left the event bus");
                this.busId = "";
                return true;
            }
        }
        return false;
    }
    
    // Subscribe to specific events
    function subscribeToEvent(eventName)
    {
        if (this.busId != "")
        {
            // Note: In real implementation, we'd need to bridge this to the handler
            print("📡 " + this.name + " subscribing to event: " + eventName);
            return true;
        }
        return false;
    }
    
    // Join a channel for channel-scoped communication
    function joinChannel(channel)
    {
        if (this.busId != "")
        {
            var success = JoinChannel(this.busId, channel);
            if (success)
            {
                this.channels.push(channel);
                print("🏷️ " + this.name + " joined channel: " + channel);
            }
            return success;
        }
        return false;
    }
    
    // Leave a channel
    function leaveChannel(channel)
    {
        if (this.busId != "")
        {
            var success = LeaveChannel(this.busId, channel);
            if (success)
            {
                // Remove from local channels array
                var newChannels = [];
                for (var i = 0; i < this.channels.length; i++)
                {
                    if (this.channels[i] != channel)
                    {
                        newChannels.push(this.channels[i]);
                    }
                }
                this.channels = newChannels;
                print("❌ " + this.name + " left channel: " + channel);
            }
            return success;
        }
        return false;
    }
    
    // Handle task-related events
    function handleTaskEvent(taskData)
    {
        print("📋 " + this.name + " handling task: " + taskData.description);
        
        var response = textGen.GenerateAsync(
            "As " + this.name + " (" + this.role + "), respond to task: " + taskData.description,
            { temperature: 0.7, maxTokens: 150 }
        );
        
        print("💡 " + this.name + " response: " + response);
        
        // Emit completion event
        emit task.completed, {
            completedBy: this.name,
            originalTask: taskData.description,
            result: response
        };
        
        return response;
    }
    
    // Handle notification events  
    function handleNotification(notification)
    {
        print("🔔 " + this.name + " received notification: " + notification.message);
        
        if (notification.priority == "high")
        {
            print("⚡ " + this.name + " prioritizing high-importance notification");
            // Escalate high priority notifications
            emit priority.escalation, {
                escalatedBy: this.name,
                originalNotification: notification
            };
        }
    }
    
    // Get agent status
    function getStatus()
    {
        var channelList = this.channels.length > 0 ? this.channels.join(", ") : "none";
        return {
            name: this.name,
            role: this.role,
            busId: this.busId,
            channels: channelList,
            active: this.busId != ""
        };
    }
}

print("🚀 ADVANCED EVENT BUS SERVICE DEMO");
print("===================================");
print("");

// Create agents with different roles
var alice = new SmartAgent("Alice", "developer");
var bob = new SmartAgent("Bob", "designer"); 
var charlie = new SmartAgent("Charlie", "manager");
var diana = new SmartAgent("Diana", "tester");

print("📋 PHASE 1: Basic Bus Joining");
print("------------------------------");

// Alice joins with Global scope (receives all events)
alice.joinBus("Global", null, null);

// Bob joins with Channel scope for design-related communication
bob.joinBus("Channel", ["design", "ui"], null);

// Charlie joins with Role scope for management events
charlie.joinBus("Role", null, ["management.update", "team.status"]);

// Diana joins with Channel scope for testing
diana.joinBus("Channel", ["testing", "qa"], null);

print("");
print("📋 PHASE 2: Channel Management");
print("-------------------------------");

// Agents join additional channels dynamically
alice.joinChannel("development");
alice.joinChannel("architecture");
bob.joinChannel("branding");
charlie.joinChannel("leadership");
diana.joinChannel("automation");

// Show current bus statistics
var stats = GetBusStatistics();
print("📊 Bus Statistics:");
print("   Total Agents: " + stats.TotalAgents);
print("   Total Channels: " + stats.TotalChannels);
print("   Total Roles: " + stats.TotalRoles);

print("");
print("📋 PHASE 3: Scoped Event Broadcasting");
print("--------------------------------------");

print("🔸 Broadcasting to Development Channel:");
EmitScopedEvent("task.assigned", {
    description: "Implement user authentication",
    priority: "high",
    assignedTo: "development-team"
}, "ProjectManager", "Channel", "development", null);

print("");
print("🔸 Broadcasting to Design Channel:");
EmitScopedEvent("design.review", {
    description: "Review new dashboard mockups", 
    deadline: "end-of-week",
    artifacts: ["mockup1.png", "mockup2.png"]
}, "DesignLead", "Channel", "design", null);

print("");
print("🔸 Broadcasting to Manager Role:");
EmitScopedEvent("management.update", {
    update: "Sprint planning meeting moved to Tuesday",
    impact: "All team members affected",
    actionRequired: true
}, "HR", "Role", null, "manager");

print("");
print("🔸 Global Broadcast (All Agents):");
EmitScopedEvent("company.announcement", {
    message: "New office coffee machine installed!",
    location: "Kitchen area",
    excitement: "maximum"
}, "FacilitiesTeam", "Global", null, null);

print("");
print("📋 PHASE 4: Agent Status and Cleanup");
print("-------------------------------------");

// Show agent statuses
print("👥 Agent Status Report:");
var aliceStatus = alice.getStatus();
print("   " + aliceStatus.name + " (" + aliceStatus.role + "): " + 
      (aliceStatus.active ? "Active on bus " + aliceStatus.busId : "Inactive") + 
      " | Channels: " + aliceStatus.channels);

var bobStatus = bob.getStatus();
print("   " + bobStatus.name + " (" + bobStatus.role + "): " + 
      (bobStatus.active ? "Active on bus " + bobStatus.busId : "Inactive") + 
      " | Channels: " + bobStatus.channels);

print("");
print("🔸 Charlie leaving development channel:");
charlie.leaveChannel("leadership");

print("");
print("🔸 Diana leaving the bus entirely:");
diana.leaveBus();

// Final statistics
print("");
var finalStats = GetBusStatistics();
print("📊 Final Bus Statistics:");
print("   Total Agents: " + finalStats.TotalAgents);
print("   Total Channels: " + finalStats.TotalChannels);
print("   Total Roles: " + finalStats.TotalRoles);

print("");
print("✅ ADVANCED EVENT BUS DEMONSTRATION COMPLETE!");
print("");
print("🎯 DEMONSTRATED FEATURES:");
print("   ✓ Agent lifecycle (join/leave bus)");
print("   ✓ Multiple scoping strategies (Global, Channel, Role)");
print("   ✓ Dynamic channel management");
print("   ✓ Scoped event broadcasting");
print("   ✓ Bus statistics and monitoring");
print("   ✓ Agent status tracking");
print("");
print("🔮 SCOPING STRATEGIES EXPLAINED:");
print("   • Global: Agent receives all events");
print("   • Channel: Agent only receives events from subscribed channels");
print("   • Role: Agent only receives events targeted to their role");
print("   • Agent: Events scoped to individual agent instances");
print("   • Hierarchy: Events bubble through agent hierarchies");
