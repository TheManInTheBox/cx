// ðŸ”¬ DR. ARIS THORNE'S HARDWARE DIAGNOSTIC
// GOAL: Systematically test the Windows audio stack from low-level to high-level.

conscious HardwareDiagnosticAgent
{
    realize(self: conscious)
    {
        print("ðŸ”¬ Dr. Aris Thorne's Hardware Diagnostic Agent Initialized.");
        learn self;
        emit agent.ready;
        
        // The agent is responsible for initiating its own connection.
        print("Agent is attempting to connect to realtime services...");
        emit realtime.connect;
    }

    // This handler is now inside the agent, waiting for its connection to be established.
    on realtime.connected (event)
    {
        print("Azure connection established for agent. Starting Step 1 of diagnostic.");
        // Now that we're connected, start the diagnostic sequence.
        emit diagnostic.step.one;
    }

    // Step 1: Low-level OS beep. This confirms the most basic audio path.
    on diagnostic.step.one (event)
    {
        print("STEP 1: Executing low-level OS beep via PowerShell...");
        emit powershell.execute { 
            command: "[console]::beep(880, 500)",
            handlers: [ diagnostic.step.two ]
        };
    }

    // Step 2: Enumerate NAudio devices. This tests the NAudio library's ability to see the hardware.
    on diagnostic.step.two (event)
    {
        print("STEP 2: Enumerating audio output devices via NAudio...");
        emit audio.output.discover.all;
    }

    on audio.output.discovered (event)
    {
        print("STEP 3: Setting output device and attempting playback...");
        print("Discovered " + event.devices.Length + " devices. Selecting device 0: " + event.devices[0]);
        
        // Set the output device to the first one found
        emit voice.output.device.set { deviceIndex: 0 };

        // Now, generate and play the audio on the selected device
        emit realtime.text.send {
            text: "This is a direct hardware diagnostic on a selected device. Can you hear me now?",
            deployment: "gpt-4o-mini-realtime-preview"
        };
    }
    
    // This handler receives the generated audio and triggers the direct playback test.
    on realtime.audio.response (event)
    {
        print("Audio generated. Attempting direct playback...");
        // This event should be handled by the VoiceOutputService to play the audio.
        // We are testing if this direct path works.
        is {
            context: "Is audio data present?",
            evaluate: "Check for non-null audioData in the event payload",
            data: { originalPayload: event.payload }, // Pass the entire original payload
            handlers: [ diagnostic.audio.generated ]
        };
    }

    on diagnostic.audio.generated (event)
    {
        // The 'is' service wraps the payload. We need to access event.data to get to our original payload.
        var audioBytes = event.data.originalPayload.audioData;
        
        // We now wait for the 'voice.output.completed' event instead of using a handler.
        emit voice.output.play {
            audioData: audioBytes,
            sampleRate: 24000,
            channels: 1
        };
    }

    // Step 4: This handler is triggered AFTER audio playback finishes, preventing premature shutdown.
    on voice.output.completed (event)
    {
        print("STEP 4: Reporting diagnostic results...");
        print("If you heard a beep and the voice, the basic audio path is functional.");
        print("If you only heard the beep, the issue lies within the NAudio playback service.");
        print("If you heard nothing, there is a fundamental OS or hardware driver issue.");
        
        emit diagnostic.complete;
    }
}

// System Orchestration
on system.start (event)
{
    print("ðŸš€ Starting Dr. Aris Thorne's Hardware Diagnostic.");
    // Agent instantiation below will trigger the diagnostic process.
}

on diagnostic.complete (event)
{
    print("âœ… Hardware diagnostic complete.");
    emit system.shutdown { reason: "Diagnostic finished." };
}

on system.shutdown (event)
{
    print("ðŸ”Œ System shutting down. Reason: " + event.reason);
}

var diagnosticAgent = new HardwareDiagnosticAgent({ name: "Dr.Thorne.Diagnostic" });
