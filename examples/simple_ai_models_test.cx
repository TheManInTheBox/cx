// Simple test of all AI models with multi-service configuration

function testAllAIModelsSimple()
{
    print("=== SIMPLE AI MODELS TEST WITH MULTI-SERVICE CONFIGURATION ===");
    print("Configuration Status: Multi-service format detected");
    print("Selected Service: EastUS at https://agilai.openai.azure.com/");
    print("Testing all AI services with model-specific API versions...");
    print("");
    
    var passedTests = 0;
    var totalTests = 7;
    
    // Test 1: Chat Completion (EastUS - API version 2024-10-21)
    print("ü§ñ Test 1: Chat Completion Service");
    try
    {
        var chatResponse = chatBot.CompleteAsync(
            "You are a helpful AI assistant.",
            "What are the benefits of multi-service AI architecture?"
        );
        print("‚úÖ Chat Completion: SUCCESS");
        print("Response: " + chatResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Chat Completion: FAILED - " + error);
    }
    print("");
    
    // Test 2: Text Generation (EastUS - API version 2024-10-21)
    print("üìù Test 2: Text Generation Service");
    try
    {
        var textResponse = textGen.GenerateAsync(
            "Write a brief explanation of AI programming languages",
            {
                temperature: 0.7,
                maxTokens: 150
            }
        );
        print("‚úÖ Text Generation: SUCCESS");
        print("Response: " + textResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Text Generation: FAILED - " + error);
    }
    print("");
    
    // Test 3: Text Embeddings (EastUS - API version 2024-08-01-preview)
    print("üî¢ Test 3: Text Embeddings Service");
    try
    {
        var embeddingText = "Aura CX is an AI-native programming language";
        var embeddingResponse = embeddings.GenerateEmbeddingAsync(embeddingText);
        print("‚úÖ Text Embeddings: SUCCESS");
        print("Embedding generated successfully");
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Text Embeddings: FAILED - " + error);
    }
    print("");
    
    // Test 4: Text-to-Image (EastUS - API version 2024-02-15-preview)
    print("üé® Test 4: Text-to-Image Service (DALL-E 3)");
    try
    {
        var imagePrompt = "A futuristic programming interface";
        var imageResponse = imageGen.GenerateImageAsync(imagePrompt, {
            size: "1024x1024"
        });
        print("‚úÖ Text-to-Image: SUCCESS");
        print("Image URL: " + imageResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Text-to-Image: FAILED - " + error);
    }
    print("");
    
    // Test 5: Image-to-Text (EastUS - API version 2024-10-01)
    print("üëÅÔ∏è Test 5: Image-to-Text Service (GPT-4 Vision)");
    try
    {
        var imageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Python.svg/240px-Python.svg.png";
        var analysisResponse = imageToText.AnalyzeImageAsync(
            imageUrl,
            "What do you see in this image?"
        );
        print("‚úÖ Image-to-Text: SUCCESS");
        print("Analysis: " + analysisResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Image-to-Text: FAILED - " + error);
    }
    print("");
    
    // Test 6: Text-to-Speech (EastUS2 - API version 2024-10-01)
    print("üéµ Test 6: Text-to-Speech Service");
    try
    {
        var speechText = "Welcome to Aura CX programming language!";
        var speechResponse = textToSpeech.SynthesizeAsync(speechText);
        print("‚úÖ Text-to-Speech: SUCCESS");
        print("Audio generated: " + speechResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Text-to-Speech: FAILED - " + error);
    }
    print("");
    
    // Test 7: Audio-to-Text (EastUS - API version 2024-10-01)
    print("üé§ Test 7: Audio-to-Text Service (Whisper)");
    try
    {
        var audioUrl = "https://example.com/sample.wav";
        var transcriptionResponse = audioToText.TranscribeAsync(audioUrl);
        print("‚úÖ Audio-to-Text: SUCCESS");
        print("Transcription: " + transcriptionResponse);
        passedTests = passedTests + 1;
    }
    catch (error)
    {
        print("‚ùå Audio-to-Text: FAILED (expected - no real audio file) - " + error);
    }
    print("");
    
    // Display Results
    print("=== FINAL RESULTS ===");
    print("Passed Tests: " + passedTests + " / " + totalTests);
    var successRate = (passedTests * 100) / totalTests;
    print("Success Rate: " + successRate + "%");
    print("");
    
    if (passedTests >= 5)
    {
        print("üéâ EXCELLENT! Multi-service configuration working great!");
        print("‚úÖ Model-specific API versions are being used correctly");
        print("‚úÖ Service routing based on ServiceSelection is functional");
        return true;
    }
    else if (passedTests >= 3)
    {
        print("üëç GOOD! Most services working, some may need configuration");
        return true;
    }
    else
    {
        print("‚ö†Ô∏è  NEEDS ATTENTION: Several services need fixes");
        return false;
    }
}

function showConfigurationDetails()
{
    print("=== MULTI-SERVICE CONFIGURATION DETAILS ===");
    print("Based on your current appsettings.json:");
    print("");
    print("Service Routing:");
    print("  ChatCompletion ‚Üí EastUS (gpt-4.1-nano, API: 2024-10-21)");
    print("  TextGeneration ‚Üí EastUS (gpt-4.1-nano, API: 2024-10-21)");
    print("  TextEmbedding ‚Üí EastUS (text-embedding-ada-002, API: 2024-08-01-preview)");
    print("  TextToImage ‚Üí EastUS (dall-e-3, API: 2024-02-15-preview)");
    print("  TextToSpeech ‚Üí EastUS2 (gpt-4o-mini-tts, API: 2024-10-01)");
    print("  AudioToText ‚Üí EastUS (whisper, API: 2024-10-01)");
    print("  ImageToText ‚Üí EastUS (gpt-4.1-nano, API: 2024-10-01)");
    print("");
    print("‚úÖ Model-specific API versions implemented successfully!");
}

// Execute the test
print("üöÄ AURA CX - AI MODELS TEST WITH MULTI-SERVICE CONFIGURATION");
print("=============================================================");
showConfigurationDetails();
print("");
var success = testAllAIModelsSimple();
print("=============================================================");
if (success)
{
    print("üéØ RESULT: Multi-service configuration is working correctly!");
}
else
{
    print("‚ö†Ô∏è  RESULT: Some issues detected, check configuration");
}
