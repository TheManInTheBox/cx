// Test AI service completion event handlers
// This verifies that services emit completion events and handlers catch them

conscious ServiceCompletionTester {
    realize() {
        print("🔧 SERVICE COMPLETION TEST STARTING");
        print("=======================================");
        
        // Test learn service with completion event
        learn { data: "Test learning data", category: "debug", expectCompletion: true };
        print("📚 Learn request with completion tracking sent");
        
        // Test infer service with completion event  
        infer { context: "Test context", type: "debug", expectCompletion: true };
        print("🔍 Infer request with completion tracking sent");
        
        await { reason: "Wait for service processing and completion events", minDurationMs: 5000, maxDurationMs: 8000 };

        print("🔧 SERVICE COMPLETION TEST COMPLETE");
        print("If you see CAUGHT completion events above, service-to-handler communication is working");
    }
}

// Global event handlers to catch service completion events
on learn.debug.complete (event) {
    print("🎯 CAUGHT: learn.debug.complete event from LearnService");
    print("📊 Event data: " + event.data);
    print("✅ LearnService → Handler communication successful!");
}

on infer.debug.complete (event) {
    print("🎯 CAUGHT: infer.debug.complete event from InferService");
    print("📊 Event context: " + event.context);
    print("✅ InferService → Handler communication successful!");
}

on inference.complete (event) {
    print("🎯 CAUGHT: inference.complete event (default handler)");
    print("📊 Inference result: " + event.result);
}

// Create and run the test
var tester = new ServiceCompletionTester();
print("🚀 Service completion test with event handler verification complete");
