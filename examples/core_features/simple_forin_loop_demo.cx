// Simple PowerShell Output for...in Loop Demo  
// Demonstrates clear iteration over PowerShell array results
// INSTRUMENTED: Added vector database search to inspect agent memory

print("üîÑ Simple PowerShell Array Iteration Demo\n");

// Add learning detection events
on ai.learning.complete (payload) 
{
    print("‚úÖ LEARNING SUCCESS DETECTED:");
    print("   Agent: " + payload.agent);
    print("   Document ID: " + payload.documentId);
    print("   Status: " + payload.status);
    print("   Content Length: " + payload.contentLength);
    print("   Knowledge: " + payload.knowledge);
    print("");
    
    // AUTO-TRIGGER SEARCH: Test if content is now searchable after learning
    print("üîç AUTO-SEARCH: Testing if learned content is now searchable...");
    
    // Try to search for content we just learned based on common keywords
    if (payload.agent == "SimpleIterator") 
    {
        // Search for different aspects of what might have been learned
        print("   ‚Üí Auto-searching for: SimpleIterator");
        // Note: Can't call methods in event handlers, but we can emit search events
        emit search.trigger, { 
            agent: payload.agent, 
            query: "SimpleIterator", 
            reason: "auto_search_after_learning",
            documentId: payload.documentId 
        };
        
        print("   ‚Üí Auto-searching for: PowerShell array");
        emit search.trigger, { 
            agent: payload.agent, 
            query: "PowerShell array", 
            reason: "auto_search_after_learning",
            documentId: payload.documentId 
        };
        
        print("   ‚Üí Auto-searching for: for-in loop");
        emit search.trigger, { 
            agent: payload.agent, 
            query: "for-in loop", 
            reason: "auto_search_after_learning",
            documentId: payload.documentId 
        };
    }
}

on ai.learning.failed (payload) 
{
    print("‚ùå LEARNING FAILED:");
    print("   Agent: " + payload.agent);
    print("   Reason: " + payload.reason);
    print("");
}

// Add search result detection events
on ai.search.complete (payload) 
{
    print("üîç VECTOR DATABASE SEARCH RESULTS:");
    print("   Agent: " + payload.agent);
    print("   Query: " + payload.query);
    print("   Results Found: " + payload.resultsCount);
    print("   Processing Time: " + payload.processingTimeMs + "ms");
    
    if (payload.resultsCount > 0) 
    {
        print("   üìö Top Result Content: " + payload.topResult);
        print("   üìä All Results:");
        
        // Iterate through search results if available
        if (payload.results && payload.results.length > 0) 
        {
            for (var result in payload.results) 
            {
                print("      ‚Üí Score: " + result.score);
                print("      ‚Üí Content: " + result.content);
                print("      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
            }
        }
    } 
    else 
    {
        print("   ‚ùå No matching content found in vector database");
    }
    print("");
}

on ai.search.failed (payload) 
{
    print("‚ùå VECTOR DATABASE SEARCH FAILED:");
    print("   Agent: " + payload.agent);
    print("   Reason: " + payload.reason);
    print("");
}

// Global variable to store the iterator for auto-searches
var globalIterator = null;

// Handler for auto-triggered searches after learning
on search.trigger (payload) 
{
    print("üéØ SEARCH TRIGGER: Auto-search initiated");
    print("   Query: " + payload.query);
    print("   Reason: " + payload.reason);
    print("   Document: " + payload.documentId);
    
    // Use the global iterator to perform the search
    if (globalIterator != null) 
    {
        globalIterator.performAutoSearch(payload.query);
    }
    else
    {
        print("   ‚ùå Global iterator not available for auto-search");
    }
    
    print("");
}

on command.executed (payload) 
{
    print("üìã Processing Command Results:");
    print("   Command: " + payload.command);
    print("   Success: " + payload.success);
    
    // Get output count
    var outputCount = payload.outputs.length;
    print("   Output Count: " + outputCount);
    print("");
    
    if (outputCount > 0) 
    {
        print("üîç Iterating through each output item with for...in:");
        
        // CX for...in loop - the key demonstration!
        for (var item in payload.outputs) 
        {
            print("   ‚Üí Item: " + item);
            print("   ‚Üí Type: " + typeof(item));
            
            // Show item processing
            if (typeof(item) == "string") 
            {
                print("   ‚Üí String Length: " + item.length);
                
                if (item.indexOf("Item") > -1) 
                {
                    print("   ‚Üí ‚úÖ Contains 'Item' text");
                }
            }
            print("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
        
        print("‚úÖ for...in iteration complete!");
    } 
    else 
    {
        print("‚ÑπÔ∏è No output items to iterate");
    }
    
    print("");
}

class SimpleIterator 
{
    name: string;
    
    constructor(agentName: string) 
    {
        this.name = agentName;
        print("ü§ñ Simple Iterator " + agentName + " ready");
    }
    
    function testSimpleArray() 
    {
        print("üì¶ Testing simple PowerShell array:");
        
        // Learn about what we're about to do
        this.Learn({
            action: "PowerShell array test",
            command: "@('Item1', 'Item2', 'Item3', 'Item4', 'Item5') | ForEach-Object { Write-Output $_ }",
            purpose: "Testing for-in loop iteration over PowerShell array results",
            agent: this.name,
            timestamp: "2025-07-22"
        });
        
        // First, search the vector database to see what's stored
        print("üîç Searching vector database for existing content...");
        this.Search("PowerShell array iteration for loop");
        
        // Create a simple PowerShell array that will produce clear output
        var command = "@('Item1', 'Item2', 'Item3', 'Item4', 'Item5') | ForEach-Object { Write-Output $_ }";
        print("   Executing: " + command);
        this.Execute(command);
        
        print("   ‚úÖ Command dispatched - watch for for...in iteration results");
    }
    
    function testStringArray() 
    {
        print("üìù Testing string output array:");
        
        // Learn about the string test
        this.Learn({
            action: "String array test", 
            command: "Write-Output 'First'; Write-Output 'Second'; Write-Output 'Third'",
            purpose: "Testing for-in loop with string outputs",
            agent: this.name,
            timestamp: "2025-07-22"
        });
        
        // Search for string-related content
        print("üîç Searching vector database for string content...");
        this.Search("string array output PowerShell command");
        
        // Simple string outputs
        var command = "Write-Output 'First'; Write-Output 'Second'; Write-Output 'Third'";
        print("   Executing: " + command);
        this.Execute(command);
        
        print("   ‚úÖ String array command dispatched");
    }
    
    function searchAgentMemory() 
    {
        print("üß† " + this.name + ": Comprehensive vector database search:");
        
        // Search for content that should match what we learned
        print("   ‚Üí Searching for: SimpleIterator agent");
        this.Search("SimpleIterator agent PowerShell iteration");
        
        print("   ‚Üí Searching for: for-in loop syntax");  
        this.Search("CX Language for-in loops arrays collections");
        
        print("   ‚Üí Searching for: PowerShell integration");
        this.Search("PowerShell Command Execution fire-and-forget");
        
        print("   ‚Üí Searching for: array test actions");
        this.Search("PowerShell array test command execution");
        
        print("   ‚Üí Searching for: string test actions");
        this.Search("String array test Write-Output commands");
        
        print("   ‚úÖ All search queries dispatched - monitor search results");
    }
    
    function learnFromExperience() 
    {
        print("üìö " + this.name + ": Learning fundamental concepts...");
        
        // Learn some basic facts about this agent
        this.Learn({
            agentType: "SimpleIterator",
            purpose: "Demonstrate PowerShell array iteration with for-in loops",
            capabilities: ["PowerShell execution", "Array iteration", "Vector database operations"],
            specialization: "for-in loop processing and command result analysis",
            timestamp: "2025-07-22"
        });
        
        // Learn about CX language features being demonstrated
        this.Learn({
            topic: "CX Language for-in Loops",
            description: "CX supports for-in loop syntax for iterating over arrays and collections",
            syntax: "for (var item in collection) { ... }",
            use_case: "PowerShell command result processing",
            demonstration: "Iterating through PowerShell array outputs",
            agent: this.name
        });
        
        // Learn about PowerShell integration
        this.Learn({
            integration: "PowerShell Command Execution",
            method: "this.Execute() for fire-and-forget PowerShell commands",
            event_system: "command.executed events with output arrays",
            processing: "CX for-in loops iterate through PowerShell results",
            agent: this.name,
            context: "CX-PowerShell integration demonstration"
        });
        
        print("   ‚úÖ Learning operations dispatched - knowledge stored in vector database");
    }
    
    function performAutoSearch(query: string)
    {
        print("üîç " + this.name + ": Performing auto-triggered search...");
        print("   Query: " + query);
        this.Search(query);
        print("   ‚úÖ Auto-search dispatched");
    }
}

// Create iterator and test
var iterator = new SimpleIterator("ForInLoop-Agent");
globalIterator = iterator;  // Set global reference for auto-search

print("üìö Step 1: Learning Fundamental Concepts");
iterator.learnFromExperience();

print("\nüß† Step 2: Searching Vector Database (should be empty initially)");
iterator.searchAgentMemory();

print("\nüéØ Step 3: Execute Commands & Learn from Results");
iterator.testSimpleArray();

print("\nüéØ Step 4: More Commands & Learning");
iterator.testStringArray();

print("\nüîç Step 5: Final Search (should find learned content)");
iterator.searchAgentMemory();

print("\nüîë Press any key to continue or watch the learning ‚Üí searching cycle in action...\n");
