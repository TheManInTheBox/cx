// Runtime Debug Test - Minimal test without emit statements
// Focus on testing InferService and LearnService processing

conscious RuntimeDebugger
{
    realize(self: conscious)
    {
        learn self;
        
        print("🔍 RUNTIME DEBUG TEST STARTING");
        print("==============================");

        print("✅ Testing service event processing...");

        // Test LearnService with simple request
        learn {
            data: {
                content: "Simple learn test",
                type: "debug_test"
            },
            handlers: [ "learn.debug.complete" ]
        };

        print("✅ Learn request sent");

        // Test InferService with simple request
        infer {
            context: "Simple infer test",
            data: {
                prompt: "What is 2+2?",
                type: "math"
            },
            handlers: [ "infer.debug.complete" ]
        };

        print("✅ Infer request sent");
        
        // Wait for processing
        await { reason: "Wait for service processing", minDurationMs: 3000, maxDurationMs: 6000 };

        print("🔍 RUNTIME DEBUG TEST COMPLETE");
        print("If you see CAUGHT messages above, services are working");
        print("If not, there may be service registration or processing issues");
    }
}

// Global event handlers (outside conscious class)
on learn.debug.complete (event) {
    print("🎯 CAUGHT: learn.debug.complete event");
    print("🔍 Event data: " + event);
    print("✅ LearnService is processing events!");
}

on infer.debug.complete (event) {
    print("🎯 CAUGHT: infer.debug.complete event");
    print("🔍 Event data: " + event);
    print("✅ InferService is processing events!");
}

var debugger = new RuntimeDebugger({ });
print("🧠 Runtime debug test with conscious class completed");
