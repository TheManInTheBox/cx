// CX Language Vector Database Demo
// Testing enterprise RAG capabilities with Kernel Memory

print("🔥 CX Language Phase 4+ Vector Database Demo");
print("Enterprise RAG with Kernel Memory Integration");
print("==============================================");

// Using the new vector database service

try
{
    print("📊 Testing vector database capabilities...");
    
    // Test 1: Ingest text content
    print("\n1. Ingesting sample documentation...");
    
    var docs = [
        "CX is an AI-native programming language with first-class AI functions.",
        "The language supports task(), reason(), synthesize(), and generate() AI functions.",
        "CX compiles to .NET IL code for high performance execution.",
        "Vector databases enable semantic search and RAG (Retrieval-Augmented Generation).",
        "Kernel Memory provides enterprise-grade document processing and chunking."
    ];
    
    // Test ingestion with iteration
    var docIndex = 0;
    for (var doc in docs)
    {
        var docId = "cx_doc_" + docIndex;
        var options = {
            IndexName: "cx-documentation",
            Tags: {
                "source": "demo",
                "version": "1.0",
                "type": "documentation"
            }
        };
        
        var result = vectorDb.IngestTextAsync(doc, docId, options);
        print("  ✅ Ingested: " + docId + " - Status: " + result.Status);
        docIndex = docIndex + 1;
    }
    
    print("\n2. Testing semantic search...");
    
    var queries = [
        "What are AI functions?",
        "How does compilation work?",
        "What is RAG?"
    ];
    
    for (var query in queries)
    {
        var searchOptions = {
            IndexName: "cx-documentation",
            MaxResults: 3,
            MinRelevance: 0.5
        };
        
        print("\n  🔍 Query: '" + query + "'");
        var searchResults = vectorDb.SearchAsync(query, searchOptions);
        
        print("    Found " + searchResults.TotalResults + " results:");
        for (var result in searchResults.Results)
        {
            print("    📄 Score: " + result.Score + " - " + result.Content);
        }
    }
    
    print("\n3. Testing RAG question answering...");
    
    var ragQuestions = [
        "What makes CX language special for AI development?",
        "Explain how vector databases work in CX"
    ];
    
    for (var question in ragQuestions)
    {
        var ragOptions = {
            IndexName: "cx-documentation"
        };
        
        print("\n  ❓ Question: " + question);
        var answer = vectorDb.AskAsync(question, ragOptions);
        print("  💡 Answer: " + answer);
    }
    
    print("\n4. Getting database statistics...");
    
    var stats = vectorDb.GetStatsAsync("cx-documentation");
    print("  📈 Index: " + stats.IndexName);
    print("  📚 Documents: " + stats.DocumentCount);
    print("  🔢 Vectors: " + stats.VectorCount);
    print("  💾 Storage: " + stats.StorageSize + " bytes");
    print("  🕐 Last Updated: " + stats.LastUpdated);
    
    print("\n🎉 Vector Database Demo Complete!");
    print("✅ Enterprise RAG capabilities working");
    print("✅ Kernel Memory integration successful");
    print("✅ Document ingestion, search, and Q&A operational");
    
}
catch (error)
{
    print("❌ Vector Database Error: " + error);
    print("💡 Note: Vector database requires Azure OpenAI configuration");
    print("   Please check appsettings.json for Azure:OpenAI settings");
}

print("\n🚀 Phase 4+ Complete - Ready for Autonomous Agents!");
