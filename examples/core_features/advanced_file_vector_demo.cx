// Advanced File to Vector Demo
// Reads an existing project file and stores it in vector cache

conscious AdvancedFileVectorDemo {
    realize(self: conscious) {
        learn self;
        
        print("üìö ADVANCED FILE TO VECTOR CACHE DEMO");
        print("====================================");
        
        // Read the README.md file from the project
        var readmeFile = "README.md";
        
        print("üìñ Checking if README.md exists...");
        if (fileExists(readmeFile)) {
            print("‚úÖ Found README.md file");
            
            // Get file information
            var fileSize = getFileSize(readmeFile);
            var lastModified = getLastWriteTime(readmeFile);
            
            print("üìä File Information:");
            print("  - File: " + readmeFile);
            print("  - Size: " + fileSize + " bytes");
            print("  - Last modified: " + lastModified);
            
            // Read the file contents
            print("\nüìÑ Reading file contents...");
            var content = readFile(readmeFile);
            
            print("üìù File Contents (first 500 characters):");
            print("========================================");
            var preview = content;
            if (content.length > 500) {
                preview = content.substring(0, 500) + "... [truncated]";
            }
            print(preview);
            
            // Store full content in vector cache
            print("\nüß† Storing full README content in vector cache...");
            learn {
                data: content,
                category: "documentation",
                source: readmeFile,
                metadata: {
                    filename: readmeFile,
                    fileSize: fileSize,
                    lastModified: lastModified,
                    contentType: "markdown",
                    description: "Project README documentation"
                }
            };
            
            // Split into sections and store each section
            print("üìã Splitting content into sections for granular storage...");
            var sections = content.split("\n\n");
            var sectionNumber = 1;
            
            for (var section in sections) {
                if (section.trim() != "") {
                    learn {
                        data: section,
                        category: "documentation_section",
                        source: readmeFile + ":section" + sectionNumber,
                        metadata: {
                            filename: readmeFile,
                            sectionNumber: sectionNumber,
                            sectionPreview: section.substring(0, 100)
                        }
                    };
                    
                    var sectionPreview = section.substring(0, 80);
                    if (section.length > 80) {
                        sectionPreview = sectionPreview + "...";
                    }
                    print("  - Section " + sectionNumber + ": " + sectionPreview);
                    sectionNumber = sectionNumber + 1;
                }
            }
            
            print("\n‚úÖ README content successfully stored in vector cache!");
            print("üìä Storage Summary:");
            print("  - Full document stored as single vector");
            print("  - " + (sectionNumber - 1) + " sections stored as individual vectors");
            print("  - Total content length: " + content.length + " characters");
            
        } else {
            print("‚ùå README.md not found, creating sample content...");
            
            // Create sample content
            var sampleContent = "# CX Language Project\n\nThis is a sample README file for demonstration.\n\n## Features\n- Event-driven architecture\n- Consciousness integration\n- Vector storage capabilities\n\n## Usage\nThis demonstrates file reading and vector storage.";
            
            writeFile(readmeFile, sampleContent);
            print("‚úÖ Created sample README.md");
            
            // Read and process the sample file
            var content = readFile(readmeFile);
            print("üìÑ Sample Content:");
            print(content);
            
            // Store in vector cache
            learn {
                data: content,
                category: "sample_documentation",
                source: readmeFile,
                metadata: {
                    filename: readmeFile,
                    contentType: "markdown",
                    description: "Sample README for demo"
                }
            };
            
            print("üß† Sample content stored in vector cache");
            
            // Clean up sample file
            deleteFile(readmeFile);
            print("üóëÔ∏è Sample file cleaned up");
        }
        
        print("\nüéâ ADVANCED VECTOR CACHE DEMO COMPLETE!");
        print("=======================================");
        print("File contents are now searchable in the vector database!");
    }
}

// Create and run the advanced demo
var advancedDemo = new AdvancedFileVectorDemo({});
print("üöÄ Advanced File to Vector Cache demo finished!");
