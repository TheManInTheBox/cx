// PowerShell Output Iteration Demo - Complete for...in loop processing
// Demonstrates iterating over PowerShell execution results using CX for...in syntax
// This shows how agents can process each output item individually

print("üîÑ PowerShell Output Iteration Demo Starting...\n");

// Event handler to process PowerShell command results with for...in iteration
on command.executed (payload) 
{
    print("üìã Command Execution Complete - Processing Results:");
    print("   Agent: " + payload.agent);
    print("   Command: " + payload.command);
    print("   Success: " + payload.success);
    print("   Exit Code: " + payload.exitCode);
    print("");
    
    // Check if we have outputs to iterate over
    var outputCount = payload.outputs.length;
    print("üìä Processing " + outputCount + " output items:");
    
    if (outputCount > 0) 
    {
        print("üîç Iterating through each output item:");
        
        // CX for...in loop to iterate over PowerShell outputs
        for (var item in payload.outputs) 
        {
            print("   ‚Üí Output Item: " + item);
            print("     Type: " + typeof(item));
            
            // Process different types of PowerShell output
            if (typeof(item) == "string") 
            {
                print("     String Content: '" + item + "'");                
            }
            else 
            {
                print("     Complex Object: " + item);
            }
            
            print("   ---");
        }
        
        print("‚úÖ Output iteration complete - processed " + outputCount + " items");
    } 
    else 
    {
        print("‚ÑπÔ∏è No output items to iterate over");
    }
    
    // Also iterate over errors if present
    var errorCount = payload.errors.length;
    if (errorCount > 0) 
    {
        print("");
        print("‚ùå Processing " + errorCount + " error items:");
        
        for (var error in payload.errors) 
        {
            print("   ‚Üí Error: " + error);
            print("     Error Type: " + typeof(error));
        }
    }
    
    print("üéØ Event processing complete\n");
}

// Agent class to demonstrate PowerShell execution with iteration
class OutputProcessor 
{
    name: string;
    
    constructor(agentName: string) 
    {
        this.name = agentName;
        print("ü§ñ Output Processor " + agentName + " created");
    }
    
    function runMultipleCommands() 
    {
        print("üîß Running multiple PowerShell commands for iteration testing:");
        
        // Command 1: Get current date/time
        print("   Executing: Get-Date");
        this.Execute("Get-Date");
        
        // Small delay then next command
        print("   Preparing next command...");
        
        // Command 2: Get PowerShell version info
        print("   Executing: Get-Host");
        this.Execute("Get-Host");
        
        // Command 3: List current directory (first 5 items)
        print("   Executing: Get-ChildItem | Select-Object -First 5");
        this.Execute("Get-ChildItem | Select-Object -First 5");
        
        print("   ‚úÖ All commands dispatched - results will be processed via events");
    }
    
    function runSingleDetailedCommand() 
    {
        print("üìù Running detailed PowerShell command for rich iteration:");
        
        // Get system information that returns multiple objects
        var command = "Get-ComputerInfo | Select-Object WindowsProductName, TotalPhysicalMemory, CsProcessors";
        print("   Command: " + command);
        this.Execute(command);
        
        print("   Command dispatched - awaiting detailed results...");
    }
    
    function testArrayProcessing() 
    {
        print("üì¶ Testing array processing with PowerShell arrays:");
        
        // Create a PowerShell array and iterate over it
        var arrayCommand = "@('Item1', 'Item2', 'Item3', 'Item4') | ForEach-Object { $_ }";
        print("   Array Command: " + arrayCommand);
        this.Execute(arrayCommand);
        
        print("   Array command dispatched - results will demonstrate iteration...");
    }
}

// Create processor instance
var processor = new OutputProcessor("IterationDemo-Agent");

// Test 1: Single command with detailed output
print("üéØ Test 1: Single Command with Iteration");
processor.runSingleDetailedCommand();

print("\n‚è±Ô∏è Waiting for results before next test...");
print("üîë Press any key to continue to next test, or wait for event processing...\n");
