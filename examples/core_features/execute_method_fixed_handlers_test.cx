// 🛠️ EXECUTE METHOD WITH FIXED EVENT HANDLERS
// Testing the safety improvements to event handler registration

print("🚀 EXECUTE METHOD WITH FIXED EVENT HANDLERS TEST");

class SystemAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("🤖 System agent with event handlers created: " + this.name);
    }
    
    function performSystemAnalysis()
    {
        print("🔍 " + this.name + " starting system analysis with event handling...");
        
        // Fire-and-forget PowerShell execution
        this.Execute("Get-ComputerInfo | Select-Object WindowsProductName, TotalPhysicalMemory");
        this.Execute("Get-Process | Select-Object Name, WorkingSet | Sort-Object WorkingSet -Descending | Select-Object -First 5");
        
        print("💻 System analysis commands dispatched - results will arrive via events");
    }
    
    function performNetworkCheck()
    {
        print("🌐 " + this.name + " checking network status with event handling...");
        
        // PowerShell commands with event handling
        this.Execute("Test-Connection -ComputerName google.com -Count 1 -Quiet");
        this.Execute("Get-NetAdapter | Where-Object Status -eq 'Up' | Select-Object Name, Speed");
        
        print("🔗 Network check commands initiated - monitoring for results");
    }
    
    // Event handlers to test the fixed registration system
    on command.executed (payload)
    {
        if (payload.agent == this.name)
        {
            print("✅ Command completed successfully:");
            print("   Agent: " + payload.agent);
            print("   Command: " + payload.command);
            print("   Results: " + payload.outputs + " items");
            print("   Exit Code: " + payload.exitCode);
            
            if (payload.outputs > 0)
            {
                print("   Sample Result: " + payload.outputs[0].value);
            }
            
            // Test cognitive integration with successful execution
            this.Learn("command_execution", payload.command, payload.success, this.name, payload.executionTime);
            this.Think("Analyze command execution results for system insights");
        }
    }
    
    on command.error (payload)
    {
        if (payload.agent == this.name)
        {
            print("❌ Command failed:");
            print("   Agent: " + payload.agent);
            print("   Command: " + payload.command);
            print("   Error: " + payload.errors[0].message);
            
            // Learn from errors for improvement
            this.Learn("command_error", payload.command, payload.errors[0].message, this.name, payload.executionTime);
        }
    }
}

// Create agent and test fixed event handlers
var agent = new SystemAgent("SafetyTest-Pro");

print("\n🎬 FIXED EVENT HANDLER TESTING STARTING...\n");

agent.performSystemAnalysis();

print("\n⏱️ Brief pause for command processing...\n");

agent.performNetworkCheck();

print("\n📋 TESTING FIXED EVENT HANDLER FEATURES:");
print("✅ Safe reflection with parameter validation");
print("✅ Null safety checks for instance and payload");
print("✅ Specific exception handling for reflection errors");
print("✅ Task execution safety with try-catch wrapping");
print("✅ Enhanced error logging with stack traces");
print("✅ Method signature validation before registration");

print("\n🔧 SAFETY IMPROVEMENTS IMPLEMENTED:");
print("✅ TargetParameterCountException handling");
print("✅ ArgumentException handling for type mismatches");
print("✅ TargetInvocationException handling");
print("✅ Null instance and payload validation");
print("✅ Method parameter count validation");
print("✅ Safe Task awaiting with exception handling");

print("\n🎯 Expected Results:");
print("• Event handlers should register without memory access violations");
print("• PowerShell commands should execute and trigger events safely");
print("• Reflection calls should be protected with comprehensive error handling");
print("• System should remain stable during event processing");

print("\n🔬 Test complete - monitoring for event handler execution...");
