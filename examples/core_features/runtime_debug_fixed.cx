// Runtime Debug Test - Minimal test to debug service processing
// Focus on single service interaction using conscious classes with proper syntax

conscious RuntimeDebugger
{
    realize(self: conscious)
    {
        learn self;
        
        print("🔍 RUNTIME DEBUG TEST STARTING");
        print("==============================");

        print("✅ Testing service event processing...");

        // Test LearnService with simple request
        learn {
            data: {
                content: "Simple learn test",
                type: "debug_test"
            },
            handlers: [ "learn.debug.complete" ]
        };

        print("✅ Learn request sent");

        // Test InferService with 2+2 calculation
        infer {
            context: "What is 2+2?",
            data: {
                prompt: "Calculate 2+2 and provide the result",
                type: "math_calculation",
                operation: "addition"
            },
            handlers: [ "infer.debug.complete" ]
        };

        print("✅ Infer request sent for 2+2 calculation");
        
        // Wait for processing
        await { reason: "Wait for service processing", minDurationMs: 3000, maxDurationMs: 6000 };

        print("🔍 RUNTIME DEBUG TEST COMPLETE");
        print("If you see CAUGHT messages above, services are working");
        print("If not, there may be service registration or processing issues");
    }

    // Class-based event handlers (inside conscious class)
    on learn.debug.complete (event) {
        print("🎯 CAUGHT: learn.debug.complete event (class handler)");
        print("🔍 Event data: " + event.data);
        print("📚 Vector stored: " + event.vectorStored);
        print("✅ LearnService is processing events in class!");
    }

    on infer.debug.complete (event) {
        print("🎯 CAUGHT: infer.debug.complete event (class handler)");
        print("🔍 Context: " + event.context);
        print("🧮 Calculation result: " + event.result);
        print("✅ InferService processed 2+2 calculation in class!");
    }

    on inference.complete (event) {
        print("🎯 CAUGHT: inference.complete event (class handler)");
        print("🧮 2+2 = " + event.result);
        print("✅ Math calculation completed successfully in class!");
    }
}

// Global event handlers (outside conscious class)
on learn.debug.complete (event) {
    print("🎯 CAUGHT: learn.debug.complete event");
    print("🔍 Event data: " + event.data);
    print("� Vector stored: " + event.vectorStored);
    print("✅ LearnService is processing events!");
}

on infer.debug.complete (event) {
    print("🎯 CAUGHT: infer.debug.complete event");
    print("🔍 Context: " + event.context);
    print("🧮 Calculation result: " + event.result);
    print("✅ InferService processed 2+2 calculation!");
}

on inference.complete (event) {
    print("🎯 CAUGHT: inference.complete event (default)");
    print("🧮 2+2 = " + event.result);
    print("✅ Math calculation completed successfully!");
}

// Create and run the test
var debugger = new RuntimeDebugger({ });
print("🧠 Runtime debug test with 2+2 calculation completed");
