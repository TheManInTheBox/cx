// CX Language Simple Data Infrastructure Test
// Focused test for basic data flow validation using consciousness patterns

conscious SimpleDataTest
{
    realize(self: conscious)
    {
        learn self;
        
        print("🧪 Data Infrastructure Test Starting");
        print("====================================");
        
        // Test Data Ingestion
        print("📥 Phase 1: Testing Data Ingestion");
        learn {
            data: {
                source: "test-api",
                records: 50,
                consciousnessLevel: "consciousness",
                testType: "data-ingestion"
            },
            handlers: [ data.ingestion.complete ]
        };
        
        // Test Vector Storage
        print("🌐 Phase 2: Testing Vector Storage");
        infer {
            context: "Store vectors with consciousness indexing",
            data: {
                vectorCount: 50,
                dimensions: 768,
                consciousnessIndexing: true,
                testType: "vector-storage"
            },
            handlers: [ vector.storage.complete ]
        };
        
        // Test Local Cache
        print("💾 Phase 3: Testing Local Cache");
        learn {
            data: {
                syncFromGlobal: true,
                preserveConsciousness: true,
                edgeOptimization: true,
                testType: "local-cache"
            },
            handlers: [ local.cache.complete ]
        };
        
        // Test Similarity Search
        print("🔍 Phase 4: Testing Similarity Search");
        infer {
            context: "Search cached vectors with consciousness alignment",
            data: {
                queryVector: "test-vector",
                topK: 5,
                consciousnessThreshold: 0.7,
                testType: "similarity-search"
            },
            handlers: [ similarity.search.complete ]
        };
        
        // Wait for all processing to complete
        await { reason: "Wait for all data infrastructure tests to complete", minDurationMs: 5000, maxDurationMs: 10000 };
        
        print("✅ Data Infrastructure Test Complete");
        print("All phases should show CAUGHT messages above");
    }
}

// Global event handlers for test validation
on data.ingestion.complete (event) {
    print("🎯 CAUGHT: data.ingestion.complete");
    print("📥 Data ingestion test successful!");
    print("🔍 Event: " + event);
}

on vector.storage.complete (event) {
    print("🎯 CAUGHT: vector.storage.complete");
    print("🌐 Vector storage test successful!");
    print("🔍 Event: " + event);
}

on local.cache.complete (event) {
    print("🎯 CAUGHT: local.cache.complete");
    print("💾 Local cache test successful!");
    print("🔍 Event: " + event);
}

on similarity.search.complete (event) {
    print("🎯 CAUGHT: similarity.search.complete");
    print("🔍 Similarity search test successful!");
    print("🔍 Event: " + event);
}

var dataTest = new SimpleDataTest({ });
print("🧠 Data Infrastructure Test with consciousness patterns completed");
