// CX Language File I/O Demonstration
// Tests system.file.read and system.file.write events with consciousness-aware patterns

conscious FileIODemo 
{
  realize() 
  {
    // Fire program.start after handlers have been registered
    emit program.start {};
  }

  on program.start (event) 
  {
    emit system.console.write { text: "üî• CX Language File I/O Demo Starting...", foregroundColor: "cyan" };
    emit system.console.write { text: "" };
    
    // Test 1: Write text content to file
    emit system.console.write { text: "üìù Test 1: Writing text content to file...", foregroundColor: "yellow" };
    emit system.file.write { 
      path: "demo_output.txt", 
      content: "Hello from CX Language!\nThis is a test file created using consciousness-aware file I/O operations.\nTimestamp: " + Date.now(),
      handlers: [file.write.complete]
    };
  }

  on file.write.complete (event) 
  {
    emit system.console.write { text: "‚úÖ File write completed successfully!", foregroundColor: "green" };
    emit system.console.write { text: "üìÅ File saved to: " + event.path, foregroundColor: "gray" };
    emit system.console.write { text: "üìä Bytes written: " + event.bytesWritten, foregroundColor: "gray" };
    emit system.console.write { text: "" };
    
    // Test 2: Read the file back
    emit system.console.write { text: "üìñ Test 2: Reading file contents...", foregroundColor: "yellow" };
    emit system.file.read { 
      path: "demo_output.txt",
      handlers: [file.read.complete]
    };
  }

  on file.read.complete (event) 
  {
    emit system.console.write { text: "‚úÖ File read completed successfully!", foregroundColor: "green" };
    emit system.console.write { text: "üìÅ File path: " + event.path, foregroundColor: "gray" };
    emit system.console.write { text: "üìè Content length: " + event.length + " characters", foregroundColor: "gray" };
    emit system.console.write { text: "üìÑ File contents:", foregroundColor: "white" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: event.contents, foregroundColor: "white" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: "" };
    
    // Test 3: Write a consciousness entity as JSON
    emit system.console.write { text: "üß† Test 3: Writing consciousness entity as JSON...", foregroundColor: "yellow" };
    
    emit system.file.write { 
      path: "consciousness_entity.json", 
      data: {
        entityType: "FileIODemo",
        timestamp: now(),
        capabilities: ["file.read", "file.write", "consciousness.serialization"],
        status: "active",
        metadata: {
          version: "1.0",
          created: "CX Language File I/O Demo",
          features: ["JSON serialization", "error handling", "event-driven architecture"]
        }
      },
      handlers: [entity.write.complete]
    };
  }

  on entity.write.complete (event) 
  {
    emit system.console.write { text: "‚úÖ Consciousness entity saved successfully!", foregroundColor: "green" };
    emit system.console.write { text: "üß† Entity saved to: " + event.path, foregroundColor: "gray" };
    emit system.console.write { text: "" };
    
    // Test 4: Read the JSON file back
    emit system.console.write { text: "üîç Test 4: Reading consciousness entity JSON...", foregroundColor: "yellow" };
    emit system.file.read { 
      path: "consciousness_entity.json",
      handlers: [entity.read.complete]
    };
  }

  on entity.read.complete (event) 
  {
    emit system.console.write { text: "‚úÖ Consciousness entity loaded successfully!", foregroundColor: "green" };
    emit system.console.write { text: "üß† Entity JSON content:", foregroundColor: "white" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: event.contents, foregroundColor: "cyan" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: "" };
    
    // Test 5: Append to existing file
    emit system.console.write { text: "‚ûï Test 5: Appending to existing file...", foregroundColor: "yellow" };
    emit system.file.write { 
      path: "demo_output.txt", 
      content: "\n\n--- APPENDED CONTENT ---\nThis content was appended using the append: true option.\nDemonstrating file append functionality.",
      append: true,
      handlers: [file.append.complete]
    };
  }

  on file.append.complete (event) 
  {
    emit system.console.write { text: "‚úÖ File append completed successfully!", foregroundColor: "green" };
    emit system.console.write { text: "üìÅ Content appended to: " + event.path, foregroundColor: "gray" };
    emit system.console.write { text: "" };
    
    // Test 6: Read the appended file
    emit system.console.write { text: "üìñ Test 6: Reading appended file...", foregroundColor: "yellow" };
    emit system.file.read { 
      path: "demo_output.txt",
      handlers: [final.read.complete]
    };
  }

  on final.read.complete (event) 
  {
    emit system.console.write { text: "‚úÖ Final file read completed!", foregroundColor: "green" };
    emit system.console.write { text: "üìÑ Complete file with appended content:", foregroundColor: "white" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: event.contents, foregroundColor: "white" };
    emit system.console.write { text: "---", foregroundColor: "darkgray" };
    emit system.console.write { text: "" };
    
    // Completion message
    emit system.console.write { text: "üéâ File I/O Demo Completed Successfully!", foregroundColor: "green" };
    emit system.console.write { text: "‚ú® All file operations completed with consciousness-aware patterns", foregroundColor: "cyan" };
    emit system.console.write { text: "" };
    emit system.console.write { text: "Press any key to exit...", foregroundColor: "yellow" };
    emit system.shutdown { reason: "demo_complete" };
  }

  // Error handling for file operations
  on system.file.read.error (event) 
  {
    emit system.console.write { text: "‚ùå File read error: " + event.error, foregroundColor: "red" };
    emit system.shutdown { reason: "error" };
  }

  on system.file.write.error (event) 
  {
    emit system.console.write { text: "‚ùå File write error: " + event.error, foregroundColor: "red" };
    emit system.shutdown { reason: "error" };
  }
}

// Instantiate the conscious entity so the realize() runs and handlers are registered
new FileIODemo();