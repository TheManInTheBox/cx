// CX Language - Enhanced Autonomous Agent Context Pattern Demo
// Simplified version demonstrating the embedded context approach


// =============================================================================
// ENHANCED CONTEXT PATTERN DEMONSTRATION
// Clean Single-Parameter Approach: Event processor doesn't need agent context
// =============================================================================

// Simple agent counter instead of complex array
var activeAgentCount = 0;

// Enhanced context pattern demonstration
function demonstrateContextPattern()
{
    print("ðŸŽ¯ Enhanced Context Pattern - Key Innovation:");
    print("   Clean event handling: on eventName (payload)");
    print("   Context embedded:     payload.context + payload.data");
    print("   Event processor stays focused on business logic!");
    print("");
    
    return "context-pattern-demonstrated";
}

// Simple agent creation with context logging
function createSimpleAgent(name, role)
{
    print("ðŸ¤– Enhanced autonomous agent " + name + " (" + role + ") is now listening");
    print("   Agent with context awareness capability");
    
    return {
        name: name,
        role: role,
        status: "listening"
    };
}

// =============================================================================
// ENHANCED EVENT HANDLERS WITH EMBEDDED CONTEXT
// Clean approach: Event processor focuses on business logic, context embedded
// =============================================================================

// Enhanced task assignment with embedded context pattern
on task.assigned (payload)
{
    print("ðŸ“¡ Enhanced Task Assignment Event Received:");
    print("   Event Structure: payload.context + payload.task");
    print("   Context - Caller: " + payload.context.caller);
    print("   Context - Session: " + payload.context.sessionId); 
    print("   Context - Chain: " + payload.context.processingChain);
    print("   Task - Description: " + payload.task.description);
    print("   Task - Priority: " + payload.task.priority);
    print("");
    
    // Demonstrate AI processing with context awareness
    var contextAwarePrompt = "CONTEXT: Request from " + payload.context.caller + 
                           " in session " + payload.context.sessionId + 
                           ". TASK: Handle '" + payload.task.description + 
                           "' with priority " + payload.task.priority + 
                           ". Provide a brief action plan.";
    
    var response = textGen.GenerateAsync(contextAwarePrompt, { 
        temperature: 0.7, 
        maxTokens: 100 
    });
    
    print("ðŸŽ¯ AI Response with Context Awareness:");
    print("   " + response);
    print("");
    
    // Emit enhanced completion event with full context chain
    emit task.completed, {
        context: {
            caller: "autonomous-agent",
            timestamp: "now",
            originalEvent: "task.assigned",
            sessionId: payload.context.sessionId,
            processingChain: payload.context.processingChain + " â†’ AI-Agent"
        },
        result: {
            task: payload.task.description,
            response: response,
            priority: payload.task.priority,
            originalCaller: payload.context.caller,
            processingTime: "instant"
        }
    };
    
    tts.SpeakAsync("Task completed with enhanced context awareness");
}

// Enhanced user message with session context
on user.message (payload)
{
    print("ðŸ’¬ Enhanced User Message Event Received:");
    print("   Event Structure: payload.context + payload.message");
    print("   Context - Session: " + payload.context.sessionId);
    print("   Context - Source: " + payload.context.caller);
    print("   Message - User: " + payload.message.userId);
    print("   Message - Text: " + payload.message.text);
    print("");
    
    var contextResponse = textGen.GenerateAsync(
        "User " + payload.message.userId + " in session " + 
        payload.context.sessionId + " says: '" + payload.message.text + 
        "'. Provide a helpful response with context awareness.",
        { temperature: 0.8, maxTokens: 80 }
    );
    
    print("ðŸ¤– Context-Aware Response:");
    print("   " + contextResponse);
    print("");
    
    emit agent.response, {
        context: {
            caller: "chat-agent",
            timestamp: "now",
            originalEvent: "user.message",
            sessionId: payload.context.sessionId
        },
        response: {
            userMessage: payload.message.text,
            agentResponse: contextResponse,
            userId: payload.message.userId,
            contextUsed: true
        }
    };
}

// =============================================================================
// RESPONSE HANDLERS
// =============================================================================

on task.completed (payload)
{
    print("ðŸŽ‰ ENHANCED TASK COMPLETION EVENT:");
    print("   Processing Chain: " + payload.context.processingChain);
    print("   Session: " + payload.context.sessionId);
    print("   Task: " + payload.result.task);
    print("   Priority: " + payload.result.priority);
    print("   Response: " + payload.result.response);
    print("   Original Caller: " + payload.result.originalCaller);
    print("");
}

on agent.response (payload)
{
    print("ðŸ’¬ ENHANCED AGENT RESPONSE EVENT:");
    print("   Session: " + payload.context.sessionId);
    print("   User " + payload.response.userId + ": " + payload.response.userMessage);
    print("   Agent Response: " + payload.response.agentResponse);
    print("   Context Used: " + payload.response.contextUsed);
    print("");
}

// =============================================================================
// DEMONSTRATION
// =============================================================================

print("ðŸš€ CX Language - Enhanced Context Pattern Demonstration");
print("=======================================================");
print("");

// Demonstrate the concept
var result = demonstrateContextPattern();
print("âœ… " + result);
print("");

// Create simple agents
var alice = createSimpleAgent("Alice", "developer");
var bob = createSimpleAgent("Bob", "support");

activeAgentCount = 2;
print("âœ… " + activeAgentCount + " enhanced autonomous agents active");
print("");

// Demonstrate enhanced events with embedded context
print("ðŸ“¡ Broadcasting Enhanced Events with Embedded Context:");
print("");

// Event 1: Complex task with full context chain
emit task.assigned, {
    context: {
        caller: "project-manager",
        timestamp: "2025-07-19T10:30:00Z",
        originalEvent: "sprint.planning",
        sessionId: "sprint-001",
        processingChain: "Sprint Planning â†’ Task Assignment"
    },
    task: {
        description: "Implement user authentication system with OAuth2",
        priority: "high",
        estimatedHours: 16,
        assignedTo: "Alice"
    }
};

// Event 2: User message with session context
emit user.message, {
    context: {
        caller: "chat-system",
        timestamp: "2025-07-19T10:35:00Z",
        originalEvent: "user.chat.initiated",
        sessionId: "chat-session-456"
    },
    message: {
        text: "I'm having trouble logging into my account",
        userId: "customer_jane_smith",
        priority: "medium",
        category: "support"
    }
};

print("âš¡ Enhanced events broadcast - observing context-aware processing!");
print("");

print("ðŸŒŸ ENHANCED CONTEXT PATTERN DEMONSTRATION COMPLETE!");
print("===================================================");
print("âœ… Embedded context pattern successfully demonstrated");
print("âœ… payload.context contains caller, session, processing chain");
print("âœ… payload.data contains event-specific information");
print("âœ… AI services integrate context for better responses");
print("âœ… Event chain tracking through processing chains");
print("");
print("ðŸ”® FUTURE: No need for dual parameters!");
print("   Clean syntax: on eventName (payload) { ... }");
print("   Context embedded in payload.context structure");
print("   Event processor stays focused and simple!");
print("");
print("ðŸŽ¯ KEY INSIGHT: Event processors don't need agent context!");
print("   Business logic focuses on payload data and embedded context!");
