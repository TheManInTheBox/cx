// ========================================================================
// CX Language - Comprehensive Demo
// A complete showcase of the CX language features including AI capabilities
// ========================================================================

print("=== CX Language Comprehensive Demo ===");

// ----------------------
// Part 1: Basic Variables and Data Types
// ----------------------

print("\n--- Basic Variables and Data Types ---");

// Variable declarations with var keyword
var message = "Hello, CX Language!";
var count = 42;
var isActive = true;
var pi = 3;  // Using integer instead of float

// Print the variables
print("message: " + message);
print("count: " + count);
print("isActive: " + isActive);
print("pi: " + pi);

// Variable reassignment
count = 100;
message = "Updated message";
print("Updated count: " + count);
print("Updated message: " + message);

// ----------------------
// Part 2: Arithmetic Operations
// ----------------------

print("\n--- Arithmetic Operations ---");

var a = 20;
var b = 8;

print("a = " + a + ", b = " + b);

// Basic operations
print("Addition (a + b): " + (a + b));
print("Subtraction (a - b): " + (a - b));
print("Multiplication (a * b): " + (a * b));
print("Division (a / b): " + (a / b));

// Complex expressions with precedence
var expr1 = a + b * 2;    // 20 + (8 * 2) = 36
var expr2 = (a + b) * 2;  // (20 + 8) * 2 = 56

print("a + b * 2 = " + expr1);
print("(a + b) * 2 = " + expr2);

// ----------------------
// Part 3: Comparison Operations
// ----------------------

print("\n--- Comparison Operations ---");

var x = 10;
var y = 15;
var z = 10;

print("x = " + x + ", y = " + y + ", z = " + z);

// Equality comparisons
print("x == y: " + (x == y));  // false
print("x == z: " + (x == z));  // true
print("x != y: " + (x != y));  // true

// Relational comparisons
print("x < y: " + (x < y));    // true
print("y > x: " + (y > x));    // true
print("x <= z: " + (x <= z));  // true
print("y >= x: " + (y >= x));  // true

// ----------------------
// Part 4: Logical Operators
// ----------------------

print("\n--- Logical Operators ---");

var isTrue = true;
var isFalse = false;

print("Logical AND (&&):");
print("true && true: " + (isTrue && isTrue));
print("true && false: " + (isTrue && isFalse));
print("false && false: " + (isFalse && isFalse));

print("Logical OR (||):");
print("true || true: " + (isTrue || isTrue));
print("true || false: " + (isTrue || isFalse));
print("false || false: " + (isFalse || isFalse));

print("Logical NOT (!):");
print("!true: " + (!isTrue));
print("!false: " + (!isFalse));

// ----------------------
// Part 5: Control Flow
// ----------------------

print("\n--- Control Flow: If/Else Statements ---");

var age = 25;
var score = 85;

// Simple if statement
if (age >= 18) {
    print("You are an adult");
}

// If/else statement
if (score >= 90) {
    print("Grade: A");
} else {
    print("Grade: B or lower");
}

// Nested if/else statements
if (score >= 90) {
    print("Excellent!");
} else {
    if (score >= 80) {
        print("Good job!");
    } else {
        if (score >= 70) {
            print("Passing grade");
        } else {
            print("Needs improvement");
        }
    }
}

print("\n--- Control Flow: While Loops ---");

// Simple countdown
print("Countdown:");
var counter = 5;
while (counter > 0) {
    print(counter);
    counter = counter - 1;
}
print("Launch!");

// Calculating factorial using while loop
var n = 5;
var factorial = 1;
var i = 1;

while (i <= n) {
    factorial = factorial * i;
    i = i + 1;
}

print("Factorial of " + n + " = " + factorial);

// ----------------------
// Part 6: Functions
// ----------------------

print("\n--- Functions ---");

// Simple function with no parameters
function sayHello() {
    print("Hello from a function!");
}

// Function with local variables
function calculateArea() {
    var length = 10;
    var width = 5;
    var area = length * width;
    print("Area calculation: " + area);
}

// Function with parameters and return value
function add(a, b) {
    return a + b;
}

// Function with conditional logic
function getGrade(score) {
    if (score >= 90) {
        return "A";
    } else if (score >= 80) {
        return "B";
    } else if (score >= 70) {
        return "C";
    } else if (score >= 60) {
        return "D";
    } else {
        return "F";
    }
}

// Call the functions
sayHello();
calculateArea();

var sum = add(10, 20);
print("10 + 20 = " + sum);

var studentGrade = getGrade(85);
print("Student grade: " + studentGrade);

// ----------------------
// Part 7: Self Keyword
// ----------------------

print("\n--- Self Keyword for Function Introspection ---");

// Using the self keyword to get the function's source code
function getSelfDemo() {
    print("Function's own source code:");
    print(self);
    return self;
}

// Call the function to demonstrate self
getSelfDemo();

// ----------------------
// Part 8: AI Functions
// ----------------------

print("\n--- AI Functions ---");

// Task function for autonomous workflows
print("Task AI function example:");
var taskResult = task("Analyze sales data and identify key trends");

// Synthesize function for code generation
print("Synthesize AI function example:");
var synthesizeResult = synthesize("Create a function to calculate Fibonacci numbers");

// Reason function for AI reasoning
print("Reason AI function example:");
var reasonResult = reason("What is the best approach to optimize a database query?");

// Process function for data processing
print("Process AI function example:");
var processResult = process("text", "Analyze customer feedback for sentiment");

// Generate function for content generation
print("Generate AI function example:");
var generateResult = generate("translate", "Hello world");

// Embed function for embeddings
print("Embed AI function example:");
var embedResult = embed("This is a text for embedding");

// Adapt function for code adaptation
print("Adapt AI function example:");
function slowFunction(n) {
    // Deliberately inefficient function
    var sum = 0;
    var i = 0;
    while (i < n) {
        sum = sum + i;
        i = i + 1;
    }
    return sum;
}

adapt("slowFunction");

// ----------------------
// Part 9: Practical Example - Simple Game
// ----------------------

print("\n--- Practical Example: Simple Number Guessing Game ---");

function playGame() {
    var targetNumber = 42; // In a real game, this would be random
    var attempts = 0;
    var maxAttempts = 5;
    var hasWon = false;
    
    print("Welcome to the Number Guessing Game!");
    print("I'm thinking of a number between 1 and 100.");
    
    // Simulate player guesses
    var guesses = [10, 50, 35, 42];
    
    while (attempts < maxAttempts && !hasWon) {
        var guess = guesses[attempts];
        attempts = attempts + 1;
        
        print("Attempt " + attempts + ": Player guessed " + guess);
        
        if (guess < targetNumber) {
            print("Too low! Try a higher number.");
        } else if (guess > targetNumber) {
            print("Too high! Try a lower number.");
        } else {
            print("Correct! You've guessed the number " + targetNumber + "!");
            hasWon = true;
        }
    }
    
    if (!hasWon) {
        print("Game over! You've used all your attempts.");
        print("The number was: " + targetNumber);
    }
    
    if (hasWon) {
        print("Final score: " + ((maxAttempts - attempts + 1) * 20) + " points");
    } else {
        print("Final score: 0 points");
    }
}

// Start the game
playGame();

print("\n=== CX Language Comprehensive Demo Complete ===");
