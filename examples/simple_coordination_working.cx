// âœ… WORKING: Simple agent coordination with minimal IL complexity
// Each agent has scoped event handlers, simplified to avoid JIT issues

class SimpleCoordinatedAgent
{
    name: string;
    personality: string;
    
    constructor(agentName: string, agentPersonality: string)
    {
        this.name = agentName;
        this.personality = agentPersonality;
        print("ðŸ¤– " + this.name + " (" + this.personality + ") ready for coordination");
    }
    
    // Simple scoped event handlers
    on agent.wants.to.speak (event)
    {
        if (event.agentName == this.name)
        {
            print("ðŸ’­ " + this.name + " considering timing...");
            
            // Simple think call without complex objects
            think { 
                prompt: "Should I speak now?",
                handlers: [ decision.made ]
            };
        }
    }
    
    on decision.made (event)
    {
        print("ðŸ§  " + this.name + " decision: proceed to speak");
        
        // Skip complex logic, just approve speaking
        emit speech.ready { 
            agent: this.name,
            approved: true 
        };
    }
    
    on speech.ready (event)
    {
        if (event.agent == this.name)
        {
            print("ðŸŽ¬ " + this.name + " starting speech...");
            
            speak { 
                text: "Hello! I'm " + this.name + " speaking with my " + this.personality + " personality.",
                rate: 0.98
            };
        }
    }
}

// Global Azure integration handlers
on realtime.connected (event)
{
    print("âœ… Azure connected - creating session");
    emit realtime.session.create { deployment: "gpt-4o-mini-realtime-preview" };
}

on realtime.session.created (event)
{
    print("âœ… Session ready - starting simple coordination");
    emit coordination.ready { };
}

on ai.speak.request (event)
{
    print("ðŸŽ¤ Routing speech to Azure: " + event.text);
    emit realtime.text.send {
        text: event.text,
        deployment: "gpt-4o-mini-realtime-preview"
    };
}

on realtime.audio.response (event)
{
    // âœ… FIXED: Safe audio data handling without casting errors
    if (event.audioData != null)
    {
        print("ðŸ”Š Streaming audio...");
        emit audio.stream.direct { 
            audioData: event.audioData,
            format: "24kHz_16bit_mono_PCM",
            autoPlay: true,
            hasData: true
        };
    }
    else
    {
        print("ðŸ”Š Audio response - no data available");
        emit audio.stream.direct { 
            hasData: false,
            reason: "no_audio_data"
        };
    }
    
    if (event.isComplete)
    {
        print("âœ… Speech complete!");
    }
}

// Create coordinated agents
var alice = new SimpleCoordinatedAgent("Alice", "enthusiastic");
var bob = new SimpleCoordinatedAgent("Bob", "analytical");
var charlie = new SimpleCoordinatedAgent("Charlie", "diplomatic");

print("=== SIMPLE AI COORDINATION ===");
print("ðŸ§  Agents coordinate with scoped event handlers");
print("ðŸŽ§ Audio at 2% slower rate");
print("");

// Connect to Azure
emit realtime.connect { demo: "simple_coordination" };

// Start coordination
on coordination.ready (event)
{
    print("ðŸš€ Simple coordination active!");
    
    // Trigger agents one by one
    emit agent.wants.to.speak { agentName: "Alice" };
    emit agent.wants.to.speak { agentName: "Bob" };  
    emit agent.wants.to.speak { agentName: "Charlie" };
    
    print("ðŸŽ¯ All agents triggered with simple coordination");
}

print("âœ¨ Simple coordination system starting...");
