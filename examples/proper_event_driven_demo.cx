// Proper Event-Driven Architecture Demo
// Uses 'emit' keyword instead of function calls
// Demonstrates auto-registration of agents with event handlers
// Shows wildcard 'any' handling for agent registration

print("🚀 PROPER EVENT-DRIVEN ARCHITECTURE DEMO");
print("=========================================");

// Agent classes with event handlers - should auto-register to namespace bus
class SupportAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
    }
    
    // This 'on' handler should auto-register agent to "support" namespace
    on support.any (payload)
    {
        print("🎯 " + this.name + " received support event");
        print("   Payload: " + payload);
    }
    
    // Specific ticket handler
    on support.tickets.new (payload)
    {
        print("🎫 " + this.name + " handling new ticket: " + payload.ticketId);
    }
}

class DevelopmentAgent  
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
    }
    
    // This 'on' handler should auto-register agent to "dev" namespace
    on dev.any (payload)
    {
        print("💻 " + this.name + " received dev event");
    }
    
    // Specific task handler
    on dev.tasks.assigned (payload)
    {
        print("📋 " + this.name + " assigned task: " + payload.taskId);
    }
}

class SystemMonitor
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
    }
    
    // This 'any.critical' handler should auto-register for ALL namespaces critical events
    on any.critical (payload)
    {
        print("🚨 " + this.name + " CRITICAL ALERT");
        print("   Server: " + payload.server + ", Issue: " + payload.issue);
    }
    
    // Specific system events
    on system.any (payload)
    {
        print("🖥️ " + this.name + " system event");
    }
}

try
{
    // Create agent instances - should auto-register based on their 'on' handlers
    var alice = new SupportAgent("Alice");
    var bob = new DevelopmentAgent("Bob");  
    var monitor = new SystemMonitor("SystemMonitor");
    
    print("✅ Agent instances created - should be auto-registered to namespace bus");
    print("");
    
    // Use native 'emit' keyword instead of function calls
    print("🎯 EMITTING EVENTS WITH NATIVE 'emit' SYNTAX");
    print("============================================");
    
    // Emit support events - should route to Alice (support.any + support.tickets.new)
    emit support.tickets.new, {
        ticketId: "TICKET-001",
        priority: "high", 
        customer: "Acme Corp",
        issue: "Login problems"
    };
    print("📡 Emitted: support.tickets.new");
    
    // Emit dev events - should route to Bob (dev.any + dev.tasks.assigned)
    emit dev.tasks.assigned, {
        taskId: "TASK-123",
        assignee: "bob",
        sprint: "Sprint-42", 
        description: "Implement user auth"
    };
    print("📡 Emitted: dev.tasks.assigned");
    
    // Emit critical system event - should route to SystemMonitor (any.critical + system.any)
    emit system.critical, {
        server: "web-01",
        issue: "memory usage 95%",
        threshold: 90,
        action: "scale up required"
    };
    print("📡 Emitted: system.critical");
    
    // Emit critical alert from different namespace - should route to SystemMonitor (any.critical)
    emit alerts.critical, {
        server: "db-01", 
        issue: "disk usage 98%",
        threshold: 95,
        action: "cleanup required"
    };
    print("📡 Emitted: alerts.critical");
    
    print("");
    print("🎯 EXPECTED AUTO-REGISTRATION BEHAVIOR:");
    print("======================================");
    print("✅ Alice auto-registered for: support.any, support.tickets.new");
    print("✅ Bob auto-registered for: dev.any, dev.tasks.assigned");
    print("✅ SystemMonitor auto-registered for: any.critical, system.any");
    print("   (any.critical should match ALL namespaces: system.critical, alerts.critical, etc.)");
    print("");
    print("✅ Events should be delivered to agent 'on' handlers automatically");
    print("✅ No manual RegisterNamespacedAgent() calls needed");
    print("✅ Wildcard 'any' creates broad namespace registrations");
}
catch (error)
{
    print("❌ ERROR: " + error);
    print("This suggests event bus runtime or auto-registration not implemented yet");
}
