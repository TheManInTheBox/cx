// Complete End-to-End Namespace Event System Test
// Tests the full pipeline: RegisterNamespacedAgent -> EmitNamespacedEvent -> Event routing
// Uses the 'any' wildcard syntax and namespace-based scoping

// Test 1: Register multiple agents with different namespace patterns
print("🚀 NAMESPACE EVENT SYSTEM - COMPREHENSIVE TEST");
print("===========================================");

try
{
    // Register agents in different namespaces
    var aliceId = RegisterNamespacedAgent("alice", "support", "agent", ["support.tickets", "customer.interactions"], null);
    print("✅ Registered agent alice with ID: " + aliceId);
    
    var bobId = RegisterNamespacedAgent("bob", "development", "senior-dev", ["dev.tasks", "code.reviews"], null);
    print("✅ Registered agent bob with ID: " + bobId);
    
    var systemId = RegisterNamespacedAgent("system-monitor", "infrastructure", "monitor", ["system.any", "alerts.any"], null);
    print("✅ Registered system monitor with ID: " + systemId);
    
    // Subscribe to namespace patterns using 'any' wildcards
    var supportSubscription = SubscribeToNamespacedEvent(aliceId, "support.any", null);
    print("✅ Alice subscribed to support.any events");
    
    var devSubscription = SubscribeToNamespacedEvent(bobId, "dev.any", null);
    print("✅ Bob subscribed to dev.any events");
    
    var systemSubscription = SubscribeToNamespacedEvent(systemId, "any.critical", null);
    print("✅ System monitor subscribed to any.critical events");
    
    // Get initial statistics
    var initialStats = GetNamespacedBusStatistics();
    print("📊 Initial Bus Statistics:");
    print("   Total Agents: " + initialStats.TotalAgents);
    print("   Total Event Patterns: " + initialStats.TotalEventPatterns);
    print("");
    
    print("🎯 EMITTING TEST EVENTS");
    print("======================");
    
    // Emit events to test namespace routing
    EmitNamespacedEvent("support.tickets.new", { 
        ticketId: "TICKET-001", 
        priority: "high", 
        customer: "Acme Corp" 
    }, "test-system");
    print("📡 Emitted: support.tickets.new");
    
    EmitNamespacedEvent("dev.tasks.assigned", { 
        taskId: "TASK-123", 
        assignee: "bob", 
        sprint: "Sprint-42" 
    }, "project-manager");
    print("📡 Emitted: dev.tasks.assigned");
    
    EmitNamespacedEvent("system.critical.memory", { 
        server: "web-01", 
        memoryUsage: 95, 
        threshold: 90 
    }, "monitoring-service");
    print("📡 Emitted: system.critical.memory");
    
    // Test wildcard matching
    EmitNamespacedEvent("alerts.critical.disk", { 
        server: "db-01", 
        diskUsage: 98, 
        threshold: 95 
    }, "monitoring-service");
    print("📡 Emitted: alerts.critical.disk");
    
    // Get final statistics
    var finalStats = GetNamespacedBusStatistics();
    print("");
    print("📊 Final Bus Statistics:");
    print("   Total Agents: " + finalStats.TotalAgents);
    print("   Total Event Patterns: " + finalStats.TotalEventPatterns);
    print("   Events Processed: 4 (expected)");
    print("   Top Event Patterns: " + finalStats.TopEventPatterns);
    
    print("");
    print("🎯 EXPECTED ROUTING BEHAVIOR:");
    print("==============================");
    print("✅ Alice should receive: support.tickets.new (matches support.any)");
    print("✅ Bob should receive: dev.tasks.assigned (matches dev.any)");  
    print("✅ System Monitor should receive: system.critical.memory + alerts.critical.disk (matches any.critical)");
    print("");
    
    // Test unregister
    var unregisterResult = UnregisterNamespacedAgent(bobId);
    print("🔄 Unregistered Bob: " + unregisterResult);
    
    var cleanupStats = GetNamespacedBusStatistics();
    print("📊 After Cleanup - Total Agents: " + cleanupStats.TotalAgents);
    
    print("✅ NAMESPACE EVENT SYSTEM TEST COMPLETE!");
    print("✅ All functions operational with 'any' wildcard syntax");
    print("✅ Runtime function registration successful");
}
catch (error)
{
    print("❌ ERROR: " + error);
    print("This suggests runtime function registration or event bus initialization failed");
}
