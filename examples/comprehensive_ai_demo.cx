// Comprehensive AI Services Demo - Aura CX Language  
// Testing all available AI capabilities

using textGen from "Cx.AI.TextGeneration";
using chatBot from "Cx.AI.ChatCompletion";
using imageGen from "Cx.AI.TextToImage";

print("=== AURA CX - COMPREHENSIVE AI SERVICES DEMO ===");

// 1. Text Generation with Options
print("\nðŸ¤– 1. ADVANCED TEXT GENERATION");
var creativityOptions = {
    temperature: 0.9,
    maxTokens: 150,
    topP: 0.95,
    frequencyPenalty: 0.2
};

var creativePrompt = "Write a creative tagline for an AI-native programming language called Aura CX";
var tagline = textGen.GenerateAsync(creativePrompt, creativityOptions);
print("Creative Tagline: " + tagline);

// 2. Structured Analysis  
print("\nðŸ“Š 2. TECHNICAL ANALYSIS");
var analysisOptions = {
    temperature: 0.3,
    maxTokens: 200
};

var analysisPrompt = "Analyze the benefits of AI-native programming languages for enterprise development";
var analysis = textGen.GenerateAsync(analysisPrompt, analysisOptions);
print("Technical Analysis: " + analysis);

// 3. Chat Completion for Conversational AI
print("\nðŸ’¬ 3. CONVERSATIONAL AI");
var conversation = chatBot.StartConversationAsync("You are an expert software architect specializing in AI-native programming languages.");
var architectQuestion = "What are the key design principles for an AI-native language?";
var architectResponse = chatBot.ContinueConversationAsync(conversation, architectQuestion);
print("Architect Response: " + architectResponse);

// 4. Code Generation
print("\nâš¡ 4. AI-POWERED CODE GENERATION");
var codeOptions = {
    temperature: 0.1,
    maxTokens: 300
};

var codePrompt = "Generate a simple CX language function that uses AI to analyze text sentiment";
var generatedCode = textGen.GenerateAsync(codePrompt, codeOptions);
print("Generated Code Example:");
print(generatedCode);

// 5. Image Generation (DALL-E 3)
print("\nðŸŽ¨ 5. IMAGE GENERATION");
var imageOptions = {
    size: "1024x1024",
    quality: "standard",
    style: "vivid"
};

var imagePrompt = "A futuristic programming environment with AI assistance, holographic code displays, and neural network visualizations";
var imageUrl = imageGen.GenerateImageAsync(imagePrompt, imageOptions);
print("Generated Image URL: " + imageUrl);

// 6. Multi-Step AI Workflow
print("\nðŸ”„ 6. MULTI-STEP AI WORKFLOW");
var workflowPrompt = "Create a brief product description for Aura CX language";
var productDesc = textGen.GenerateAsync(workflowPrompt, { temperature: 0.7, maxTokens: 100 });
print("Product Description: " + productDesc);

var marketingPrompt = "Based on this description, create 3 key selling points: " + productDesc;
var sellingPoints = textGen.GenerateAsync(marketingPrompt, { temperature: 0.6, maxTokens: 150 });
print("Key Selling Points: " + sellingPoints);

// 7. Performance Metrics
print("\nðŸ“ˆ 7. AI PERFORMANCE SUMMARY");
print("âœ… Text Generation: Operational with customizable parameters");
print("âœ… Chat Completion: Conversational AI with context management");
print("âœ… Image Generation: DALL-E 3 integration for visual content");
print("âœ… Multi-Modal Processing: Seamless integration across AI capabilities");
print("âœ… Enterprise Integration: Azure OpenAI with monitoring and telemetry");

print("\n=== AURA CX AI SERVICES FULLY OPERATIONAL ===");
