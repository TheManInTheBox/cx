// IS FIRING TEST: Cognitive Boolean Logic Verification
// This test verifies that the 'is' statement correctly fires events
// based on a cognitive evaluation, and that handlers are only triggered
// when the evaluation is expected to be true.

class IsFiringTester
{
    constructor()
    {
        print("--- IS FIRING TEST STARTING ---");
        this.runTests();
    }

    function runTests()
    {
        print("Test 1: Evaluating a statement that should be TRUE.");
        // This should fire the 'decision.true.made' event.
        is {
            context: "Verify a universally true statement.",
            evaluate: "The sky is blue.",
            handlers: [ decision.true.made ]
        };

        print("Test 2: Evaluating a statement that should be FALSE.");
        // This should NOT fire the 'decision.false.made' event.
        is {
            context: "Verify a universally false statement.",
            evaluate: "Pigs can fly.",
            handlers: [ decision.false.made ]
        };

        // Give a moment for events to process before shutting down
        await {
            reason: "Allowing time for async event processing",
            minDurationMs: 2000,
            maxDurationMs: 2000,
            handlers: [ system.shutdown.request ]
        };
    }

    on decision.true.made (event)
    {
        print("✅ SUCCESS: 'is' statement correctly evaluated TRUE and fired the event.");
    }

    on decision.false.made (event)
    {
        print("❌ FAILURE: 'is' statement for a FALSE condition incorrectly fired an event.");
    }
}

on system.shutdown.request (event)
{
    print("--- IS FIRING TEST COMPLETE ---");
    emit system.shutdown { reason: "Test finished" };
}

var tester = new IsFiringTester();
