// Cx Class System Enhancement Test
// Demonstrates inheritance, interfaces, and access modifiers

print("=== Cx Class System Enhancement Demo ===");

// Define an interface
public interface IDrawable {
    draw() -> string;
    getArea() -> number;
}

// Define a base class
public class Shape implements IDrawable {
    protected name: string = "Unknown Shape";
    private id: number;
    
    public constructor(shapeName: string) {
        name = shapeName;
        id = 1;
    }
    
    public function getName() -> string {
        return name;
    }
    
    public function draw() -> string {
        return "Drawing a " + name;
    }
    
    public function getArea() -> number {
        return 0;
    }
}

// Define a derived class
public class Rectangle extends Shape implements IDrawable {
    private width: number;
    private height: number;
    
    public constructor(w: number, h: number) {
        super("Rectangle");
        width = w;
        height = h;
    }
    
    public function getArea() -> number {
        return width * height;
    }
    
    public function draw() -> string {
        return "Drawing a rectangle " + width + "x" + height;
    }
}

// Define another derived class with async methods
public class Circle extends Shape implements IDrawable {
    private radius: number;
    
    public constructor(r: number) {
        super("Circle");
        radius = r;
    }
    
    public function getArea() -> number {
        return 3.14159 * radius * radius;
    }
    
    public async function draw() -> string {
        var result = await task("Draw a circle with radius " + radius);
        return result;
    }
}

// Define a utility class with static-like behavior
public class ShapeUtils {
    public function compareAreas(shape1: IDrawable, shape2: IDrawable) -> string {
        var area1 = shape1.getArea();
        var area2 = shape2.getArea();
        
        if (area1 > area2) {
            return "First shape is larger";
        } else if (area2 > area1) {
            return "Second shape is larger";
        } else {
            return "Shapes have equal area";
        }
    }
}

// Test the class system
var rect = new Rectangle(10, 5);
var circle = new Circle(3);
var utils = new ShapeUtils();

print("Rectangle: " + rect.draw());
print("Rectangle area: " + rect.getArea());

print("Circle: " + await circle.draw());
print("Circle area: " + circle.getArea());

print("Comparison: " + utils.compareAreas(rect, circle));

print("=== Class System Demo Complete ===");
