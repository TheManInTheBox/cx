// CX Language - Native Vector Database Integration Test (Simplified)
// Testing the new LearnAsync and SearchAsync methods in AiServiceBase

print("🎯 CX Native Vector Database Integration - Testing Learn & Search");
print("✨ Every class now has built-in vector memory via this.Learn() and this.Search()");

// =============================================================================
// SIMPLE VECTOR INTEGRATION TEST - Testing this.Learn() and this.Search()
// =============================================================================

class SimpleVectorAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("🤖 " + this.name + " initialized with native vector capabilities");
        
        // Test native vector initialization
        this.testVectorMemory();
    }
    
    async function testVectorMemory()
    {
        print("📚 Testing vector memory for " + this.name);
        
        // Test 1: Learn something
        print("\n🧠 TEST 1: Learning experience...");
        var learnResult = await this.Learn({
            context: "test_learning",
            agent: this.name,
            message: "This is a test learning experience",
            timestamp: Date.now()
        });
        print("✅ Learn result: " + learnResult);
        
        // Test 2: Search for what we learned
        print("\n🔍 TEST 2: Searching for learned experience...");
        var searchResults = await this.Search("test_learning");
        print("📊 Search results found: " + searchResults.length + " items");
        
        if (searchResults.length > 0)
        {
            var firstResult = searchResults[0];
            print("  - First result content length: " + firstResult.content.length);
            print("  - Score: " + firstResult.score);
        }
        
        // Test 3: Learn multiple related items
        print("\n📈 TEST 3: Learning multiple experiences...");
        
        await this.Learn({
            context: "conversation",
            type: "greeting",
            message: "Hello world greeting pattern"
        });
        
        await this.Learn({
            context: "conversation", 
            type: "question",
            message: "How are you question pattern"
        });
        
        print("✅ Multiple experiences learned");
        
        // Test 4: Search for conversation patterns
        print("\n🔍 TEST 4: Searching conversation patterns...");
        var conversationResults = await this.Search("conversation");
        print("📊 Conversation results: " + conversationResults.length + " items");
        
        return conversationResults;
    }
    
    async function processUserMessage(userMessage)
    {
        print("\n📥 Processing message: " + userMessage);
        
        // Search for relevant context
        var context = await this.Search("conversation greeting");
        print("🔍 Context found: " + context.length + " relevant items");
        
        // Think about the response
        var response = await this.Think("Respond to: " + userMessage);
        print("🧠 Generated response: " + response);
        
        // Learn from this interaction
        var interactionData = {
            context: "user_interaction",
            input: userMessage,
            response: response,
            timestamp: Date.now()
        };
        
        var learnResult = await this.Learn(interactionData);
        print("📝 Interaction learned: " + learnResult);
        
        return response;
    }
}

// =============================================================================
// VOICE-READY AGENT - Prepared for Azure OpenAI Realtime API
// =============================================================================

class VoiceReadyAgent
{
    name: string;
    
    constructor(agentName)
    {
        this.name = agentName;
        print("🎤 " + this.name + " ready for voice with vector memory");
    }
    
    async function simulateVoiceInteraction(voiceInput)
    {
        print("\n🎙️ Voice input: " + voiceInput);
        
        // Search for voice conversation history
        var voiceHistory = await this.Search("voice");
        print("🔍 Voice history items: " + voiceHistory.length);
        
        // Generate voice response
        var voiceResponse = await this.Think("Voice response to: " + voiceInput);
        print("🗣️ Voice response: " + voiceResponse);
        
        // Learn from voice interaction
        await this.Learn({
            context: "voice_interaction",
            input: voiceInput,
            response: voiceResponse,
            type: "voice_to_voice",
            timestamp: Date.now()
        });
        
        print("✅ Voice interaction learned");
        return voiceResponse;
    }
    
    async function prepareForRealtimeAPI()
    {
        print("\n🚀 Preparing for Azure OpenAI Realtime API...");
        
        // Store readiness information
        await this.Learn({
            context: "realtime_api_prep",
            status: "ready",
            capabilities: "voice_to_voice",
            timestamp: Date.now()
        });
        
        // Verify preparation
        var readiness = await this.Search("realtime_api_prep");
        print("✅ Realtime API preparation: " + readiness.length + " entries");
        
        return readiness;
    }
}

// =============================================================================
// DEMONSTRATION: Run the vector database tests
// =============================================================================

print("\n🚀 STARTING: Native Vector Database Integration Tests");

// Test 1: Basic vector operations
print("\n🧪 TEST PHASE 1: Basic Vector Operations");
var testAgent = new SimpleVectorAgent("VectorTester");
var testResults = await testAgent.testVectorMemory();

// Test 2: User interaction with vector context
print("\n🧪 TEST PHASE 2: User Interaction with Vector Context");
var response1 = await testAgent.processUserMessage("Hello there!");
var response2 = await testAgent.processUserMessage("How can you help me?");

// Test 3: Voice-ready functionality
print("\n🧪 TEST PHASE 3: Voice-Ready Vector Operations");
var voiceAgent = new VoiceReadyAgent("VoiceBot");
await voiceAgent.simulateVoiceInteraction("Hello, this is a voice test");
await voiceAgent.simulateVoiceInteraction("Tell me about yourself");
var realtimeReadiness = await voiceAgent.prepareForRealtimeAPI();

print("\n✅ ALL TESTS COMPLETE: Native Vector Database Integration");
print("🧠 Vector learning and search working via this.Learn() and this.Search()");
print("🎯 All CX classes now have built-in vector memory capabilities");
print("🚀 Ready for Azure OpenAI Realtime API integration!");
print("📊 Vector operations completed successfully");
