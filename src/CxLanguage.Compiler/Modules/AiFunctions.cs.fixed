using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CxLanguage.Core.AI;
using Microsoft.Extensions.Logging;

namespace CxLanguage.Compiler.Modules;

/// <summary>
/// AI function handler for Cx language
/// Implements the 7 core AI functions:
/// - task() - Task planning and execution
/// - synthesize() - Code generation
/// - reason() - Logical reasoning and decision making
/// - process() - Multi-modal data processing
/// - generate() - Content generation
/// - embed() - Vector embeddings
/// - adapt() - Self-optimization and adaptation
/// </summary>
public class AiFunctions
{
    private readonly IAgenticRuntime _agenticRuntime;
    private readonly ILogger<AiFunctions> _logger;

    public AiFunctions(IAgenticRuntime agenticRuntime, ILogger<AiFunctions> logger)
    {
        _agenticRuntime = agenticRuntime ?? throw new ArgumentNullException(nameof(agenticRuntime));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Implements the 'task' AI function
    /// </summary>
    public async Task<string> TaskAsync(string goal, object? options = null)
    {
        _logger.LogInformation("Executing task function with goal: {Goal}", goal);
        
        try
        {
            // Convert options to the appropriate type
            var taskOptions = ConvertOptions<TaskPlanningOptions>(options);
            
            // Call the agentic runtime to plan and execute the task
            var planResult = await _agenticRuntime.PlanTaskAsync(goal, taskOptions);
            if (!planResult.IsSuccess || planResult.Plan == null)
            {
                _logger.LogWarning("Task planning failed: {Error}", planResult.ErrorMessage);
                return $"Task planning failed: {planResult.ErrorMessage}";
            }

            // Execute the task plan
            var executionResult = await _agenticRuntime.ExecuteTaskAsync(planResult.Plan);
            if (!executionResult.IsSuccess)
            {
                _logger.LogWarning("Task execution failed: {Error}", executionResult.ErrorMessage);
                return $"Task execution failed: {executionResult.ErrorMessage}";
            }

            return executionResult.Result ?? "Task completed successfully";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing task function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'synthesize' AI function for code generation
    /// </summary>
    public async Task<string> SynthesizeAsync(string specification, object? options = null)
    {
        _logger.LogInformation("Executing synthesize function with specification: {Spec}", specification);
        
        try
        {
            // Convert options to the appropriate type
            var codeOptions = ConvertOptions<CodeSynthesisOptions>(options);
            
            // Call the agentic runtime to synthesize code
            var result = await _agenticRuntime.SynthesizeCodeAsync(specification, codeOptions);
            
            if (result.IsSuccess && !string.IsNullOrEmpty(result.Code))
            {
                return result.Code;
            }
            else
            {
                _logger.LogWarning("Code synthesis failed: {Error}", result.ErrorMessage);
                return $"Code synthesis failed: {result.ErrorMessage}";
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing synthesize function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'reason' AI function for logical reasoning
    /// </summary>
    public async Task<string> ReasonAsync(string question, object? options = null)
    {
        _logger.LogInformation("Executing reason function with question: {Question}", question);
        
        try
        {
            // Convert options to AI invocation options
            var aiOptions = ConvertOptions<AIInvocationOptions>(options);
            
            // Use the agentic runtime to reason about the question
            var result = await _agenticRuntime.InvokeAIFunctionAsync("reason", new object[] { question, aiOptions });
            
            return result?.ToString() ?? "Reasoning failed: No response from AI service";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing reason function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'process' AI function for multi-modal data processing
    /// </summary>
    public async Task<string> ProcessAsync(string input, string context, object? options = null)
    {
        _logger.LogInformation("Executing process function with input: {Input}", input);
        
        try
        {
            // Convert options to AI invocation options
            var aiOptions = ConvertOptions<AIInvocationOptions>(options);
            
            // Use the agentic runtime to process the input
            var result = await _agenticRuntime.InvokeAIFunctionAsync("process", new object[] { input, context, aiOptions });
            
            return result?.ToString() ?? "Processing failed: No response from AI service";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing process function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'generate' AI function for content generation
    /// </summary>
    public async Task<string> GenerateAsync(string prompt, object? options = null)
    {
        _logger.LogInformation("Executing generate function with prompt: {Prompt}", prompt);
        
        try
        {
            // Convert options to AI invocation options
            var aiOptions = ConvertOptions<AIInvocationOptions>(options);
            
            // Use the agentic runtime to generate content
            var result = await _agenticRuntime.InvokeAIFunctionAsync("generate", new object[] { prompt, aiOptions });
            
            return result?.ToString() ?? "Generation failed: No response from AI service";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing generate function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'embed' AI function for vector embeddings
    /// </summary>
    public async Task<string> EmbedAsync(string text, object? options = null)
    {
        _logger.LogInformation("Executing embed function with text of length: {Length}", text.Length);
        
        try
        {
            // Convert options to AI invocation options
            var aiOptions = ConvertOptions<AIInvocationOptions>(options);
            
            // Use the agentic runtime to generate embeddings
            var result = await _agenticRuntime.InvokeAIFunctionAsync("embed", new object[] { text, aiOptions });
            
            return "Embedding generated successfully";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing embed function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Implements the 'adapt' AI function for self-optimization
    /// </summary>
    public async Task<string> AdaptAsync(object functionOrCode, object? options = null)
    {
        _logger.LogInformation("Executing adapt function");
        
        try
        {
            // Convert options to AI invocation options
            var aiOptions = ConvertOptions<AIInvocationOptions>(options);
            
            // Use the agentic runtime to adapt the function
            var result = await _agenticRuntime.InvokeAIFunctionAsync("adapt", new object[] { functionOrCode, aiOptions });
            
            return result?.ToString() ?? "Adaptation completed";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing adapt function");
            return $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Converts a generic options object to the specified type
    /// </summary>
    private T ConvertOptions<T>(object? options) where T : class, new()
    {
        if (options == null)
        {
            return new T(); // Return a default instance instead of null
        }

        try
        {
            if (options is Dictionary<string, object> optionsDict)
            {
                var result = new T();
                var properties = typeof(T).GetProperties();

                foreach (var property in properties)
                {
                    if (optionsDict.TryGetValue(property.Name, out var value) && value != null)
                    {
                        try
                        {
                            property.SetValue(result, Convert.ChangeType(value, property.PropertyType));
                        }
                        catch
                        {
                            // If conversion fails, try to handle common cases
                            if (property.PropertyType == typeof(string))
                            {
                                property.SetValue(result, value.ToString());
                            }
                        }
                    }
                }
                
                return result;
            }
            
            // If options is already the correct type, return it
            if (options is T typedOptions)
            {
                return typedOptions;
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error converting options to type {Type}", typeof(T).Name);
        }
        
        return new T(); // Return default instance if conversion fails
    }
}
