using CxLanguage.Azure.Services;
using CxLanguage.Core.AI;
using CxLanguage.Core.Telemetry;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.ApplicationInsights;
using System.Text.Json;

namespace CxLanguage.CLI.Tests;

/// <summary>
/// Enhanced AI Services Integration Test
/// Tests the improved AI service implementations with real execution, error handling, and advanced features
/// </summary>
public class EnhancedAIServicesTest
{
    public static async Task RunAllTests()
    {
        Console.WriteLine("=== Enhanced AI Services Integration Test ===");
        Console.WriteLine();

        // Setup services
        var serviceProvider = SetupServices();
        var logger = serviceProvider.GetRequiredService<ILogger<EnhancedAIServicesTest>>();
        var aiService = serviceProvider.GetRequiredService<IAiService>();
        var resilientService = serviceProvider.GetRequiredService<ResilientAIService>();
        var multiModalService = serviceProvider.GetRequiredService<EnhancedMultiModalAIService>();

        try
        {
            // Test 1: Real AI Execution
            Console.WriteLine("1. Testing Real AI Execution...");
            await TestRealAIExecution(aiService, logger);
            Console.WriteLine("✓ Real AI execution tests completed");
            Console.WriteLine();

            // Test 2: Enhanced Error Handling
            Console.WriteLine("2. Testing Enhanced Error Handling...");
            await TestErrorHandling(resilientService, logger);
            Console.WriteLine("✓ Error handling tests completed");
            Console.WriteLine();

            // Test 3: Advanced Streaming
            Console.WriteLine("3. Testing Advanced Streaming...");
            await TestAdvancedStreaming(aiService, logger);
            Console.WriteLine("✓ Advanced streaming tests completed");
            Console.WriteLine();

            // Test 4: Multi-Modal Processing
            Console.WriteLine("4. Testing Multi-Modal Processing...");
            await TestMultiModalProcessing(multiModalService, logger);
            Console.WriteLine("✓ Multi-modal processing tests completed");
            Console.WriteLine();

            // Test 5: Enhanced Embedding Generation
            Console.WriteLine("5. Testing Enhanced Embedding Generation...");
            await TestEmbeddingGeneration(aiService, logger);
            Console.WriteLine("✓ Embedding generation tests completed");
            Console.WriteLine();

            // Test 6: Advanced Image Analysis
            Console.WriteLine("6. Testing Advanced Image Analysis...");
            await TestAdvancedImageAnalysis(aiService, logger);
            Console.WriteLine("✓ Advanced image analysis tests completed");
            Console.WriteLine();

            Console.WriteLine("=== All Enhanced AI Services Tests Completed Successfully! ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Test failed: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private static async Task TestRealAIExecution(CxLanguage.Azure.Services.IAiService aiService, ILogger logger)
    {
        // Test real text generation
        logger.LogInformation("Testing real text generation...");
        var textOptions = new AiRequestOptions
        {
            Temperature = 0.7,
            MaxTokens = 100,
            SystemPrompt = "You are a helpful AI assistant."
        };

        var textResult = await aiService.GenerateTextAsync("Explain what AI is in one sentence.", textOptions);
        Console.WriteLine($"Text generation success: {textResult.IsSuccess}");
        if (textResult.IsSuccess)
        {
            Console.WriteLine($"Response: {textResult.Content}");
            Console.WriteLine($"Token usage: {textResult.Usage?.TotalTokens ?? 0} tokens");
        }
        else
        {
            Console.WriteLine($"Error: {textResult.ErrorMessage}");
        }

        // Test real image generation
        logger.LogInformation("Testing real image generation...");
        var imageOptions = new AiImageOptions
        {
            Size = "1024x1024",
            Quality = "standard",
            Style = "vivid"
        };

        var imageResult = await aiService.GenerateImageAsync("A serene landscape with mountains", imageOptions);
        Console.WriteLine($"Image generation success: {imageResult.IsSuccess}");
        if (imageResult.IsSuccess)
        {
            Console.WriteLine($"Image URL: {imageResult.ImageUrl}");
            Console.WriteLine($"Revised prompt: {imageResult.RevisedPrompt}");
        }
        else
        {
            Console.WriteLine($"Error: {imageResult.ErrorMessage}");
        }
    }

    private static async Task TestErrorHandling(ResilientAIService resilientService, ILogger logger)
    {
        // Test retry logic with invalid input
        logger.LogInformation("Testing retry logic...");
        var invalidOptions = new AiRequestOptions
        {
            MaxTokens = -1, // This should cause an error
            Temperature = 2.5 // Invalid temperature
        };

        var retryResult = await resilientService.GenerateTextAsync("Test prompt", invalidOptions);
        Console.WriteLine($"Retry handling result: {retryResult.IsSuccess}");
        Console.WriteLine($"Message: {(retryResult.IsSuccess ? retryResult.Content : retryResult.ErrorMessage)}");

        // Test circuit breaker behavior
        logger.LogInformation("Testing circuit breaker...");
        for (int i = 0; i < 3; i++)
        {
            var circuitResult = await resilientService.GenerateTextAsync("", invalidOptions);
            Console.WriteLine($"Circuit breaker test {i + 1}: {circuitResult.IsSuccess}");
        }
    }

    private static async Task TestAdvancedStreaming(IAiService aiService, ILogger logger)
    {
        logger.LogInformation("Testing advanced streaming...");
        
        var streamingOptions = new AiRequestOptions
        {
            Temperature = 0.8,
            MaxTokens = 200,
            SystemPrompt = "You are a creative storyteller."
        };

        try
        {
            var streamResponse = await aiService.StreamGenerateTextAsync(
                "Tell a short story about a robot learning to paint", streamingOptions);

            Console.WriteLine("Streaming response received. Processing tokens...");
            var tokenCount = 0;
            var fullResponse = "";

            await foreach (var token in streamResponse.GetTokensAsync())
            {
                fullResponse += token;
                tokenCount++;
                
                if (tokenCount <= 10) // Show first 10 tokens
                {
                    Console.Write(token);
                }
                else if (tokenCount == 11)
                {
                    Console.Write("...");
                }
            }

            Console.WriteLine();
            Console.WriteLine($"Total tokens received: {tokenCount}");
            Console.WriteLine($"Full response length: {fullResponse.Length} characters");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Streaming error: {ex.Message}");
        }
    }

    private static async Task TestMultiModalProcessing(EnhancedMultiModalAIService multiModalService, ILogger logger)
    {
        logger.LogInformation("Testing multi-modal processing...");

        var multiModalRequest = new MultiModalRequest
        {
            Modalities = new List<Modality>
            {
                new Modality
                {
                    Type = ModalityType.Text,
                    Content = "Analyze the benefits of renewable energy",
                    IsGeneration = false
                },
                new Modality
                {
                    Type = ModalityType.Image,
                    Content = "A solar panel installation on a house roof",
                    IsGeneration = true
                }
            },
            Options = new MultiModalOptions
            {
                Temperature = 0.7,
                MaxTokens = 500,
                SynthesizeResults = true,
                Language = "en"
            }
        };

        var multiModalResult = await multiModalService.ProcessMultiModalAsync(multiModalRequest);
        Console.WriteLine($"Multi-modal processing success: {multiModalResult.IsSuccess}");
        Console.WriteLine($"Processing time: {multiModalResult.ProcessingTime.TotalMilliseconds}ms");
        Console.WriteLine($"Results count: {multiModalResult.Results.Count}");

        if (multiModalResult.IsSuccess)
        {
            foreach (var result in multiModalResult.Results)
            {
                Console.WriteLine($"- {result.Type}: {result.IsSuccess} ({result.ProcessingTime.TotalMilliseconds}ms)");
            }
            
            if (!string.IsNullOrEmpty(multiModalResult.SynthesizedResult))
            {
                Console.WriteLine($"Synthesized result: {multiModalResult.SynthesizedResult.Substring(0, Math.Min(100, multiModalResult.SynthesizedResult.Length))}...");
            }
        }

        // Test streaming multi-modal
        logger.LogInformation("Testing streaming multi-modal...");
        Console.WriteLine("Streaming multi-modal updates:");
        
        await foreach (var update in multiModalService.StreamMultiModalAsync(multiModalRequest))
        {
            Console.WriteLine($"[{update.Timestamp:HH:mm:ss}] {update.Type}: {update.Message}");
            
            if (update.Type == StreamUpdateType.Completed)
            {
                Console.WriteLine($"Total processing time: {update.TotalProcessingTime?.TotalMilliseconds}ms");
                break;
            }
        }
    }

    private static async Task TestEmbeddingGeneration(IAiService aiService, ILogger logger)
    {
        logger.LogInformation("Testing enhanced embedding generation...");

        var embeddingTexts = new[]
        {
            "Artificial intelligence is transforming industries",
            "Machine learning algorithms can identify patterns",
            "Deep learning networks process complex data"
        };

        foreach (var text in embeddingTexts)
        {
            var embeddingResult = await aiService.GenerateEmbeddingAsync(text);
            Console.WriteLine($"Embedding for '{text.Substring(0, Math.Min(30, text.Length))}...': {embeddingResult.IsSuccess}");
            
            if (embeddingResult.IsSuccess)
            {
                Console.WriteLine($"  Vector dimension: {embeddingResult.Embedding.Length}");
                Console.WriteLine($"  First 5 values: [{string.Join(", ", embeddingResult.Embedding.Take(5).Select(f => f.ToString("F4")))}]");
                Console.WriteLine($"  Token usage: {embeddingResult.Usage?.TotalTokens ?? 0}");
            }
            else
            {
                Console.WriteLine($"  Error: {embeddingResult.ErrorMessage}");
            }
        }
    }

    private static async Task TestAdvancedImageAnalysis(IAiService aiService, ILogger logger)
    {
        logger.LogInformation("Testing advanced image analysis...");

        // Note: Using a placeholder URL for demonstration
        var imageUrl = "https://example.com/sample-chart.png";
        
        var analysisOptions = new AiImageAnalysisOptions
        {
            EnableDescription = true,
            EnableTags = true,
            EnableObjects = true,
            EnableOCR = true,
            Language = "en"
        };

        var analysisResult = await aiService.AnalyzeImageAsync(imageUrl, analysisOptions);
        Console.WriteLine($"Image analysis success: {analysisResult.IsSuccess}");
        
        if (analysisResult.IsSuccess)
        {
            Console.WriteLine($"Description: {analysisResult.Description}");
            Console.WriteLine($"Tags: [{string.Join(", ", analysisResult.Tags)}]");
            Console.WriteLine($"Objects: [{string.Join(", ", analysisResult.Objects)}]");
            Console.WriteLine($"Extracted text: {analysisResult.ExtractedText}");
        }
        else
        {
            Console.WriteLine($"Error: {analysisResult.ErrorMessage}");
        }
    }

    private static ServiceProvider SetupServices()
    {
        var services = new ServiceCollection();

        // Configuration
        var configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: true)
            .AddEnvironmentVariables()
            .Build();

        services.AddSingleton<IConfiguration>(configuration);

        // Logging
        services.AddLogging(builder =>
        {
            builder.AddConsole();
            builder.SetMinimumLevel(LogLevel.Information);
        });

        // Application Insights (optional)
        services.AddSingleton<TelemetryClient>();
        services.AddSingleton<CxTelemetryService>();

        // AI Services
        services.AddSingleton<IAiService, AzureOpenAIService>();
        services.AddSingleton<ResilientAIService>();
        services.AddSingleton<EnhancedMultiModalAIService>();

        return services.BuildServiceProvider();
    }
}

/// <summary>
/// Program entry point for running the enhanced AI services tests
/// </summary>
public class Program
{
    public static async Task Main(string[] args)
    {
        if (args.Length > 0 && args[0] == "test-enhanced-ai")
        {
            await EnhancedAIServicesTest.RunAllTests();
        }
        else
        {
            Console.WriteLine("Enhanced AI Services Test");
            Console.WriteLine("Usage: dotnet run test-enhanced-ai");
            Console.WriteLine();
            Console.WriteLine("This test validates:");
            Console.WriteLine("• Real Azure OpenAI execution (not mocks)");
            Console.WriteLine("• Comprehensive error handling with retries");
            Console.WriteLine("• Advanced streaming capabilities");
            Console.WriteLine("• Multi-modal AI processing");
            Console.WriteLine("• Enhanced embedding generation");
            Console.WriteLine("• Advanced image analysis with GPT-4 Vision");
        }
    }
}
